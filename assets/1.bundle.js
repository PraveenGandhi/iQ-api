webpackJsonp([1],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./BaseCrudOperations/BaseCreateVM": 11,
		"./BaseCrudOperations/BaseCreateVM.js": 11,
		"./BaseCrudOperations/BaseListVM": 12,
		"./BaseCrudOperations/BaseListVM.js": 12,
		"./BaseCrudOperations/BaseViewVM": 16,
		"./BaseCrudOperations/BaseViewVM.js": 16,
		"./app": 17,
		"./app.html": 28,
		"./app.js": 17,
		"./aurelia-animator-css": 29,
		"./aurelia-bootstrapper-webpack": 2,
		"./aurelia-event-aggregator": 25,
		"./aurelia-framework": 18,
		"./aurelia-history-browser": 30,
		"./aurelia-logging-console": 32,
		"./aurelia-pal-browser": 5,
		"./aurelia-polyfills": 3,
		"./aurelia-router": 33,
		"./aurelia-sails-socket-client": 26,
		"./aurelia-templating-binding": 35,
		"./aurelia-templating-resources": 36,
		"./aurelia-templating-resources/abstract-repeater": 49,
		"./aurelia-templating-resources/abstract-repeater.js": 49,
		"./aurelia-templating-resources/analyze-view-factory": 48,
		"./aurelia-templating-resources/analyze-view-factory.js": 48,
		"./aurelia-templating-resources/array-repeat-strategy": 43,
		"./aurelia-templating-resources/array-repeat-strategy.js": 43,
		"./aurelia-templating-resources/binding-mode-behaviors": 59,
		"./aurelia-templating-resources/binding-mode-behaviors.js": 59,
		"./aurelia-templating-resources/binding-signaler": 63,
		"./aurelia-templating-resources/binding-signaler.js": 63,
		"./aurelia-templating-resources/compile-spy": 56,
		"./aurelia-templating-resources/compile-spy.js": 56,
		"./aurelia-templating-resources/compose": 37,
		"./aurelia-templating-resources/compose.js": 37,
		"./aurelia-templating-resources/css-resource": 58,
		"./aurelia-templating-resources/css-resource.js": 58,
		"./aurelia-templating-resources/debounce-binding-behavior": 61,
		"./aurelia-templating-resources/debounce-binding-behavior.js": 61,
		"./aurelia-templating-resources/dynamic-element": 66,
		"./aurelia-templating-resources/dynamic-element.js": 66,
		"./aurelia-templating-resources/focus": 55,
		"./aurelia-templating-resources/focus.js": 55,
		"./aurelia-templating-resources/hide": 51,
		"./aurelia-templating-resources/hide.js": 51,
		"./aurelia-templating-resources/html-resource-plugin": 65,
		"./aurelia-templating-resources/html-resource-plugin.js": 65,
		"./aurelia-templating-resources/html-sanitizer": 53,
		"./aurelia-templating-resources/html-sanitizer.js": 53,
		"./aurelia-templating-resources/if": 38,
		"./aurelia-templating-resources/if.js": 38,
		"./aurelia-templating-resources/map-repeat-strategy": 45,
		"./aurelia-templating-resources/map-repeat-strategy.js": 45,
		"./aurelia-templating-resources/null-repeat-strategy": 42,
		"./aurelia-templating-resources/null-repeat-strategy.js": 42,
		"./aurelia-templating-resources/number-repeat-strategy": 47,
		"./aurelia-templating-resources/number-repeat-strategy.js": 47,
		"./aurelia-templating-resources/repeat": 40,
		"./aurelia-templating-resources/repeat-strategy-locator": 41,
		"./aurelia-templating-resources/repeat-strategy-locator.js": 41,
		"./aurelia-templating-resources/repeat-utilities": 44,
		"./aurelia-templating-resources/repeat-utilities.js": 44,
		"./aurelia-templating-resources/repeat.js": 40,
		"./aurelia-templating-resources/replaceable": 54,
		"./aurelia-templating-resources/replaceable.js": 54,
		"./aurelia-templating-resources/sanitize-html": 52,
		"./aurelia-templating-resources/sanitize-html.js": 52,
		"./aurelia-templating-resources/set-repeat-strategy": 46,
		"./aurelia-templating-resources/set-repeat-strategy.js": 46,
		"./aurelia-templating-resources/show": 50,
		"./aurelia-templating-resources/show.js": 50,
		"./aurelia-templating-resources/signal-binding-behavior": 62,
		"./aurelia-templating-resources/signal-binding-behavior.js": 62,
		"./aurelia-templating-resources/throttle-binding-behavior": 60,
		"./aurelia-templating-resources/throttle-binding-behavior.js": 60,
		"./aurelia-templating-resources/update-trigger-binding-behavior": 64,
		"./aurelia-templating-resources/update-trigger-binding-behavior.js": 64,
		"./aurelia-templating-resources/view-spy": 57,
		"./aurelia-templating-resources/view-spy.js": 57,
		"./aurelia-templating-resources/with": 39,
		"./aurelia-templating-resources/with.js": 39,
		"./aurelia-templating-router": 67,
		"./aurelia-templating-router/route-href": 70,
		"./aurelia-templating-router/route-href.js": 70,
		"./aurelia-templating-router/route-loader": 68,
		"./aurelia-templating-router/route-loader.js": 68,
		"./aurelia-templating-router/router-view": 69,
		"./aurelia-templating-router/router-view.js": 69,
		"./auth/index": 71,
		"./auth/index.html": 72,
		"./auth/index.js": 71,
		"./authConfig": 73,
		"./authConfig.js": 73,
		"./components/aurelia-semantic-ui/collections/ui-breadcrumb": 74,
		"./components/aurelia-semantic-ui/collections/ui-breadcrumb.js": 74,
		"./components/aurelia-semantic-ui/collections/ui-form": 77,
		"./components/aurelia-semantic-ui/collections/ui-form.js": 77,
		"./components/aurelia-semantic-ui/collections/ui-grid": 78,
		"./components/aurelia-semantic-ui/collections/ui-grid.js": 78,
		"./components/aurelia-semantic-ui/collections/ui-menu": 79,
		"./components/aurelia-semantic-ui/collections/ui-menu.js": 79,
		"./components/aurelia-semantic-ui/collections/ui-message": 80,
		"./components/aurelia-semantic-ui/collections/ui-message.js": 80,
		"./components/aurelia-semantic-ui/collections/ui-table": 81,
		"./components/aurelia-semantic-ui/collections/ui-table.js": 81,
		"./components/aurelia-semantic-ui/constants": 75,
		"./components/aurelia-semantic-ui/constants.js": 75,
		"./components/aurelia-semantic-ui/elements/ui-button": 82,
		"./components/aurelia-semantic-ui/elements/ui-button.js": 82,
		"./components/aurelia-semantic-ui/elements/ui-container": 83,
		"./components/aurelia-semantic-ui/elements/ui-container.js": 83,
		"./components/aurelia-semantic-ui/elements/ui-divider": 84,
		"./components/aurelia-semantic-ui/elements/ui-divider.js": 84,
		"./components/aurelia-semantic-ui/elements/ui-flag": 85,
		"./components/aurelia-semantic-ui/elements/ui-flag.js": 85,
		"./components/aurelia-semantic-ui/elements/ui-header": 86,
		"./components/aurelia-semantic-ui/elements/ui-header.js": 86,
		"./components/aurelia-semantic-ui/elements/ui-icon": 87,
		"./components/aurelia-semantic-ui/elements/ui-icon.js": 87,
		"./components/aurelia-semantic-ui/elements/ui-image": 88,
		"./components/aurelia-semantic-ui/elements/ui-image.js": 88,
		"./components/aurelia-semantic-ui/elements/ui-input": 89,
		"./components/aurelia-semantic-ui/elements/ui-input.js": 89,
		"./components/aurelia-semantic-ui/elements/ui-label": 90,
		"./components/aurelia-semantic-ui/elements/ui-label.js": 90,
		"./components/aurelia-semantic-ui/elements/ui-list": 91,
		"./components/aurelia-semantic-ui/elements/ui-list.js": 91,
		"./components/aurelia-semantic-ui/elements/ui-loader": 92,
		"./components/aurelia-semantic-ui/elements/ui-loader.js": 92,
		"./components/aurelia-semantic-ui/elements/ui-rail": 93,
		"./components/aurelia-semantic-ui/elements/ui-rail.js": 93,
		"./components/aurelia-semantic-ui/elements/ui-reveal": 94,
		"./components/aurelia-semantic-ui/elements/ui-reveal.js": 94,
		"./components/aurelia-semantic-ui/elements/ui-segment": 95,
		"./components/aurelia-semantic-ui/elements/ui-segment.js": 95,
		"./components/aurelia-semantic-ui/elements/ui-step": 96,
		"./components/aurelia-semantic-ui/elements/ui-step.js": 96,
		"./components/aurelia-semantic-ui/index": 97,
		"./components/aurelia-semantic-ui/index.js": 97,
		"./components/aurelia-semantic-ui/modules/ui-accordion": 98,
		"./components/aurelia-semantic-ui/modules/ui-accordion.js": 98,
		"./components/aurelia-semantic-ui/modules/ui-dropdown": 99,
		"./components/aurelia-semantic-ui/modules/ui-dropdown.js": 99,
		"./components/aurelia-semantic-ui/modules/ui-modal": 100,
		"./components/aurelia-semantic-ui/modules/ui-modal.js": 100,
		"./components/aurelia-semantic-ui/modules/ui-search": 101,
		"./components/aurelia-semantic-ui/modules/ui-search.js": 101,
		"./components/aurelia-semantic-ui/modules/ui-sidebar": 102,
		"./components/aurelia-semantic-ui/modules/ui-sidebar.js": 102,
		"./components/aurelia-semantic-ui/ui-attribute": 76,
		"./components/aurelia-semantic-ui/ui-attribute.js": 76,
		"./components/aurelia-semantic-ui/views/ui-card": 103,
		"./components/aurelia-semantic-ui/views/ui-card.js": 103,
		"./components/aurelia-semantic-ui/views/ui-statistic": 104,
		"./components/aurelia-semantic-ui/views/ui-statistic.js": 104,
		"./components/form-control": 105,
		"./components/form-control.html": 106,
		"./components/form-control.js": 105,
		"./components/form-submit": 107,
		"./components/form-submit.html": 108,
		"./components/form-submit.js": 107,
		"./components/index": 109,
		"./components/index.js": 109,
		"./home/welcome": 110,
		"./home/welcome.html": 111,
		"./home/welcome.js": 110,
		"./jquery": 13,
		"./main": 1,
		"./main.js": 1,
		"./mousetrap": 15,
		"./question/answers/base": 125,
		"./question/answers/base.js": 125,
		"./question/answers/create": 126,
		"./question/answers/create.html": 127,
		"./question/answers/create.js": 126,
		"./question/answers/list": 128,
		"./question/answers/list.html": 129,
		"./question/answers/list.js": 128,
		"./question/answers/view": 130,
		"./question/answers/view.html": 131,
		"./question/answers/view.js": 130,
		"./question/base": 132,
		"./question/base.js": 132,
		"./question/child-router": 133,
		"./question/child-router.html": 134,
		"./question/child-router.js": 133,
		"./question/create": 135,
		"./question/create.html": 136,
		"./question/create.js": 135,
		"./question/details/addAnswer": 137,
		"./question/details/addAnswer.html": 138,
		"./question/details/addAnswer.js": 137,
		"./question/details/child-router": 139,
		"./question/details/child-router.html": 140,
		"./question/details/child-router.js": 139,
		"./question/details/view": 141,
		"./question/details/view.html": 142,
		"./question/details/view.js": 141,
		"./question/list": 143,
		"./question/list.html": 144,
		"./question/list.js": 143,
		"./question/view": 145,
		"./question/view.html": 146,
		"./question/view.js": 145,
		"./questionCategory/base": 147,
		"./questionCategory/base.js": 147,
		"./questionCategory/child-router": 148,
		"./questionCategory/child-router.html": 149,
		"./questionCategory/child-router.js": 148,
		"./questionCategory/create": 150,
		"./questionCategory/create.html": 151,
		"./questionCategory/create.js": 150,
		"./questionCategory/list": 152,
		"./questionCategory/list.html": 153,
		"./questionCategory/list.js": 152,
		"./questionCategory/view": 154,
		"./questionCategory/view.html": 155,
		"./questionCategory/view.js": 154,
		"./questionKind/base": 156,
		"./questionKind/base.js": 156,
		"./questionKind/child-router": 157,
		"./questionKind/child-router.html": 158,
		"./questionKind/child-router.js": 157,
		"./questionKind/create": 159,
		"./questionKind/create.html": 160,
		"./questionKind/create.js": 159,
		"./questionKind/list": 161,
		"./questionKind/list.html": 162,
		"./questionKind/list.js": 161,
		"./questionKind/view": 163,
		"./questionKind/view.html": 164,
		"./questionKind/view.js": 163,
		"./questionType/base": 165,
		"./questionType/base.js": 165,
		"./questionType/child-router": 166,
		"./questionType/child-router.html": 167,
		"./questionType/child-router.js": 166,
		"./questionType/create": 168,
		"./questionType/create.html": 169,
		"./questionType/create.js": 168,
		"./questionType/list": 170,
		"./questionType/list.html": 171,
		"./questionType/list.js": 170,
		"./questionType/view": 172,
		"./questionType/view.html": 173,
		"./questionType/view.js": 172,
		"./test/welcome": 174,
		"./test/welcome.html": 175,
		"./test/welcome.js": 174,
		"./users/base": 176,
		"./users/base.js": 176,
		"./users/child-router": 177,
		"./users/child-router.html": 178,
		"./users/child-router.js": 177,
		"./users/create": 179,
		"./users/create.html": 180,
		"./users/create.js": 179,
		"./users/list": 181,
		"./users/list.html": 182,
		"./users/list.js": 181,
		"./users/view": 183,
		"./users/view.html": 184,
		"./users/view.js": 183
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 10;


/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BaseCreateVM = exports.BaseCreateVM = function () {
	  function BaseCreateVM(sails, router, config) {
	    _classCallCheck(this, BaseCreateVM);
	
	    this.sails = sails;
	    this.router = router;
	    this.baseCtrlUrl = config.baseCtrlUrl;
	  }
	
	  BaseCreateVM.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.post(this.baseCtrlUrl, this.entity).then(function (data) {
	      return _this.router.navigate('');
	    });
	  };
	
	  return BaseCreateVM;
	}();

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	exports.__esModule = true;
	exports.BaseListVM = undefined;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	__webpack_require__(15);
	
	__webpack_require__(13);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var logger = LogManager.getLogger('BaseListVM');
	
	var BaseListVM = exports.BaseListVM = function () {
	  function BaseListVM(sails, router, config) {
	    var _this = this;
	
	    _classCallCheck(this, BaseListVM);
	
	    this.entities = [];
	
	    this.sails = sails;
	    this.router = router;
	    this.baseCtrlUrl = config.baseCtrlUrl;
	    this.entityToSubscribe = config.entityToSubscribe;
	
	    Mousetrap.bind('a', function () {
	      return window.location = '#' + _this.baseCtrlUrl + 'Create';
	    });
	    Mousetrap.bind('l', function () {
	      return window.location = '#' + _this.baseCtrlUrl;
	    });
	  }
	
	  BaseListVM.prototype.activate = function activate() {
	    var _this2 = this;
	
	    return this.sails.get(this.baseCtrlUrl).then(function (res) {
	      _this2.entities = res.body;
	      _this2.subscribe();
	    }).catch(function (res) {
	      res.statusCode === 403 ? _this2.router.navigate('/login') : logger.error(res);
	    });
	  };
	
	  BaseListVM.prototype.attached = function attached() {
	    $('table a .icon').popup({ variation: 'mini inverted', inline: true });
	  };
	
	  BaseListVM.prototype.deactivate = function deactivate() {
	    this.unsubscribe();
	  };
	
	  BaseListVM.prototype.subscribe = function subscribe() {
	    this.sails.on(this.entityToSubscribe, this.serverUpdate.bind(this));
	  };
	
	  BaseListVM.prototype.unsubscribe = function unsubscribe() {
	    this.sails.off(this.entityToSubscribe);
	  };
	
	  BaseListVM.prototype.serverUpdate = function serverUpdate(message) {
	    if (message.verb === 'created') {
	      this.entities.push(message.data);
	    } else if (message.verb === 'updated') {
	      var i = void 0;
	      for (i = 0; i < this.entities.length; i++) {
	        var entity = this.entities[i];
	        if ('' + entity.id === message.id) {
	          this.entities[i] = message.data;
	          break;
	        }
	      }
	    } else if (message.verb === 'destroyed') {
	      var _i = void 0;
	      for (_i = 0; _i < this.entities.length; _i++) {
	        var _entity = this.entities[_i];
	        if ('' + _entity.id === message.id) {
	          this.entities.splice(_i, 1);
	          break;
	        }
	      }
	    }
	  };
	
	  return BaseListVM;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 13 */,
/* 14 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getLogger = getLogger;
	exports.addAppender = addAppender;
	exports.setLevel = setLevel;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var logLevel = exports.logLevel = {
	  none: 0,
	  error: 1,
	  warn: 2,
	  info: 3,
	  debug: 4
	};
	
	var loggers = {};
	var currentLevel = logLevel.none;
	var appenders = [];
	var slice = Array.prototype.slice;
	var loggerConstructionKey = {};
	
	function log(logger, level, args) {
	  var i = appenders.length;
	  var current = void 0;
	
	  args = slice.call(args);
	  args.unshift(logger);
	
	  while (i--) {
	    current = appenders[i];
	    current[level].apply(current, args);
	  }
	}
	
	function debug() {
	  if (currentLevel < 4) {
	    return;
	  }
	
	  log(this, 'debug', arguments);
	}
	
	function info() {
	  if (currentLevel < 3) {
	    return;
	  }
	
	  log(this, 'info', arguments);
	}
	
	function warn() {
	  if (currentLevel < 2) {
	    return;
	  }
	
	  log(this, 'warn', arguments);
	}
	
	function error() {
	  if (currentLevel < 1) {
	    return;
	  }
	
	  log(this, 'error', arguments);
	}
	
	function connectLogger(logger) {
	  logger.debug = debug;
	  logger.info = info;
	  logger.warn = warn;
	  logger.error = error;
	}
	
	function createLogger(id) {
	  var logger = new Logger(id, loggerConstructionKey);
	
	  if (appenders.length) {
	    connectLogger(logger);
	  }
	
	  return logger;
	}
	
	function getLogger(id) {
	  return loggers[id] || (loggers[id] = createLogger(id));
	}
	
	function addAppender(appender) {
	  appenders.push(appender);
	
	  if (appenders.length === 1) {
	    for (var key in loggers) {
	      connectLogger(loggers[key]);
	    }
	  }
	}
	
	function setLevel(level) {
	  currentLevel = level;
	}
	
	var Logger = exports.Logger = function () {
	  function Logger(id, key) {
	    _classCallCheck(this, Logger);
	
	    if (key !== loggerConstructionKey) {
	      throw new Error('Cannot instantiate "Logger". Use "getLogger" instead.');
	    }
	
	    this.id = id;
	  }
	
	  Logger.prototype.debug = function debug(message) {};
	
	  Logger.prototype.info = function info(message) {};
	
	  Logger.prototype.warn = function warn(message) {};
	
	  Logger.prototype.error = function error(message) {};
	
	  return Logger;
	}();

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*global define:false */
	/**
	 * Copyright 2016 Craig Campbell
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Mousetrap is a simple keyboard shortcut library for Javascript with
	 * no external dependencies
	 *
	 * @version 1.6.0
	 * @url craig.is/killing/mice
	 */
	(function(window, document, undefined) {
	
	    // Check if mousetrap is used inside browser, if not, return
	    if (!window) {
	        return;
	    }
	
	    /**
	     * mapping of special keycodes to their corresponding keys
	     *
	     * everything in this dictionary cannot use keypress events
	     * so it has to be here to map to the correct keycodes for
	     * keyup/keydown events
	     *
	     * @type {Object}
	     */
	    var _MAP = {
	        8: 'backspace',
	        9: 'tab',
	        13: 'enter',
	        16: 'shift',
	        17: 'ctrl',
	        18: 'alt',
	        20: 'capslock',
	        27: 'esc',
	        32: 'space',
	        33: 'pageup',
	        34: 'pagedown',
	        35: 'end',
	        36: 'home',
	        37: 'left',
	        38: 'up',
	        39: 'right',
	        40: 'down',
	        45: 'ins',
	        46: 'del',
	        91: 'meta',
	        93: 'meta',
	        224: 'meta'
	    };
	
	    /**
	     * mapping for special characters so they can support
	     *
	     * this dictionary is only used incase you want to bind a
	     * keyup or keydown event to one of these keys
	     *
	     * @type {Object}
	     */
	    var _KEYCODE_MAP = {
	        106: '*',
	        107: '+',
	        109: '-',
	        110: '.',
	        111 : '/',
	        186: ';',
	        187: '=',
	        188: ',',
	        189: '-',
	        190: '.',
	        191: '/',
	        192: '`',
	        219: '[',
	        220: '\\',
	        221: ']',
	        222: '\''
	    };
	
	    /**
	     * this is a mapping of keys that require shift on a US keypad
	     * back to the non shift equivelents
	     *
	     * this is so you can use keyup events with these keys
	     *
	     * note that this will only work reliably on US keyboards
	     *
	     * @type {Object}
	     */
	    var _SHIFT_MAP = {
	        '~': '`',
	        '!': '1',
	        '@': '2',
	        '#': '3',
	        '$': '4',
	        '%': '5',
	        '^': '6',
	        '&': '7',
	        '*': '8',
	        '(': '9',
	        ')': '0',
	        '_': '-',
	        '+': '=',
	        ':': ';',
	        '\"': '\'',
	        '<': ',',
	        '>': '.',
	        '?': '/',
	        '|': '\\'
	    };
	
	    /**
	     * this is a list of special strings you can use to map
	     * to modifier keys when you specify your keyboard shortcuts
	     *
	     * @type {Object}
	     */
	    var _SPECIAL_ALIASES = {
	        'option': 'alt',
	        'command': 'meta',
	        'return': 'enter',
	        'escape': 'esc',
	        'plus': '+',
	        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
	    };
	
	    /**
	     * variable to store the flipped version of _MAP from above
	     * needed to check if we should use keypress or not when no action
	     * is specified
	     *
	     * @type {Object|undefined}
	     */
	    var _REVERSE_MAP;
	
	    /**
	     * loop through the f keys, f1 to f19 and add them to the map
	     * programatically
	     */
	    for (var i = 1; i < 20; ++i) {
	        _MAP[111 + i] = 'f' + i;
	    }
	
	    /**
	     * loop through to map numbers on the numeric keypad
	     */
	    for (i = 0; i <= 9; ++i) {
	        _MAP[i + 96] = i;
	    }
	
	    /**
	     * cross browser add event method
	     *
	     * @param {Element|HTMLDocument} object
	     * @param {string} type
	     * @param {Function} callback
	     * @returns void
	     */
	    function _addEvent(object, type, callback) {
	        if (object.addEventListener) {
	            object.addEventListener(type, callback, false);
	            return;
	        }
	
	        object.attachEvent('on' + type, callback);
	    }
	
	    /**
	     * takes the event and returns the key character
	     *
	     * @param {Event} e
	     * @return {string}
	     */
	    function _characterFromEvent(e) {
	
	        // for keypress events we should return the character as is
	        if (e.type == 'keypress') {
	            var character = String.fromCharCode(e.which);
	
	            // if the shift key is not pressed then it is safe to assume
	            // that we want the character to be lowercase.  this means if
	            // you accidentally have caps lock on then your key bindings
	            // will continue to work
	            //
	            // the only side effect that might not be desired is if you
	            // bind something like 'A' cause you want to trigger an
	            // event when capital A is pressed caps lock will no longer
	            // trigger the event.  shift+a will though.
	            if (!e.shiftKey) {
	                character = character.toLowerCase();
	            }
	
	            return character;
	        }
	
	        // for non keypress events the special maps are needed
	        if (_MAP[e.which]) {
	            return _MAP[e.which];
	        }
	
	        if (_KEYCODE_MAP[e.which]) {
	            return _KEYCODE_MAP[e.which];
	        }
	
	        // if it is not in the special map
	
	        // with keydown and keyup events the character seems to always
	        // come in as an uppercase character whether you are pressing shift
	        // or not.  we should make sure it is always lowercase for comparisons
	        return String.fromCharCode(e.which).toLowerCase();
	    }
	
	    /**
	     * checks if two arrays are equal
	     *
	     * @param {Array} modifiers1
	     * @param {Array} modifiers2
	     * @returns {boolean}
	     */
	    function _modifiersMatch(modifiers1, modifiers2) {
	        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
	    }
	
	    /**
	     * takes a key event and figures out what the modifiers are
	     *
	     * @param {Event} e
	     * @returns {Array}
	     */
	    function _eventModifiers(e) {
	        var modifiers = [];
	
	        if (e.shiftKey) {
	            modifiers.push('shift');
	        }
	
	        if (e.altKey) {
	            modifiers.push('alt');
	        }
	
	        if (e.ctrlKey) {
	            modifiers.push('ctrl');
	        }
	
	        if (e.metaKey) {
	            modifiers.push('meta');
	        }
	
	        return modifiers;
	    }
	
	    /**
	     * prevents default for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _preventDefault(e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	            return;
	        }
	
	        e.returnValue = false;
	    }
	
	    /**
	     * stops propogation for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _stopPropagation(e) {
	        if (e.stopPropagation) {
	            e.stopPropagation();
	            return;
	        }
	
	        e.cancelBubble = true;
	    }
	
	    /**
	     * determines if the keycode specified is a modifier key or not
	     *
	     * @param {string} key
	     * @returns {boolean}
	     */
	    function _isModifier(key) {
	        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
	    }
	
	    /**
	     * reverses the map lookup so that we can look for specific keys
	     * to see what can and can't use keypress
	     *
	     * @return {Object}
	     */
	    function _getReverseMap() {
	        if (!_REVERSE_MAP) {
	            _REVERSE_MAP = {};
	            for (var key in _MAP) {
	
	                // pull out the numeric keypad from here cause keypress should
	                // be able to detect the keys from the character
	                if (key > 95 && key < 112) {
	                    continue;
	                }
	
	                if (_MAP.hasOwnProperty(key)) {
	                    _REVERSE_MAP[_MAP[key]] = key;
	                }
	            }
	        }
	        return _REVERSE_MAP;
	    }
	
	    /**
	     * picks the best action based on the key combination
	     *
	     * @param {string} key - character for key
	     * @param {Array} modifiers
	     * @param {string=} action passed in
	     */
	    function _pickBestAction(key, modifiers, action) {
	
	        // if no action was picked in we should try to pick the one
	        // that we think would work best for this key
	        if (!action) {
	            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
	        }
	
	        // modifier keys don't work as expected with keypress,
	        // switch to keydown
	        if (action == 'keypress' && modifiers.length) {
	            action = 'keydown';
	        }
	
	        return action;
	    }
	
	    /**
	     * Converts from a string key combination to an array
	     *
	     * @param  {string} combination like "command+shift+l"
	     * @return {Array}
	     */
	    function _keysFromString(combination) {
	        if (combination === '+') {
	            return ['+'];
	        }
	
	        combination = combination.replace(/\+{2}/g, '+plus');
	        return combination.split('+');
	    }
	
	    /**
	     * Gets info for a specific key combination
	     *
	     * @param  {string} combination key combination ("command+s" or "a" or "*")
	     * @param  {string=} action
	     * @returns {Object}
	     */
	    function _getKeyInfo(combination, action) {
	        var keys;
	        var key;
	        var i;
	        var modifiers = [];
	
	        // take the keys from this pattern and figure out what the actual
	        // pattern is all about
	        keys = _keysFromString(combination);
	
	        for (i = 0; i < keys.length; ++i) {
	            key = keys[i];
	
	            // normalize key names
	            if (_SPECIAL_ALIASES[key]) {
	                key = _SPECIAL_ALIASES[key];
	            }
	
	            // if this is not a keypress event then we should
	            // be smart about using shift keys
	            // this will only work for US keyboards however
	            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
	                key = _SHIFT_MAP[key];
	                modifiers.push('shift');
	            }
	
	            // if this key is a modifier then add it to the list of modifiers
	            if (_isModifier(key)) {
	                modifiers.push(key);
	            }
	        }
	
	        // depending on what the key combination is
	        // we will try to pick the best event for it
	        action = _pickBestAction(key, modifiers, action);
	
	        return {
	            key: key,
	            modifiers: modifiers,
	            action: action
	        };
	    }
	
	    function _belongsTo(element, ancestor) {
	        if (element === null || element === document) {
	            return false;
	        }
	
	        if (element === ancestor) {
	            return true;
	        }
	
	        return _belongsTo(element.parentNode, ancestor);
	    }
	
	    function Mousetrap(targetElement) {
	        var self = this;
	
	        targetElement = targetElement || document;
	
	        if (!(self instanceof Mousetrap)) {
	            return new Mousetrap(targetElement);
	        }
	
	        /**
	         * element to attach key events to
	         *
	         * @type {Element}
	         */
	        self.target = targetElement;
	
	        /**
	         * a list of all the callbacks setup via Mousetrap.bind()
	         *
	         * @type {Object}
	         */
	        self._callbacks = {};
	
	        /**
	         * direct map of string combinations to callbacks used for trigger()
	         *
	         * @type {Object}
	         */
	        self._directMap = {};
	
	        /**
	         * keeps track of what level each sequence is at since multiple
	         * sequences can start out with the same sequence
	         *
	         * @type {Object}
	         */
	        var _sequenceLevels = {};
	
	        /**
	         * variable to store the setTimeout call
	         *
	         * @type {null|number}
	         */
	        var _resetTimer;
	
	        /**
	         * temporary state where we will ignore the next keyup
	         *
	         * @type {boolean|string}
	         */
	        var _ignoreNextKeyup = false;
	
	        /**
	         * temporary state where we will ignore the next keypress
	         *
	         * @type {boolean}
	         */
	        var _ignoreNextKeypress = false;
	
	        /**
	         * are we currently inside of a sequence?
	         * type of action ("keyup" or "keydown" or "keypress") or false
	         *
	         * @type {boolean|string}
	         */
	        var _nextExpectedAction = false;
	
	        /**
	         * resets all sequence counters except for the ones passed in
	         *
	         * @param {Object} doNotReset
	         * @returns void
	         */
	        function _resetSequences(doNotReset) {
	            doNotReset = doNotReset || {};
	
	            var activeSequences = false,
	                key;
	
	            for (key in _sequenceLevels) {
	                if (doNotReset[key]) {
	                    activeSequences = true;
	                    continue;
	                }
	                _sequenceLevels[key] = 0;
	            }
	
	            if (!activeSequences) {
	                _nextExpectedAction = false;
	            }
	        }
	
	        /**
	         * finds all callbacks that match based on the keycode, modifiers,
	         * and action
	         *
	         * @param {string} character
	         * @param {Array} modifiers
	         * @param {Event|Object} e
	         * @param {string=} sequenceName - name of the sequence we are looking for
	         * @param {string=} combination
	         * @param {number=} level
	         * @returns {Array}
	         */
	        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
	            var i;
	            var callback;
	            var matches = [];
	            var action = e.type;
	
	            // if there are no events related to this keycode
	            if (!self._callbacks[character]) {
	                return [];
	            }
	
	            // if a modifier key is coming up on its own we should allow it
	            if (action == 'keyup' && _isModifier(character)) {
	                modifiers = [character];
	            }
	
	            // loop through all callbacks for the key that was pressed
	            // and see if any of them match
	            for (i = 0; i < self._callbacks[character].length; ++i) {
	                callback = self._callbacks[character][i];
	
	                // if a sequence name is not specified, but this is a sequence at
	                // the wrong level then move onto the next match
	                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
	                    continue;
	                }
	
	                // if the action we are looking for doesn't match the action we got
	                // then we should keep going
	                if (action != callback.action) {
	                    continue;
	                }
	
	                // if this is a keypress event and the meta key and control key
	                // are not pressed that means that we need to only look at the
	                // character, otherwise check the modifiers as well
	                //
	                // chrome will not fire a keypress if meta or control is down
	                // safari will fire a keypress if meta or meta+shift is down
	                // firefox will fire a keypress if meta or control is down
	                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {
	
	                    // when you bind a combination or sequence a second time it
	                    // should overwrite the first one.  if a sequenceName or
	                    // combination is specified in this call it does just that
	                    //
	                    // @todo make deleting its own method?
	                    var deleteCombo = !sequenceName && callback.combo == combination;
	                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
	                    if (deleteCombo || deleteSequence) {
	                        self._callbacks[character].splice(i, 1);
	                    }
	
	                    matches.push(callback);
	                }
	            }
	
	            return matches;
	        }
	
	        /**
	         * actually calls the callback function
	         *
	         * if your callback function returns false this will use the jquery
	         * convention - prevent default and stop propogation on the event
	         *
	         * @param {Function} callback
	         * @param {Event} e
	         * @returns void
	         */
	        function _fireCallback(callback, e, combo, sequence) {
	
	            // if this event should not happen stop here
	            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
	                return;
	            }
	
	            if (callback(e, combo) === false) {
	                _preventDefault(e);
	                _stopPropagation(e);
	            }
	        }
	
	        /**
	         * handles a character key event
	         *
	         * @param {string} character
	         * @param {Array} modifiers
	         * @param {Event} e
	         * @returns void
	         */
	        self._handleKey = function(character, modifiers, e) {
	            var callbacks = _getMatches(character, modifiers, e);
	            var i;
	            var doNotReset = {};
	            var maxLevel = 0;
	            var processedSequenceCallback = false;
	
	            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
	            for (i = 0; i < callbacks.length; ++i) {
	                if (callbacks[i].seq) {
	                    maxLevel = Math.max(maxLevel, callbacks[i].level);
	                }
	            }
	
	            // loop through matching callbacks for this key event
	            for (i = 0; i < callbacks.length; ++i) {
	
	                // fire for all sequence callbacks
	                // this is because if for example you have multiple sequences
	                // bound such as "g i" and "g t" they both need to fire the
	                // callback for matching g cause otherwise you can only ever
	                // match the first one
	                if (callbacks[i].seq) {
	
	                    // only fire callbacks for the maxLevel to prevent
	                    // subsequences from also firing
	                    //
	                    // for example 'a option b' should not cause 'option b' to fire
	                    // even though 'option b' is part of the other sequence
	                    //
	                    // any sequences that do not match here will be discarded
	                    // below by the _resetSequences call
	                    if (callbacks[i].level != maxLevel) {
	                        continue;
	                    }
	
	                    processedSequenceCallback = true;
	
	                    // keep a list of which sequences were matches for later
	                    doNotReset[callbacks[i].seq] = 1;
	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
	                    continue;
	                }
	
	                // if there were no sequence matches but we are still here
	                // that means this is a regular match so we should fire that
	                if (!processedSequenceCallback) {
	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
	                }
	            }
	
	            // if the key you pressed matches the type of sequence without
	            // being a modifier (ie "keyup" or "keypress") then we should
	            // reset all sequences that were not matched by this event
	            //
	            // this is so, for example, if you have the sequence "h a t" and you
	            // type "h e a r t" it does not match.  in this case the "e" will
	            // cause the sequence to reset
	            //
	            // modifier keys are ignored because you can have a sequence
	            // that contains modifiers such as "enter ctrl+space" and in most
	            // cases the modifier key will be pressed before the next key
	            //
	            // also if you have a sequence such as "ctrl+b a" then pressing the
	            // "b" key will trigger a "keypress" and a "keydown"
	            //
	            // the "keydown" is expected when there is a modifier, but the
	            // "keypress" ends up matching the _nextExpectedAction since it occurs
	            // after and that causes the sequence to reset
	            //
	            // we ignore keypresses in a sequence that directly follow a keydown
	            // for the same character
	            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
	            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
	                _resetSequences(doNotReset);
	            }
	
	            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
	        };
	
	        /**
	         * handles a keydown event
	         *
	         * @param {Event} e
	         * @returns void
	         */
	        function _handleKeyEvent(e) {
	
	            // normalize e.which for key events
	            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
	            if (typeof e.which !== 'number') {
	                e.which = e.keyCode;
	            }
	
	            var character = _characterFromEvent(e);
	
	            // no character found then stop
	            if (!character) {
	                return;
	            }
	
	            // need to use === for the character check because the character can be 0
	            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
	                _ignoreNextKeyup = false;
	                return;
	            }
	
	            self.handleKey(character, _eventModifiers(e), e);
	        }
	
	        /**
	         * called to set a 1 second timeout on the specified sequence
	         *
	         * this is so after each key press in the sequence you have 1 second
	         * to press the next key before you have to start over
	         *
	         * @returns void
	         */
	        function _resetSequenceTimer() {
	            clearTimeout(_resetTimer);
	            _resetTimer = setTimeout(_resetSequences, 1000);
	        }
	
	        /**
	         * binds a key sequence to an event
	         *
	         * @param {string} combo - combo specified in bind call
	         * @param {Array} keys
	         * @param {Function} callback
	         * @param {string=} action
	         * @returns void
	         */
	        function _bindSequence(combo, keys, callback, action) {
	
	            // start off by adding a sequence level record for this combination
	            // and setting the level to 0
	            _sequenceLevels[combo] = 0;
	
	            /**
	             * callback to increase the sequence level for this sequence and reset
	             * all other sequences that were active
	             *
	             * @param {string} nextAction
	             * @returns {Function}
	             */
	            function _increaseSequence(nextAction) {
	                return function() {
	                    _nextExpectedAction = nextAction;
	                    ++_sequenceLevels[combo];
	                    _resetSequenceTimer();
	                };
	            }
	
	            /**
	             * wraps the specified callback inside of another function in order
	             * to reset all sequence counters as soon as this sequence is done
	             *
	             * @param {Event} e
	             * @returns void
	             */
	            function _callbackAndReset(e) {
	                _fireCallback(callback, e, combo);
	
	                // we should ignore the next key up if the action is key down
	                // or keypress.  this is so if you finish a sequence and
	                // release the key the final key will not trigger a keyup
	                if (action !== 'keyup') {
	                    _ignoreNextKeyup = _characterFromEvent(e);
	                }
	
	                // weird race condition if a sequence ends with the key
	                // another sequence begins with
	                setTimeout(_resetSequences, 10);
	            }
	
	            // loop through keys one at a time and bind the appropriate callback
	            // function.  for any key leading up to the final one it should
	            // increase the sequence. after the final, it should reset all sequences
	            //
	            // if an action is specified in the original bind call then that will
	            // be used throughout.  otherwise we will pass the action that the
	            // next key in the sequence should match.  this allows a sequence
	            // to mix and match keypress and keydown events depending on which
	            // ones are better suited to the key provided
	            for (var i = 0; i < keys.length; ++i) {
	                var isFinal = i + 1 === keys.length;
	                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
	                _bindSingle(keys[i], wrappedCallback, action, combo, i);
	            }
	        }
	
	        /**
	         * binds a single keyboard combination
	         *
	         * @param {string} combination
	         * @param {Function} callback
	         * @param {string=} action
	         * @param {string=} sequenceName - name of sequence if part of sequence
	         * @param {number=} level - what part of the sequence the command is
	         * @returns void
	         */
	        function _bindSingle(combination, callback, action, sequenceName, level) {
	
	            // store a direct mapped reference for use with Mousetrap.trigger
	            self._directMap[combination + ':' + action] = callback;
	
	            // make sure multiple spaces in a row become a single space
	            combination = combination.replace(/\s+/g, ' ');
	
	            var sequence = combination.split(' ');
	            var info;
	
	            // if this pattern is a sequence of keys then run through this method
	            // to reprocess each pattern one key at a time
	            if (sequence.length > 1) {
	                _bindSequence(combination, sequence, callback, action);
	                return;
	            }
	
	            info = _getKeyInfo(combination, action);
	
	            // make sure to initialize array if this is the first time
	            // a callback is added for this key
	            self._callbacks[info.key] = self._callbacks[info.key] || [];
	
	            // remove an existing match if there is one
	            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);
	
	            // add this call back to the array
	            // if it is a sequence put it at the beginning
	            // if not put it at the end
	            //
	            // this is important because the way these are processed expects
	            // the sequence ones to come first
	            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
	                callback: callback,
	                modifiers: info.modifiers,
	                action: info.action,
	                seq: sequenceName,
	                level: level,
	                combo: combination
	            });
	        }
	
	        /**
	         * binds multiple combinations to the same callback
	         *
	         * @param {Array} combinations
	         * @param {Function} callback
	         * @param {string|undefined} action
	         * @returns void
	         */
	        self._bindMultiple = function(combinations, callback, action) {
	            for (var i = 0; i < combinations.length; ++i) {
	                _bindSingle(combinations[i], callback, action);
	            }
	        };
	
	        // start!
	        _addEvent(targetElement, 'keypress', _handleKeyEvent);
	        _addEvent(targetElement, 'keydown', _handleKeyEvent);
	        _addEvent(targetElement, 'keyup', _handleKeyEvent);
	    }
	
	    /**
	     * binds an event to mousetrap
	     *
	     * can be a single key, a combination of keys separated with +,
	     * an array of keys, or a sequence of keys separated by spaces
	     *
	     * be sure to list the modifier keys first to make sure that the
	     * correct key ends up getting bound (the last key in the pattern)
	     *
	     * @param {string|Array} keys
	     * @param {Function} callback
	     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
	     * @returns void
	     */
	    Mousetrap.prototype.bind = function(keys, callback, action) {
	        var self = this;
	        keys = keys instanceof Array ? keys : [keys];
	        self._bindMultiple.call(self, keys, callback, action);
	        return self;
	    };
	
	    /**
	     * unbinds an event to mousetrap
	     *
	     * the unbinding sets the callback function of the specified key combo
	     * to an empty function and deletes the corresponding key in the
	     * _directMap dict.
	     *
	     * TODO: actually remove this from the _callbacks dictionary instead
	     * of binding an empty function
	     *
	     * the keycombo+action has to be exactly the same as
	     * it was defined in the bind method
	     *
	     * @param {string|Array} keys
	     * @param {string} action
	     * @returns void
	     */
	    Mousetrap.prototype.unbind = function(keys, action) {
	        var self = this;
	        return self.bind.call(self, keys, function() {}, action);
	    };
	
	    /**
	     * triggers an event that has already been bound
	     *
	     * @param {string} keys
	     * @param {string=} action
	     * @returns void
	     */
	    Mousetrap.prototype.trigger = function(keys, action) {
	        var self = this;
	        if (self._directMap[keys + ':' + action]) {
	            self._directMap[keys + ':' + action]({}, keys);
	        }
	        return self;
	    };
	
	    /**
	     * resets the library back to its initial state.  this is useful
	     * if you want to clear out the current keyboard shortcuts and bind
	     * new ones - for example if you switch to another page
	     *
	     * @returns void
	     */
	    Mousetrap.prototype.reset = function() {
	        var self = this;
	        self._callbacks = {};
	        self._directMap = {};
	        return self;
	    };
	
	    /**
	     * should we stop this event before firing off callbacks
	     *
	     * @param {Event} e
	     * @param {Element} element
	     * @return {boolean}
	     */
	    Mousetrap.prototype.stopCallback = function(e, element) {
	        var self = this;
	
	        // if the element has the class "mousetrap" then no need to stop
	        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
	            return false;
	        }
	
	        if (_belongsTo(element, self.target)) {
	            return false;
	        }
	
	        // stop for input, select, and textarea
	        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
	    };
	
	    /**
	     * exposes _handleKey publicly so it can be overwritten by extensions
	     */
	    Mousetrap.prototype.handleKey = function() {
	        var self = this;
	        return self._handleKey.apply(self, arguments);
	    };
	
	    /**
	     * allow custom key mappings
	     */
	    Mousetrap.addKeycodes = function(object) {
	        for (var key in object) {
	            if (object.hasOwnProperty(key)) {
	                _MAP[key] = object[key];
	            }
	        }
	        _REVERSE_MAP = null;
	    };
	
	    /**
	     * Init the global mousetrap functions
	     *
	     * This method is needed to allow the global mousetrap functions to work
	     * now that mousetrap is a constructor function.
	     */
	    Mousetrap.init = function() {
	        var documentMousetrap = Mousetrap(document);
	        for (var method in documentMousetrap) {
	            if (method.charAt(0) !== '_') {
	                Mousetrap[method] = (function(method) {
	                    return function() {
	                        return documentMousetrap[method].apply(documentMousetrap, arguments);
	                    };
	                } (method));
	            }
	        }
	    };
	
	    Mousetrap.init();
	
	    // expose mousetrap to the global object
	    window.Mousetrap = Mousetrap;
	
	    // expose as a common js module
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = Mousetrap;
	    }
	
	    // expose mousetrap as an AMD module
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return Mousetrap;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);


/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BaseViewVM = exports.BaseViewVM = function () {
	  function BaseViewVM(sails, router, eventAggregator, config) {
	    _classCallCheck(this, BaseViewVM);
	
	    this.entity = {};
	
	    this.sails = sails;
	    this.router = router;
	    this.baseCtrlUrl = config.baseCtrlUrl;
	    this.ea = eventAggregator;
	  }
	
	  BaseViewVM.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.put('' + this.baseCtrlUrl + this.entity.id, this.entity).then(function (data) {
	      return _this.router.navigate('');
	    });
	  };
	
	  BaseViewVM.prototype.deleteEntity = function deleteEntity() {
	    var _this2 = this;
	
	    if (confirm('Are you sure you want to remove?')) {
	      this.sails.delete('' + this.baseCtrlUrl + this.entity.id).then(function (data) {
	        return _this2.router.navigate('');
	      });
	    }
	  };
	
	  BaseViewVM.prototype.attached = function attached() {
	    this.ea.publish('InEditMode', true);
	  };
	
	  BaseViewVM.prototype.detached = function detached() {
	    this.ea.publish('InEditMode', false);
	  };
	
	  BaseViewVM.prototype.activate = function activate(params) {
	    var _this3 = this;
	
	    return this.sails.get('' + this.baseCtrlUrl + this.getIdParam(params)).then(function (res) {
	      _this3.entity = res.body;
	    }).catch(function (res) {
	      console.log(res);
	      _this3.router.navigate('');
	    });
	  };
	
	  BaseViewVM.prototype.getIdParam = function getIdParam(params) {
	    return params.id;
	  };
	
	  return BaseViewVM;
	}();

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	exports.__esModule = true;
	exports.App = undefined;
	
	var _dec, _class;
	
	__webpack_require__(15);
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var App = exports.App = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator, _aureliaSailsSocketClient.SailsSocketClient), _dec(_class = function () {
	  App.prototype.configureRouter = function configureRouter(config, router) {
	    config.title = 'iQ';
	    config.map([{ route: ['', 'welcome'], name: 'welcome', moduleId: 'home/welcome', nav: true, title: 'Welcome', settings: { icon: 'home' } }, { route: 'test', name: 'test', moduleId: 'test/welcome', nav: true, title: 'Components Playground', settings: { icon: 'code' } }, { route: 'QuestionCategories', name: 'questionCategory', moduleId: 'questionCategory/child-router', nav: true, title: 'Question Categories', settings: { icon: 'tag' } }, { route: 'QuestionTypes', name: 'questionType', moduleId: 'questionType/child-router', nav: true, title: 'Question Types', settings: { icon: 'diamond' } }, { route: 'QuestionKinds', name: 'questionKind', moduleId: 'questionKind/child-router', nav: true, title: 'Question Kinds', settings: { icon: 'asterisk' } }, { route: 'Questions', name: 'question', moduleId: 'question/child-router', nav: true, title: 'Questions', settings: { icon: 'list' } }, { route: 'Users', name: 'user', moduleId: 'users/child-router', nav: true, title: 'Users', settings: { icon: 'users' } }, { route: 'login', name: 'login', moduleId: 'auth/index', nav: false, title: 'Login' }]);
	
	    this.router = router;
	    Mousetrap.bind('w', function () {
	      window.location = "#";
	    });
	    Mousetrap.bind('q t', function () {
	      window.location = "#QuestionTypes";
	    });
	    Mousetrap.bind('q n', function () {
	      window.location = "#Questions";
	    });
	    Mousetrap.bind('q c', function () {
	      window.location = "#QuestionCategories";
	    });
	    Mousetrap.bind('q k', function () {
	      window.location = "#QuestionKinds";
	    });
	  };
	
	  function App(eventAggregator, sails) {
	    _classCallCheck(this, App);
	
	    this.ea = eventAggregator;
	    this.sails = sails;
	  }
	
	  App.prototype.logout = function logout() {
	    var _this = this;
	
	    this.sails.get('/logout').then(function () {
	      _this.user = null;
	      _this.router.navigate('/login');
	    }).catch(function (res) {
	      console.log(res);
	    });
	  };
	
	  App.prototype.attached = function attached() {
	    var _this2 = this;
	
	    $("a.sidebar-toggle").on('click', function () {
	      $('.ui.sidebar').sidebar('toggle');
	    });
	
	    this.sails.get('/questions/currentUser').then(function (res) {
	      _this2.user = res.body.user;
	    }).catch(function (res) {
	      if (res.statusCode === 403) {
	        _this2.router.navigate("/login");
	      } else {
	        console.log(res);
	      }
	    });
	
	    this.subscriber = this.ea.subscribe('uerAuthenticated', function (response) {
	      _this2.user = response;
	    });
	  };
	
	  App.prototype.detached = function detached() {
	    this.subscriber.dispose();
	  };
	
	  return App;
	}()) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LogManager = exports.FrameworkConfiguration = exports.Aurelia = undefined;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	Object.keys(_aureliaDependencyInjection).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaDependencyInjection[key];
	    }
	  });
	});
	
	var _aureliaBinding = __webpack_require__(20);
	
	Object.keys(_aureliaBinding).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaBinding[key];
	    }
	  });
	});
	
	var _aureliaMetadata = __webpack_require__(7);
	
	Object.keys(_aureliaMetadata).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaMetadata[key];
	    }
	  });
	});
	
	var _aureliaTemplating = __webpack_require__(24);
	
	Object.keys(_aureliaTemplating).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaTemplating[key];
	    }
	  });
	});
	
	var _aureliaLoader = __webpack_require__(8);
	
	Object.keys(_aureliaLoader).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaLoader[key];
	    }
	  });
	});
	
	var _aureliaTaskQueue = __webpack_require__(21);
	
	Object.keys(_aureliaTaskQueue).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaTaskQueue[key];
	    }
	  });
	});
	
	var _aureliaPath = __webpack_require__(9);
	
	Object.keys(_aureliaPath).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaPath[key];
	    }
	  });
	});
	
	var _aureliaPal = __webpack_require__(4);
	
	Object.keys(_aureliaPal).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _aureliaPal[key];
	    }
	  });
	});
	
	var _aureliaLogging = __webpack_require__(14);
	
	var TheLogManager = _interopRequireWildcard(_aureliaLogging);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function preventActionlessFormSubmit() {
	  _aureliaPal.DOM.addEventListener('submit', function (evt) {
	    var target = evt.target;
	    var action = target.action;
	
	    if (target.tagName.toLowerCase() === 'form' && !action) {
	      evt.preventDefault();
	    }
	  });
	}
	
	var Aurelia = exports.Aurelia = function () {
	  function Aurelia(loader, container, resources) {
	    _classCallCheck(this, Aurelia);
	
	    this.loader = loader || new _aureliaPal.PLATFORM.Loader();
	    this.container = container || new _aureliaDependencyInjection.Container().makeGlobal();
	    this.resources = resources || new _aureliaTemplating.ViewResources();
	    this.use = new FrameworkConfiguration(this);
	    this.logger = TheLogManager.getLogger('aurelia');
	    this.hostConfigured = false;
	    this.host = null;
	
	    this.use.instance(Aurelia, this);
	    this.use.instance(_aureliaLoader.Loader, this.loader);
	    this.use.instance(_aureliaTemplating.ViewResources, this.resources);
	  }
	
	  Aurelia.prototype.start = function start() {
	    var _this = this;
	
	    if (this.started) {
	      return Promise.resolve(this);
	    }
	
	    this.started = true;
	    this.logger.info('Aurelia Starting');
	
	    return this.use.apply().then(function () {
	      preventActionlessFormSubmit();
	
	      if (!_this.container.hasResolver(_aureliaTemplating.BindingLanguage)) {
	        var message = 'You must configure Aurelia with a BindingLanguage implementation.';
	        _this.logger.error(message);
	        throw new Error(message);
	      }
	
	      _this.logger.info('Aurelia Started');
	      var evt = _aureliaPal.DOM.createCustomEvent('aurelia-started', { bubbles: true, cancelable: true });
	      _aureliaPal.DOM.dispatchEvent(evt);
	      return _this;
	    });
	  };
	
	  Aurelia.prototype.enhance = function enhance() {
	    var _this2 = this;
	
	    var bindingContext = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var applicationHost = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	
	    this._configureHost(applicationHost || _aureliaPal.DOM.querySelectorAll('body')[0]);
	
	    return new Promise(function (resolve) {
	      var engine = _this2.container.get(_aureliaTemplating.TemplatingEngine);
	      _this2.root = engine.enhance({ container: _this2.container, element: _this2.host, resources: _this2.resources, bindingContext: bindingContext });
	      _this2.root.attached();
	      _this2._onAureliaComposed();
	      return _this2;
	    });
	  };
	
	  Aurelia.prototype.setRoot = function setRoot() {
	    var _this3 = this;
	
	    var root = arguments.length <= 0 || arguments[0] === undefined ? 'app' : arguments[0];
	    var applicationHost = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	
	    var instruction = {};
	
	    if (this.root && this.root.viewModel && this.root.viewModel.router) {
	      this.root.viewModel.router.deactivate();
	      this.root.viewModel.router.reset();
	    }
	
	    this._configureHost(applicationHost);
	
	    var engine = this.container.get(_aureliaTemplating.TemplatingEngine);
	    var transaction = this.container.get(_aureliaTemplating.CompositionTransaction);
	    delete transaction.initialComposition;
	
	    instruction.viewModel = root;
	    instruction.container = instruction.childContainer = this.container;
	    instruction.viewSlot = this.hostSlot;
	    instruction.host = this.host;
	
	    return engine.compose(instruction).then(function (r) {
	      _this3.root = r;
	      instruction.viewSlot.attached();
	      _this3._onAureliaComposed();
	      return _this3;
	    });
	  };
	
	  Aurelia.prototype._configureHost = function _configureHost(applicationHost) {
	    if (this.hostConfigured) {
	      return;
	    }
	    applicationHost = applicationHost || this.host;
	
	    if (!applicationHost || typeof applicationHost === 'string') {
	      this.host = _aureliaPal.DOM.getElementById(applicationHost || 'applicationHost');
	    } else {
	      this.host = applicationHost;
	    }
	
	    if (!this.host) {
	      throw new Error('No applicationHost was specified.');
	    }
	
	    this.hostConfigured = true;
	    this.host.aurelia = this;
	    this.hostSlot = new _aureliaTemplating.ViewSlot(this.host, true);
	    this.hostSlot.transformChildNodesIntoView();
	    this.container.registerInstance(_aureliaPal.DOM.boundary, this.host);
	  };
	
	  Aurelia.prototype._onAureliaComposed = function _onAureliaComposed() {
	    var evt = _aureliaPal.DOM.createCustomEvent('aurelia-composed', { bubbles: true, cancelable: true });
	    setTimeout(function () {
	      return _aureliaPal.DOM.dispatchEvent(evt);
	    }, 1);
	  };
	
	  return Aurelia;
	}();
	
	var logger = TheLogManager.getLogger('aurelia');
	var extPattern = /\.[^/.]+$/;
	
	function runTasks(config, tasks) {
	  var current = void 0;
	  var next = function next() {
	    if (current = tasks.shift()) {
	      return Promise.resolve(current(config)).then(next);
	    }
	
	    return Promise.resolve();
	  };
	
	  return next();
	}
	
	function loadPlugin(config, loader, info) {
	  logger.debug('Loading plugin ' + info.moduleId + '.');
	  config.resourcesRelativeTo = info.resourcesRelativeTo;
	
	  var id = info.moduleId;
	
	  if (info.resourcesRelativeTo.length > 1) {
	    return loader.normalize(info.moduleId, info.resourcesRelativeTo[1]).then(function (normalizedId) {
	      return _loadPlugin(normalizedId);
	    });
	  }
	
	  return _loadPlugin(id);
	
	  function _loadPlugin(moduleId) {
	    return loader.loadModule(moduleId).then(function (m) {
	      if ('configure' in m) {
	        return Promise.resolve(m.configure(config, info.config || {})).then(function () {
	          config.resourcesRelativeTo = null;
	          logger.debug('Configured plugin ' + info.moduleId + '.');
	        });
	      }
	
	      config.resourcesRelativeTo = null;
	      logger.debug('Loaded plugin ' + info.moduleId + '.');
	    });
	  }
	}
	
	function loadResources(aurelia, resourcesToLoad, appResources) {
	  var viewEngine = aurelia.container.get(_aureliaTemplating.ViewEngine);
	
	  return Promise.all(Object.keys(resourcesToLoad).map(function (n) {
	    return _normalize(resourcesToLoad[n]);
	  })).then(function (loads) {
	    var names = [];
	    var importIds = [];
	
	    loads.forEach(function (l) {
	      names.push(undefined);
	      importIds.push(l.importId);
	    });
	
	    return viewEngine.importViewResources(importIds, names, appResources);
	  });
	
	  function _normalize(load) {
	    var moduleId = load.moduleId;
	    var ext = getExt(moduleId);
	
	    if (isOtherResource(moduleId)) {
	      moduleId = removeExt(moduleId);
	    }
	
	    return aurelia.loader.normalize(moduleId, load.relativeTo).then(function (normalized) {
	      return {
	        name: load.moduleId,
	        importId: isOtherResource(load.moduleId) ? addOriginalExt(normalized, ext) : normalized
	      };
	    });
	  }
	
	  function isOtherResource(name) {
	    var ext = getExt(name);
	    if (!ext) return false;
	    if (ext === '') return false;
	    if (ext === '.js' || ext === '.ts') return false;
	    return true;
	  }
	
	  function removeExt(name) {
	    return name.replace(extPattern, '');
	  }
	
	  function addOriginalExt(normalized, ext) {
	    return removeExt(normalized) + '.' + ext;
	  }
	}
	
	function getExt(name) {
	  var match = name.match(extPattern);
	  if (match && match.length > 0) {
	    return match[0].split('.')[1];
	  }
	}
	
	function assertProcessed(plugins) {
	  if (plugins.processed) {
	    throw new Error('This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.');
	  }
	}
	
	var FrameworkConfiguration = function () {
	  function FrameworkConfiguration(aurelia) {
	    var _this4 = this;
	
	    _classCallCheck(this, FrameworkConfiguration);
	
	    this.aurelia = aurelia;
	    this.container = aurelia.container;
	    this.info = [];
	    this.processed = false;
	    this.preTasks = [];
	    this.postTasks = [];
	    this.resourcesToLoad = {};
	    this.preTask(function () {
	      return aurelia.loader.normalize('aurelia-bootstrapper').then(function (name) {
	        return _this4.bootstrapperName = name;
	      });
	    });
	    this.postTask(function () {
	      return loadResources(aurelia, _this4.resourcesToLoad, aurelia.resources);
	    });
	  }
	
	  FrameworkConfiguration.prototype.instance = function instance(type, _instance) {
	    this.container.registerInstance(type, _instance);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.singleton = function singleton(type, implementation) {
	    this.container.registerSingleton(type, implementation);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.transient = function transient(type, implementation) {
	    this.container.registerTransient(type, implementation);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.preTask = function preTask(task) {
	    assertProcessed(this);
	    this.preTasks.push(task);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.postTask = function postTask(task) {
	    assertProcessed(this);
	    this.postTasks.push(task);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.feature = function feature(plugin, config) {
	    if (getExt(plugin)) {
	      return this.plugin({ moduleId: plugin, resourcesRelativeTo: [plugin, ''], config: config || {} });
	    }
	
	    return this.plugin({ moduleId: plugin + '/index', resourcesRelativeTo: [plugin, ''], config: config || {} });
	  };
	
	  FrameworkConfiguration.prototype.globalResources = function globalResources(resources) {
	    assertProcessed(this);
	
	    var toAdd = Array.isArray(resources) ? resources : arguments;
	    var resource = void 0;
	    var path = void 0;
	    var resourcesRelativeTo = this.resourcesRelativeTo || ['', ''];
	
	    for (var i = 0, ii = toAdd.length; i < ii; ++i) {
	      resource = toAdd[i];
	      if (typeof resource !== 'string') {
	        throw new Error('Invalid resource path [' + resource + ']. Resources must be specified as relative module IDs.');
	      }
	
	      var parent = resourcesRelativeTo[0];
	      var grandParent = resourcesRelativeTo[1];
	      var name = resource;
	
	      if (resource.startsWith('./') && parent !== '') {
	        name = parent + resource.substr(1);
	      }
	
	      this.resourcesToLoad[name] = { moduleId: name, relativeTo: grandParent };
	    }
	
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.globalName = function globalName(resourcePath, newName) {
	    assertProcessed(this);
	    this.resourcesToLoad[resourcePath] = { moduleId: newName, relativeTo: '' };
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.plugin = function plugin(_plugin, config) {
	    assertProcessed(this);
	
	    if (typeof _plugin === 'string') {
	      return this.plugin({ moduleId: _plugin, resourcesRelativeTo: [_plugin, ''], config: config || {} });
	    }
	
	    this.info.push(_plugin);
	    return this;
	  };
	
	  FrameworkConfiguration.prototype._addNormalizedPlugin = function _addNormalizedPlugin(name, config) {
	    var _this5 = this;
	
	    var plugin = { moduleId: name, resourcesRelativeTo: [name, ''], config: config || {} };
	    this.plugin(plugin);
	
	    this.preTask(function () {
	      var relativeTo = [name, _this5.bootstrapperName];
	      plugin.moduleId = name;
	      plugin.resourcesRelativeTo = relativeTo;
	      return Promise.resolve();
	    });
	
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.defaultBindingLanguage = function defaultBindingLanguage() {
	    return this._addNormalizedPlugin('aurelia-templating-binding');
	  };
	
	  FrameworkConfiguration.prototype.router = function router() {
	    return this._addNormalizedPlugin('aurelia-templating-router');
	  };
	
	  FrameworkConfiguration.prototype.history = function history() {
	    return this._addNormalizedPlugin('aurelia-history-browser');
	  };
	
	  FrameworkConfiguration.prototype.defaultResources = function defaultResources() {
	    return this._addNormalizedPlugin('aurelia-templating-resources');
	  };
	
	  FrameworkConfiguration.prototype.eventAggregator = function eventAggregator() {
	    return this._addNormalizedPlugin('aurelia-event-aggregator');
	  };
	
	  FrameworkConfiguration.prototype.standardConfiguration = function standardConfiguration() {
	    return this.defaultBindingLanguage().defaultResources().history().router().eventAggregator();
	  };
	
	  FrameworkConfiguration.prototype.developmentLogging = function developmentLogging() {
	    var _this6 = this;
	
	    this.preTask(function () {
	      return _this6.aurelia.loader.normalize('aurelia-logging-console', _this6.bootstrapperName).then(function (name) {
	        return _this6.aurelia.loader.loadModule(name).then(function (m) {
	          TheLogManager.addAppender(new m.ConsoleAppender());
	          TheLogManager.setLevel(TheLogManager.logLevel.debug);
	        });
	      });
	    });
	
	    return this;
	  };
	
	  FrameworkConfiguration.prototype.apply = function apply() {
	    var _this7 = this;
	
	    if (this.processed) {
	      return Promise.resolve();
	    }
	
	    return runTasks(this, this.preTasks).then(function () {
	      var loader = _this7.aurelia.loader;
	      var info = _this7.info;
	      var current = void 0;
	
	      var next = function next() {
	        if (current = info.shift()) {
	          return loadPlugin(_this7, loader, current).then(next);
	        }
	
	        _this7.processed = true;
	        return Promise.resolve();
	      };
	
	      return next().then(function () {
	        return runTasks(_this7, _this7.postTasks);
	      });
	    });
	  };
	
	  return FrameworkConfiguration;
	}();
	
	exports.FrameworkConfiguration = FrameworkConfiguration;
	var LogManager = exports.LogManager = TheLogManager;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Container = exports.InvocationHandler = exports._emptyParameters = exports.SingletonRegistration = exports.TransientRegistration = exports.FactoryInvoker = exports.Factory = exports.StrategyResolver = exports.Parent = exports.Optional = exports.All = exports.Lazy = exports.resolver = undefined;
	
	var _dec, _class, _dec2, _class2, _dec3, _class3, _dec4, _class4, _dec5, _class5, _dec6, _class6, _classInvokers;
	
	exports.invoker = invoker;
	exports.factory = factory;
	exports.registration = registration;
	exports.transient = transient;
	exports.singleton = singleton;
	exports.autoinject = autoinject;
	exports.inject = inject;
	
	var _aureliaMetadata = __webpack_require__(7);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var resolver = exports.resolver = _aureliaMetadata.protocol.create('aurelia:resolver', function (target) {
	  if (!(typeof target.get === 'function')) {
	    return 'Resolvers must implement: get(container: Container, key: any): any';
	  }
	
	  return true;
	});
	
	var Lazy = exports.Lazy = (_dec = resolver(), _dec(_class = function () {
	  function Lazy(key) {
	    _classCallCheck(this, Lazy);
	
	    this._key = key;
	  }
	
	  Lazy.prototype.get = function get(container) {
	    var _this = this;
	
	    return function () {
	      return container.get(_this._key);
	    };
	  };
	
	  Lazy.of = function of(key) {
	    return new Lazy(key);
	  };
	
	  return Lazy;
	}()) || _class);
	var All = exports.All = (_dec2 = resolver(), _dec2(_class2 = function () {
	  function All(key) {
	    _classCallCheck(this, All);
	
	    this._key = key;
	  }
	
	  All.prototype.get = function get(container) {
	    return container.getAll(this._key);
	  };
	
	  All.of = function of(key) {
	    return new All(key);
	  };
	
	  return All;
	}()) || _class2);
	var Optional = exports.Optional = (_dec3 = resolver(), _dec3(_class3 = function () {
	  function Optional(key) {
	    var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    _classCallCheck(this, Optional);
	
	    this._key = key;
	    this._checkParent = checkParent;
	  }
	
	  Optional.prototype.get = function get(container) {
	    if (container.hasResolver(this._key, this._checkParent)) {
	      return container.get(this._key);
	    }
	
	    return null;
	  };
	
	  Optional.of = function of(key) {
	    var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    return new Optional(key, checkParent);
	  };
	
	  return Optional;
	}()) || _class3);
	var Parent = exports.Parent = (_dec4 = resolver(), _dec4(_class4 = function () {
	  function Parent(key) {
	    _classCallCheck(this, Parent);
	
	    this._key = key;
	  }
	
	  Parent.prototype.get = function get(container) {
	    return container.parent ? container.parent.get(this._key) : null;
	  };
	
	  Parent.of = function of(key) {
	    return new Parent(key);
	  };
	
	  return Parent;
	}()) || _class4);
	var StrategyResolver = exports.StrategyResolver = (_dec5 = resolver(), _dec5(_class5 = function () {
	  function StrategyResolver(strategy, state) {
	    _classCallCheck(this, StrategyResolver);
	
	    this.strategy = strategy;
	    this.state = state;
	  }
	
	  StrategyResolver.prototype.get = function get(container, key) {
	    switch (this.strategy) {
	      case 0:
	        return this.state;
	      case 1:
	        var singleton = container.invoke(this.state);
	        this.state = singleton;
	        this.strategy = 0;
	        return singleton;
	      case 2:
	        return container.invoke(this.state);
	      case 3:
	        return this.state(container, key, this);
	      case 4:
	        return this.state[0].get(container, key);
	      case 5:
	        return container.get(this.state);
	      default:
	        throw new Error('Invalid strategy: ' + this.strategy);
	    }
	  };
	
	  return StrategyResolver;
	}()) || _class5);
	var Factory = exports.Factory = (_dec6 = resolver(), _dec6(_class6 = function () {
	  function Factory(key) {
	    _classCallCheck(this, Factory);
	
	    this._key = key;
	  }
	
	  Factory.prototype.get = function get(container) {
	    var _this2 = this;
	
	    return function () {
	      for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
	        rest[_key] = arguments[_key];
	      }
	
	      return container.invoke(_this2._key, rest);
	    };
	  };
	
	  Factory.of = function of(key) {
	    return new Factory(key);
	  };
	
	  return Factory;
	}()) || _class6);
	function invoker(value) {
	  return function (target) {
	    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.invoker, value, target);
	  };
	}
	
	function factory(potentialTarget) {
	  var deco = function deco(target) {
	    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.invoker, FactoryInvoker.instance, target);
	  };
	
	  return potentialTarget ? deco(potentialTarget) : deco;
	}
	
	var FactoryInvoker = exports.FactoryInvoker = function () {
	  function FactoryInvoker() {
	    _classCallCheck(this, FactoryInvoker);
	  }
	
	  FactoryInvoker.prototype.invoke = function invoke(container, fn, dependencies) {
	    var i = dependencies.length;
	    var args = new Array(i);
	
	    while (i--) {
	      args[i] = container.get(dependencies[i]);
	    }
	
	    return fn.apply(undefined, args);
	  };
	
	  FactoryInvoker.prototype.invokeWithDynamicDependencies = function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
	    var i = staticDependencies.length;
	    var args = new Array(i);
	
	    while (i--) {
	      args[i] = container.get(staticDependencies[i]);
	    }
	
	    if (dynamicDependencies !== undefined) {
	      args = args.concat(dynamicDependencies);
	    }
	
	    return fn.apply(undefined, args);
	  };
	
	  return FactoryInvoker;
	}();
	
	FactoryInvoker.instance = new FactoryInvoker();
	
	function registration(value) {
	  return function (target) {
	    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.registration, value, target);
	  };
	}
	
	function transient(key) {
	  return registration(new TransientRegistration(key));
	}
	
	function singleton(keyOrRegisterInChild) {
	  var registerInChild = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	  return registration(new SingletonRegistration(keyOrRegisterInChild, registerInChild));
	}
	
	var TransientRegistration = exports.TransientRegistration = function () {
	  function TransientRegistration(key) {
	    _classCallCheck(this, TransientRegistration);
	
	    this._key = key;
	  }
	
	  TransientRegistration.prototype.registerResolver = function registerResolver(container, key, fn) {
	    var resolver = new StrategyResolver(2, fn);
	    container.registerResolver(this._key || key, resolver);
	    return resolver;
	  };
	
	  return TransientRegistration;
	}();
	
	var SingletonRegistration = exports.SingletonRegistration = function () {
	  function SingletonRegistration(keyOrRegisterInChild) {
	    var registerInChild = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    _classCallCheck(this, SingletonRegistration);
	
	    if (typeof keyOrRegisterInChild === 'boolean') {
	      this._registerInChild = keyOrRegisterInChild;
	    } else {
	      this._key = keyOrRegisterInChild;
	      this._registerInChild = registerInChild;
	    }
	  }
	
	  SingletonRegistration.prototype.registerResolver = function registerResolver(container, key, fn) {
	    var resolver = new StrategyResolver(1, fn);
	
	    if (this._registerInChild) {
	      container.registerResolver(this._key || key, resolver);
	    } else {
	      container.root.registerResolver(this._key || key, resolver);
	    }
	
	    return resolver;
	  };
	
	  return SingletonRegistration;
	}();
	
	var badKeyError = 'key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?';
	var _emptyParameters = exports._emptyParameters = Object.freeze([]);
	
	_aureliaMetadata.metadata.registration = 'aurelia:registration';
	_aureliaMetadata.metadata.invoker = 'aurelia:invoker';
	
	var resolverDecorates = resolver.decorates;
	
	var InvocationHandler = exports.InvocationHandler = function () {
	  function InvocationHandler(fn, invoker, dependencies) {
	    _classCallCheck(this, InvocationHandler);
	
	    this.fn = fn;
	    this.invoker = invoker;
	    this.dependencies = dependencies;
	  }
	
	  InvocationHandler.prototype.invoke = function invoke(container, dynamicDependencies) {
	    return dynamicDependencies !== undefined ? this.invoker.invokeWithDynamicDependencies(container, this.fn, this.dependencies, dynamicDependencies) : this.invoker.invoke(container, this.fn, this.dependencies);
	  };
	
	  return InvocationHandler;
	}();
	
	function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
	  var i = staticDependencies.length;
	  var args = new Array(i);
	
	  while (i--) {
	    args[i] = container.get(staticDependencies[i]);
	  }
	
	  if (dynamicDependencies !== undefined) {
	    args = args.concat(dynamicDependencies);
	  }
	
	  return Reflect.construct(fn, args);
	}
	
	var classInvokers = (_classInvokers = {}, _classInvokers[0] = {
	  invoke: function invoke(container, Type) {
	    return new Type();
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers[1] = {
	  invoke: function invoke(container, Type, deps) {
	    return new Type(container.get(deps[0]));
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers[2] = {
	  invoke: function invoke(container, Type, deps) {
	    return new Type(container.get(deps[0]), container.get(deps[1]));
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers[3] = {
	  invoke: function invoke(container, Type, deps) {
	    return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]));
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers[4] = {
	  invoke: function invoke(container, Type, deps) {
	    return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]));
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers[5] = {
	  invoke: function invoke(container, Type, deps) {
	    return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]), container.get(deps[4]));
	  },
	
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers.fallback = {
	  invoke: invokeWithDynamicDependencies,
	  invokeWithDynamicDependencies: invokeWithDynamicDependencies
	}, _classInvokers);
	
	function getDependencies(f) {
	  if (!f.hasOwnProperty('inject')) {
	    return [];
	  }
	
	  if (typeof f.inject === 'function') {
	    return f.inject();
	  }
	
	  return f.inject;
	}
	
	var Container = exports.Container = function () {
	  function Container(configuration) {
	    _classCallCheck(this, Container);
	
	    if (configuration === undefined) {
	      configuration = {};
	    }
	
	    this._configuration = configuration;
	    this._onHandlerCreated = configuration.onHandlerCreated;
	    this._handlers = configuration.handlers || (configuration.handlers = new Map());
	    this._resolvers = new Map();
	    this.root = this;
	    this.parent = null;
	  }
	
	  Container.prototype.makeGlobal = function makeGlobal() {
	    Container.instance = this;
	    return this;
	  };
	
	  Container.prototype.setHandlerCreatedCallback = function setHandlerCreatedCallback(onHandlerCreated) {
	    this._onHandlerCreated = onHandlerCreated;
	    this._configuration.onHandlerCreated = onHandlerCreated;
	  };
	
	  Container.prototype.registerInstance = function registerInstance(key, instance) {
	    this.registerResolver(key, new StrategyResolver(0, instance === undefined ? key : instance));
	  };
	
	  Container.prototype.registerSingleton = function registerSingleton(key, fn) {
	    this.registerResolver(key, new StrategyResolver(1, fn === undefined ? key : fn));
	  };
	
	  Container.prototype.registerTransient = function registerTransient(key, fn) {
	    this.registerResolver(key, new StrategyResolver(2, fn === undefined ? key : fn));
	  };
	
	  Container.prototype.registerHandler = function registerHandler(key, handler) {
	    this.registerResolver(key, new StrategyResolver(3, handler));
	  };
	
	  Container.prototype.registerAlias = function registerAlias(originalKey, aliasKey) {
	    this.registerResolver(aliasKey, new StrategyResolver(5, originalKey));
	  };
	
	  Container.prototype.registerResolver = function registerResolver(key, resolver) {
	    if (key === null || key === undefined) {
	      throw new Error(badKeyError);
	    }
	
	    var allResolvers = this._resolvers;
	    var result = allResolvers.get(key);
	
	    if (result === undefined) {
	      allResolvers.set(key, resolver);
	    } else if (result.strategy === 4) {
	      result.state.push(resolver);
	    } else {
	      allResolvers.set(key, new StrategyResolver(4, [result, resolver]));
	    }
	  };
	
	  Container.prototype.autoRegister = function autoRegister(fn, key) {
	    var resolver = void 0;
	
	    if (typeof fn === 'function') {
	      var _registration = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.registration, fn);
	
	      if (_registration === undefined) {
	        resolver = new StrategyResolver(1, fn);
	        this.registerResolver(key === undefined ? fn : key, resolver);
	      } else {
	        resolver = _registration.registerResolver(this, key === undefined ? fn : key, fn);
	      }
	    } else {
	      resolver = new StrategyResolver(0, fn);
	      this.registerResolver(key === undefined ? fn : key, resolver);
	    }
	
	    return resolver;
	  };
	
	  Container.prototype.autoRegisterAll = function autoRegisterAll(fns) {
	    var i = fns.length;
	    while (i--) {
	      this.autoRegister(fns[i]);
	    }
	  };
	
	  Container.prototype.unregister = function unregister(key) {
	    this._resolvers.delete(key);
	  };
	
	  Container.prototype.hasResolver = function hasResolver(key) {
	    var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    if (key === null || key === undefined) {
	      throw new Error(badKeyError);
	    }
	
	    return this._resolvers.has(key) || checkParent && this.parent !== null && this.parent.hasResolver(key, checkParent);
	  };
	
	  Container.prototype.get = function get(key) {
	    if (key === null || key === undefined) {
	      throw new Error(badKeyError);
	    }
	
	    if (key === Container) {
	      return this;
	    }
	
	    if (resolverDecorates(key)) {
	      return key.get(this, key);
	    }
	
	    var resolver = this._resolvers.get(key);
	
	    if (resolver === undefined) {
	      if (this.parent === null) {
	        return this.autoRegister(key).get(this, key);
	      }
	
	      return this.parent._get(key);
	    }
	
	    return resolver.get(this, key);
	  };
	
	  Container.prototype._get = function _get(key) {
	    var resolver = this._resolvers.get(key);
	
	    if (resolver === undefined) {
	      if (this.parent === null) {
	        return this.autoRegister(key).get(this, key);
	      }
	
	      return this.parent._get(key);
	    }
	
	    return resolver.get(this, key);
	  };
	
	  Container.prototype.getAll = function getAll(key) {
	    if (key === null || key === undefined) {
	      throw new Error(badKeyError);
	    }
	
	    var resolver = this._resolvers.get(key);
	
	    if (resolver === undefined) {
	      if (this.parent === null) {
	        return _emptyParameters;
	      }
	
	      return this.parent.getAll(key);
	    }
	
	    if (resolver.strategy === 4) {
	      var state = resolver.state;
	      var i = state.length;
	      var results = new Array(i);
	
	      while (i--) {
	        results[i] = state[i].get(this, key);
	      }
	
	      return results;
	    }
	
	    return [resolver.get(this, key)];
	  };
	
	  Container.prototype.createChild = function createChild() {
	    var child = new Container(this._configuration);
	    child.root = this.root;
	    child.parent = this;
	    return child;
	  };
	
	  Container.prototype.invoke = function invoke(fn, dynamicDependencies) {
	    try {
	      var _handler = this._handlers.get(fn);
	
	      if (_handler === undefined) {
	        _handler = this._createInvocationHandler(fn);
	        this._handlers.set(fn, _handler);
	      }
	
	      return _handler.invoke(this, dynamicDependencies);
	    } catch (e) {
	      throw new _aureliaPal.AggregateError('Error invoking ' + fn.name + '. Check the inner error for details.', e, true);
	    }
	  };
	
	  Container.prototype._createInvocationHandler = function _createInvocationHandler(fn) {
	    var dependencies = void 0;
	
	    if (fn.inject === undefined) {
	      dependencies = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.paramTypes, fn) || _emptyParameters;
	    } else {
	      dependencies = [];
	      var ctor = fn;
	      while (typeof ctor === 'function') {
	        var _dependencies;
	
	        (_dependencies = dependencies).push.apply(_dependencies, getDependencies(ctor));
	        ctor = Object.getPrototypeOf(ctor);
	      }
	    }
	
	    var invoker = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.invoker, fn) || classInvokers[dependencies.length] || classInvokers.fallback;
	
	    var handler = new InvocationHandler(fn, invoker, dependencies);
	    return this._onHandlerCreated !== undefined ? this._onHandlerCreated(handler) : handler;
	  };
	
	  return Container;
	}();
	
	function autoinject(potentialTarget) {
	  var deco = function deco(target) {
	    target.inject = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.paramTypes, target) || _emptyParameters;
	  };
	
	  return potentialTarget ? deco(potentialTarget) : deco;
	}
	
	function inject() {
	  for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    rest[_key2] = arguments[_key2];
	  }
	
	  return function (target, key, descriptor) {
	    if (descriptor) {
	      var _fn = descriptor.value;
	      _fn.inject = rest;
	    } else {
	      target.inject = rest;
	    }
	  };
	}

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getSetObserver = exports.BindingEngine = exports.NameExpression = exports.Listener = exports.ListenerExpression = exports.BindingBehaviorResource = exports.ValueConverterResource = exports.Call = exports.CallExpression = exports.Binding = exports.BindingExpression = exports.ObjectObservationAdapter = exports.ObserverLocator = exports.SVGAnalyzer = exports.presentationAttributes = exports.presentationElements = exports.elements = exports.ComputedExpression = exports.ClassObserver = exports.SelectValueObserver = exports.CheckedObserver = exports.ValueAttributeObserver = exports.StyleObserver = exports.DataAttributeObserver = exports.dataAttributeAccessor = exports.XLinkAttributeObserver = exports.SetterObserver = exports.PrimitiveObserver = exports.propertyAccessor = exports.DirtyCheckProperty = exports.DirtyChecker = exports.EventManager = exports.getMapObserver = exports.ParserImplementation = exports.Parser = exports.Scanner = exports.Lexer = exports.Token = exports.bindingMode = exports.ExpressionCloner = exports.Unparser = exports.LiteralObject = exports.LiteralArray = exports.LiteralString = exports.LiteralPrimitive = exports.PrefixNot = exports.Binary = exports.CallFunction = exports.CallMember = exports.CallScope = exports.AccessKeyed = exports.AccessMember = exports.AccessScope = exports.AccessThis = exports.Conditional = exports.Assign = exports.ValueConverter = exports.BindingBehavior = exports.Chain = exports.Expression = exports.getArrayObserver = exports.CollectionLengthObserver = exports.ModifyCollectionObserver = exports.ExpressionObserver = exports.sourceContext = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _dec, _dec2, _class, _dec3, _class2, _dec4, _class3, _dec5, _class5, _dec6, _class7, _dec7, _class8, _dec8, _class9, _dec9, _class10, _class11, _temp, _dec10, _class12, _class13, _temp2;
	
	exports.camelCase = camelCase;
	exports.createOverrideContext = createOverrideContext;
	exports.getContextFor = getContextFor;
	exports.createScopeForTest = createScopeForTest;
	exports.connectable = connectable;
	exports.enqueueBindingConnect = enqueueBindingConnect;
	exports.subscriberCollection = subscriberCollection;
	exports.calcSplices = calcSplices;
	exports.mergeSplice = mergeSplice;
	exports.projectArraySplices = projectArraySplices;
	exports.getChangeRecords = getChangeRecords;
	exports.cloneExpression = cloneExpression;
	exports.hasDeclaredDependencies = hasDeclaredDependencies;
	exports.declarePropertyDependencies = declarePropertyDependencies;
	exports.computedFrom = computedFrom;
	exports.createComputedObserver = createComputedObserver;
	exports.valueConverter = valueConverter;
	exports.bindingBehavior = bindingBehavior;
	exports.observable = observable;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaPal = __webpack_require__(4);
	
	var _aureliaTaskQueue = __webpack_require__(21);
	
	var _aureliaMetadata = __webpack_require__(7);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	
	
	var map = Object.create(null);
	
	function camelCase(name) {
	  if (name in map) {
	    return map[name];
	  }
	  var result = name.charAt(0).toLowerCase() + name.slice(1).replace(/[_.-](\w|$)/g, function (_, x) {
	    return x.toUpperCase();
	  });
	  map[name] = result;
	  return result;
	}
	
	function createOverrideContext(bindingContext, parentOverrideContext) {
	  return {
	    bindingContext: bindingContext,
	    parentOverrideContext: parentOverrideContext || null
	  };
	}
	
	function getContextFor(name, scope, ancestor) {
	  var oc = scope.overrideContext;
	
	  if (ancestor) {
	    while (ancestor && oc) {
	      ancestor--;
	      oc = oc.parentOverrideContext;
	    }
	    if (ancestor || !oc) {
	      return undefined;
	    }
	    return name in oc ? oc : oc.bindingContext;
	  }
	
	  while (oc && !(name in oc) && !(oc.bindingContext && name in oc.bindingContext)) {
	    oc = oc.parentOverrideContext;
	  }
	  if (oc) {
	    return name in oc ? oc : oc.bindingContext;
	  }
	
	  return scope.bindingContext || scope.overrideContext;
	}
	
	function createScopeForTest(bindingContext, parentBindingContext) {
	  if (parentBindingContext) {
	    return {
	      bindingContext: bindingContext,
	      overrideContext: createOverrideContext(bindingContext, createOverrideContext(parentBindingContext))
	    };
	  }
	  return {
	    bindingContext: bindingContext,
	    overrideContext: createOverrideContext(bindingContext)
	  };
	}
	
	var sourceContext = exports.sourceContext = 'Binding:source';
	var slotNames = [];
	var versionSlotNames = [];
	
	for (var i = 0; i < 100; i++) {
	  slotNames.push('_observer' + i);
	  versionSlotNames.push('_observerVersion' + i);
	}
	
	function addObserver(observer) {
	  var observerSlots = this._observerSlots === undefined ? 0 : this._observerSlots;
	  var i = observerSlots;
	  while (i-- && this[slotNames[i]] !== observer) {}
	  if (i === -1) {
	    i = 0;
	    while (this[slotNames[i]]) {
	      i++;
	    }
	    this[slotNames[i]] = observer;
	    observer.subscribe(sourceContext, this);
	
	    if (i === observerSlots) {
	      this._observerSlots = i + 1;
	    }
	  }
	
	  if (this._version === undefined) {
	    this._version = 0;
	  }
	  this[versionSlotNames[i]] = this._version;
	}
	
	function observeProperty(obj, propertyName) {
	  var observer = this.observerLocator.getObserver(obj, propertyName);
	  addObserver.call(this, observer);
	}
	
	function observeArray(array) {
	  var observer = this.observerLocator.getArrayObserver(array);
	  addObserver.call(this, observer);
	}
	
	function unobserve(all) {
	  var i = this._observerSlots;
	  while (i--) {
	    if (all || this[versionSlotNames[i]] !== this._version) {
	      var observer = this[slotNames[i]];
	      this[slotNames[i]] = null;
	      if (observer) {
	        observer.unsubscribe(sourceContext, this);
	      }
	    }
	  }
	}
	
	function connectable() {
	  return function (target) {
	    target.prototype.observeProperty = observeProperty;
	    target.prototype.observeArray = observeArray;
	    target.prototype.unobserve = unobserve;
	    target.prototype.addObserver = addObserver;
	  };
	}
	
	var bindings = new Map();
	var minimumImmediate = 100;
	var frameBudget = 15;
	
	var isFlushRequested = false;
	var immediate = 0;
	
	function flush(animationFrameStart) {
	  var i = 0;
	  var keys = bindings.keys();
	  var item = void 0;
	
	  while (item = keys.next()) {
	    if (item.done) {
	      break;
	    }
	
	    var binding = item.value;
	    bindings.delete(binding);
	    binding.connect(true);
	    i++;
	
	    if (i % 100 === 0 && _aureliaPal.PLATFORM.performance.now() - animationFrameStart > frameBudget) {
	      break;
	    }
	  }
	
	  if (bindings.size) {
	    _aureliaPal.PLATFORM.requestAnimationFrame(flush);
	  } else {
	    isFlushRequested = false;
	    immediate = 0;
	  }
	}
	
	function enqueueBindingConnect(binding) {
	  if (immediate < minimumImmediate) {
	    immediate++;
	    binding.connect(false);
	  } else {
	    bindings.set(binding);
	  }
	  if (!isFlushRequested) {
	    isFlushRequested = true;
	    _aureliaPal.PLATFORM.requestAnimationFrame(flush);
	  }
	}
	
	function addSubscriber(context, callable) {
	  if (this.hasSubscriber(context, callable)) {
	    return false;
	  }
	  if (!this._context0) {
	    this._context0 = context;
	    this._callable0 = callable;
	    return true;
	  }
	  if (!this._context1) {
	    this._context1 = context;
	    this._callable1 = callable;
	    return true;
	  }
	  if (!this._context2) {
	    this._context2 = context;
	    this._callable2 = callable;
	    return true;
	  }
	  if (!this._contextsRest) {
	    this._contextsRest = [context];
	    this._callablesRest = [callable];
	    return true;
	  }
	  this._contextsRest.push(context);
	  this._callablesRest.push(callable);
	  return true;
	}
	
	function removeSubscriber(context, callable) {
	  if (this._context0 === context && this._callable0 === callable) {
	    this._context0 = null;
	    this._callable0 = null;
	    return true;
	  }
	  if (this._context1 === context && this._callable1 === callable) {
	    this._context1 = null;
	    this._callable1 = null;
	    return true;
	  }
	  if (this._context2 === context && this._callable2 === callable) {
	    this._context2 = null;
	    this._callable2 = null;
	    return true;
	  }
	  var rest = this._contextsRest;
	  var index = void 0;
	  if (!rest || !rest.length || (index = rest.indexOf(context)) === -1 || this._callablesRest[index] !== callable) {
	    return false;
	  }
	  rest.splice(index, 1);
	  this._callablesRest.splice(index, 1);
	  return true;
	}
	
	var arrayPool1 = [];
	var arrayPool2 = [];
	var poolUtilization = [];
	
	function callSubscribers(newValue, oldValue) {
	  var context0 = this._context0;
	  var callable0 = this._callable0;
	  var context1 = this._context1;
	  var callable1 = this._callable1;
	  var context2 = this._context2;
	  var callable2 = this._callable2;
	  var length = this._contextsRest ? this._contextsRest.length : 0;
	  var contextsRest = void 0;
	  var callablesRest = void 0;
	  var poolIndex = void 0;
	  var i = void 0;
	  if (length) {
	    poolIndex = poolUtilization.length;
	    while (poolIndex-- && poolUtilization[poolIndex]) {}
	    if (poolIndex < 0) {
	      poolIndex = poolUtilization.length;
	      contextsRest = [];
	      callablesRest = [];
	      poolUtilization.push(true);
	      arrayPool1.push(contextsRest);
	      arrayPool2.push(callablesRest);
	    } else {
	      poolUtilization[poolIndex] = true;
	      contextsRest = arrayPool1[poolIndex];
	      callablesRest = arrayPool2[poolIndex];
	    }
	
	    i = length;
	    while (i--) {
	      contextsRest[i] = this._contextsRest[i];
	      callablesRest[i] = this._callablesRest[i];
	    }
	  }
	
	  if (context0) {
	    if (callable0) {
	      callable0.call(context0, newValue, oldValue);
	    } else {
	      context0(newValue, oldValue);
	    }
	  }
	  if (context1) {
	    if (callable1) {
	      callable1.call(context1, newValue, oldValue);
	    } else {
	      context1(newValue, oldValue);
	    }
	  }
	  if (context2) {
	    if (callable2) {
	      callable2.call(context2, newValue, oldValue);
	    } else {
	      context2(newValue, oldValue);
	    }
	  }
	  if (length) {
	    for (i = 0; i < length; i++) {
	      var callable = callablesRest[i];
	      var context = contextsRest[i];
	      if (callable) {
	        callable.call(context, newValue, oldValue);
	      } else {
	        context(newValue, oldValue);
	      }
	      contextsRest[i] = null;
	      callablesRest[i] = null;
	    }
	    poolUtilization[poolIndex] = false;
	  }
	}
	
	function hasSubscribers() {
	  return !!(this._context0 || this._context1 || this._context2 || this._contextsRest && this._contextsRest.length);
	}
	
	function hasSubscriber(context, callable) {
	  var has = this._context0 === context && this._callable0 === callable || this._context1 === context && this._callable1 === callable || this._context2 === context && this._callable2 === callable;
	  if (has) {
	    return true;
	  }
	  var index = void 0;
	  var contexts = this._contextsRest;
	  if (!contexts || (index = contexts.length) === 0) {
	    return false;
	  }
	  var callables = this._callablesRest;
	  while (index--) {
	    if (contexts[index] === context && callables[index] === callable) {
	      return true;
	    }
	  }
	  return false;
	}
	
	function subscriberCollection() {
	  return function (target) {
	    target.prototype.addSubscriber = addSubscriber;
	    target.prototype.removeSubscriber = removeSubscriber;
	    target.prototype.callSubscribers = callSubscribers;
	    target.prototype.hasSubscribers = hasSubscribers;
	    target.prototype.hasSubscriber = hasSubscriber;
	  };
	}
	
	var ExpressionObserver = exports.ExpressionObserver = (_dec = connectable(), _dec2 = subscriberCollection(), _dec(_class = _dec2(_class = function () {
	  function ExpressionObserver(scope, expression, observerLocator, lookupFunctions) {
	    
	
	    this.scope = scope;
	    this.expression = expression;
	    this.observerLocator = observerLocator;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  ExpressionObserver.prototype.getValue = function getValue() {
	    return this.expression.evaluate(this.scope, this.lookupFunctions);
	  };
	
	  ExpressionObserver.prototype.setValue = function setValue(newValue) {
	    this.expression.assign(this.scope, newValue);
	  };
	
	  ExpressionObserver.prototype.subscribe = function subscribe(context, callable) {
	    var _this = this;
	
	    if (!this.hasSubscribers()) {
	      this.oldValue = this.expression.evaluate(this.scope, this.lookupFunctions);
	      this.expression.connect(this, this.scope);
	    }
	    this.addSubscriber(context, callable);
	    if (arguments.length === 1 && context instanceof Function) {
	      return {
	        dispose: function dispose() {
	          _this.unsubscribe(context, callable);
	        }
	      };
	    }
	  };
	
	  ExpressionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
	      this.unobserve(true);
	      this.oldValue = undefined;
	    }
	  };
	
	  ExpressionObserver.prototype.call = function call() {
	    var newValue = this.expression.evaluate(this.scope, this.lookupFunctions);
	    var oldValue = this.oldValue;
	    if (newValue !== oldValue) {
	      this.oldValue = newValue;
	      this.callSubscribers(newValue, oldValue);
	    }
	    this._version++;
	    this.expression.connect(this, this.scope);
	    this.unobserve(false);
	  };
	
	  return ExpressionObserver;
	}()) || _class) || _class);
	
	
	function isIndex(s) {
	  return +s === s >>> 0;
	}
	
	function toNumber(s) {
	  return +s;
	}
	
	function newSplice(index, removed, addedCount) {
	  return {
	    index: index,
	    removed: removed,
	    addedCount: addedCount
	  };
	}
	
	var EDIT_LEAVE = 0;
	var EDIT_UPDATE = 1;
	var EDIT_ADD = 2;
	var EDIT_DELETE = 3;
	
	function ArraySplice() {}
	
	ArraySplice.prototype = {
	  calcEditDistances: function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
	    var rowCount = oldEnd - oldStart + 1;
	    var columnCount = currentEnd - currentStart + 1;
	    var distances = new Array(rowCount);
	    var north = void 0;
	    var west = void 0;
	
	    for (var _i = 0; _i < rowCount; ++_i) {
	      distances[_i] = new Array(columnCount);
	      distances[_i][0] = _i;
	    }
	
	    for (var j = 0; j < columnCount; ++j) {
	      distances[0][j] = j;
	    }
	
	    for (var _i2 = 1; _i2 < rowCount; ++_i2) {
	      for (var _j = 1; _j < columnCount; ++_j) {
	        if (this.equals(current[currentStart + _j - 1], old[oldStart + _i2 - 1])) {
	          distances[_i2][_j] = distances[_i2 - 1][_j - 1];
	        } else {
	          north = distances[_i2 - 1][_j] + 1;
	          west = distances[_i2][_j - 1] + 1;
	          distances[_i2][_j] = north < west ? north : west;
	        }
	      }
	    }
	
	    return distances;
	  },
	
	  spliceOperationsFromEditDistances: function spliceOperationsFromEditDistances(distances) {
	    var i = distances.length - 1;
	    var j = distances[0].length - 1;
	    var current = distances[i][j];
	    var edits = [];
	    while (i > 0 || j > 0) {
	      if (i === 0) {
	        edits.push(EDIT_ADD);
	        j--;
	        continue;
	      }
	      if (j === 0) {
	        edits.push(EDIT_DELETE);
	        i--;
	        continue;
	      }
	      var northWest = distances[i - 1][j - 1];
	      var west = distances[i - 1][j];
	      var north = distances[i][j - 1];
	
	      var min = void 0;
	      if (west < north) {
	        min = west < northWest ? west : northWest;
	      } else {
	        min = north < northWest ? north : northWest;
	      }
	
	      if (min === northWest) {
	        if (northWest === current) {
	          edits.push(EDIT_LEAVE);
	        } else {
	          edits.push(EDIT_UPDATE);
	          current = northWest;
	        }
	        i--;
	        j--;
	      } else if (min === west) {
	        edits.push(EDIT_DELETE);
	        i--;
	        current = west;
	      } else {
	        edits.push(EDIT_ADD);
	        j--;
	        current = north;
	      }
	    }
	
	    edits.reverse();
	    return edits;
	  },
	
	  calcSplices: function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
	    var prefixCount = 0;
	    var suffixCount = 0;
	
	    var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
	    if (currentStart === 0 && oldStart === 0) {
	      prefixCount = this.sharedPrefix(current, old, minLength);
	    }
	
	    if (currentEnd === current.length && oldEnd === old.length) {
	      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
	    }
	
	    currentStart += prefixCount;
	    oldStart += prefixCount;
	    currentEnd -= suffixCount;
	    oldEnd -= suffixCount;
	
	    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
	      return [];
	    }
	
	    if (currentStart === currentEnd) {
	      var _splice = newSplice(currentStart, [], 0);
	      while (oldStart < oldEnd) {
	        _splice.removed.push(old[oldStart++]);
	      }
	
	      return [_splice];
	    } else if (oldStart === oldEnd) {
	      return [newSplice(currentStart, [], currentEnd - currentStart)];
	    }
	
	    var ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
	
	    var splice = undefined;
	    var splices = [];
	    var index = currentStart;
	    var oldIndex = oldStart;
	    for (var _i3 = 0; _i3 < ops.length; ++_i3) {
	      switch (ops[_i3]) {
	        case EDIT_LEAVE:
	          if (splice) {
	            splices.push(splice);
	            splice = undefined;
	          }
	
	          index++;
	          oldIndex++;
	          break;
	        case EDIT_UPDATE:
	          if (!splice) {
	            splice = newSplice(index, [], 0);
	          }
	
	          splice.addedCount++;
	          index++;
	
	          splice.removed.push(old[oldIndex]);
	          oldIndex++;
	          break;
	        case EDIT_ADD:
	          if (!splice) {
	            splice = newSplice(index, [], 0);
	          }
	
	          splice.addedCount++;
	          index++;
	          break;
	        case EDIT_DELETE:
	          if (!splice) {
	            splice = newSplice(index, [], 0);
	          }
	
	          splice.removed.push(old[oldIndex]);
	          oldIndex++;
	          break;
	      }
	    }
	
	    if (splice) {
	      splices.push(splice);
	    }
	    return splices;
	  },
	
	  sharedPrefix: function sharedPrefix(current, old, searchLength) {
	    for (var _i4 = 0; _i4 < searchLength; ++_i4) {
	      if (!this.equals(current[_i4], old[_i4])) {
	        return _i4;
	      }
	    }
	
	    return searchLength;
	  },
	
	  sharedSuffix: function sharedSuffix(current, old, searchLength) {
	    var index1 = current.length;
	    var index2 = old.length;
	    var count = 0;
	    while (count < searchLength && this.equals(current[--index1], old[--index2])) {
	      count++;
	    }
	
	    return count;
	  },
	
	  calculateSplices: function calculateSplices(current, previous) {
	    return this.calcSplices(current, 0, current.length, previous, 0, previous.length);
	  },
	
	  equals: function equals(currentValue, previousValue) {
	    return currentValue === previousValue;
	  }
	};
	
	var arraySplice = new ArraySplice();
	
	function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
	  return arraySplice.calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd);
	}
	
	function intersect(start1, end1, start2, end2) {
	  if (end1 < start2 || end2 < start1) {
	    return -1;
	  }
	
	  if (end1 === start2 || end2 === start1) {
	    return 0;
	  }
	
	  if (start1 < start2) {
	    if (end1 < end2) {
	      return end1 - start2;
	    }
	
	    return end2 - start2;
	  }
	
	  if (end2 < end1) {
	    return end2 - start1;
	  }
	
	  return end1 - start1;
	}
	
	function mergeSplice(splices, index, removed, addedCount) {
	  var splice = newSplice(index, removed, addedCount);
	
	  var inserted = false;
	  var insertionOffset = 0;
	
	  for (var _i5 = 0; _i5 < splices.length; _i5++) {
	    var current = splices[_i5];
	    current.index += insertionOffset;
	
	    if (inserted) {
	      continue;
	    }
	
	    var intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);
	
	    if (intersectCount >= 0) {
	
	      splices.splice(_i5, 1);
	      _i5--;
	
	      insertionOffset -= current.addedCount - current.removed.length;
	
	      splice.addedCount += current.addedCount - intersectCount;
	      var deleteCount = splice.removed.length + current.removed.length - intersectCount;
	
	      if (!splice.addedCount && !deleteCount) {
	        inserted = true;
	      } else {
	        var currentRemoved = current.removed;
	
	        if (splice.index < current.index) {
	          var prepend = splice.removed.slice(0, current.index - splice.index);
	          Array.prototype.push.apply(prepend, currentRemoved);
	          currentRemoved = prepend;
	        }
	
	        if (splice.index + splice.removed.length > current.index + current.addedCount) {
	          var append = splice.removed.slice(current.index + current.addedCount - splice.index);
	          Array.prototype.push.apply(currentRemoved, append);
	        }
	
	        splice.removed = currentRemoved;
	        if (current.index < splice.index) {
	          splice.index = current.index;
	        }
	      }
	    } else if (splice.index < current.index) {
	
	      inserted = true;
	
	      splices.splice(_i5, 0, splice);
	      _i5++;
	
	      var offset = splice.addedCount - splice.removed.length;
	      current.index += offset;
	      insertionOffset += offset;
	    }
	  }
	
	  if (!inserted) {
	    splices.push(splice);
	  }
	}
	
	function createInitialSplices(array, changeRecords) {
	  var splices = [];
	
	  for (var _i6 = 0; _i6 < changeRecords.length; _i6++) {
	    var record = changeRecords[_i6];
	    switch (record.type) {
	      case 'splice':
	        mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
	        break;
	      case 'add':
	      case 'update':
	      case 'delete':
	        if (!isIndex(record.name)) {
	          continue;
	        }
	
	        var index = toNumber(record.name);
	        if (index < 0) {
	          continue;
	        }
	
	        mergeSplice(splices, index, [record.oldValue], record.type === 'delete' ? 0 : 1);
	        break;
	      default:
	        console.error('Unexpected record type: ' + JSON.stringify(record));
	        break;
	    }
	  }
	
	  return splices;
	}
	
	function projectArraySplices(array, changeRecords) {
	  var splices = [];
	
	  createInitialSplices(array, changeRecords).forEach(function (splice) {
	    if (splice.addedCount === 1 && splice.removed.length === 1) {
	      if (splice.removed[0] !== array[splice.index]) {
	        splices.push(splice);
	      }
	
	      return;
	    }
	
	    splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));
	  });
	
	  return splices;
	}
	
	function newRecord(type, object, key, oldValue) {
	  return {
	    type: type,
	    object: object,
	    key: key,
	    oldValue: oldValue
	  };
	}
	
	function getChangeRecords(map) {
	  var entries = new Array(map.size);
	  var keys = map.keys();
	  var i = 0;
	  var item = void 0;
	
	  while (item = keys.next()) {
	    if (item.done) {
	      break;
	    }
	
	    entries[i] = newRecord('added', map, item.value);
	    i++;
	  }
	
	  return entries;
	}
	
	var ModifyCollectionObserver = exports.ModifyCollectionObserver = (_dec3 = subscriberCollection(), _dec3(_class2 = function () {
	  function ModifyCollectionObserver(taskQueue, collection) {
	    
	
	    this.taskQueue = taskQueue;
	    this.queued = false;
	    this.changeRecords = null;
	    this.oldCollection = null;
	    this.collection = collection;
	    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
	  }
	
	  ModifyCollectionObserver.prototype.subscribe = function subscribe(context, callable) {
	    this.addSubscriber(context, callable);
	  };
	
	  ModifyCollectionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    this.removeSubscriber(context, callable);
	  };
	
	  ModifyCollectionObserver.prototype.addChangeRecord = function addChangeRecord(changeRecord) {
	    if (!this.hasSubscribers() && !this.lengthObserver) {
	      return;
	    }
	
	    if (changeRecord.type === 'splice') {
	      var index = changeRecord.index;
	      var arrayLength = changeRecord.object.length;
	      if (index > arrayLength) {
	        index = arrayLength - changeRecord.addedCount;
	      } else if (index < 0) {
	        index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
	      }
	      if (index < 0) {
	        index = 0;
	      }
	      changeRecord.index = index;
	    }
	
	    if (this.changeRecords === null) {
	      this.changeRecords = [changeRecord];
	    } else {
	      this.changeRecords.push(changeRecord);
	    }
	
	    if (!this.queued) {
	      this.queued = true;
	      this.taskQueue.queueMicroTask(this);
	    }
	  };
	
	  ModifyCollectionObserver.prototype.flushChangeRecords = function flushChangeRecords() {
	    if (this.changeRecords && this.changeRecords.length || this.oldCollection) {
	      this.call();
	    }
	  };
	
	  ModifyCollectionObserver.prototype.reset = function reset(oldCollection) {
	    this.oldCollection = oldCollection;
	
	    if (this.hasSubscribers() && !this.queued) {
	      this.queued = true;
	      this.taskQueue.queueMicroTask(this);
	    }
	  };
	
	  ModifyCollectionObserver.prototype.getLengthObserver = function getLengthObserver() {
	    return this.lengthObserver || (this.lengthObserver = new CollectionLengthObserver(this.collection));
	  };
	
	  ModifyCollectionObserver.prototype.call = function call() {
	    var changeRecords = this.changeRecords;
	    var oldCollection = this.oldCollection;
	    var records = void 0;
	
	    this.queued = false;
	    this.changeRecords = [];
	    this.oldCollection = null;
	
	    if (this.hasSubscribers()) {
	      if (oldCollection) {
	        if (this.collection instanceof Map || this.collection instanceof Set) {
	          records = getChangeRecords(oldCollection);
	        } else {
	          records = calcSplices(this.collection, 0, this.collection.length, oldCollection, 0, oldCollection.length);
	        }
	      } else {
	        if (this.collection instanceof Map || this.collection instanceof Set) {
	          records = changeRecords;
	        } else {
	          records = projectArraySplices(this.collection, changeRecords);
	        }
	      }
	
	      this.callSubscribers(records);
	    }
	
	    if (this.lengthObserver) {
	      this.lengthObserver.call(this.collection[this.lengthPropertyName]);
	    }
	  };
	
	  return ModifyCollectionObserver;
	}()) || _class2);
	var CollectionLengthObserver = exports.CollectionLengthObserver = (_dec4 = subscriberCollection(), _dec4(_class3 = function () {
	  function CollectionLengthObserver(collection) {
	    
	
	    this.collection = collection;
	    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
	    this.currentValue = collection[this.lengthPropertyName];
	  }
	
	  CollectionLengthObserver.prototype.getValue = function getValue() {
	    return this.collection[this.lengthPropertyName];
	  };
	
	  CollectionLengthObserver.prototype.setValue = function setValue(newValue) {
	    this.collection[this.lengthPropertyName] = newValue;
	  };
	
	  CollectionLengthObserver.prototype.subscribe = function subscribe(context, callable) {
	    this.addSubscriber(context, callable);
	  };
	
	  CollectionLengthObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    this.removeSubscriber(context, callable);
	  };
	
	  CollectionLengthObserver.prototype.call = function call(newValue) {
	    var oldValue = this.currentValue;
	    this.callSubscribers(newValue, oldValue);
	    this.currentValue = newValue;
	  };
	
	  return CollectionLengthObserver;
	}()) || _class3);
	
	var pop = Array.prototype.pop;
	var push = Array.prototype.push;
	var reverse = Array.prototype.reverse;
	var shift = Array.prototype.shift;
	var sort = Array.prototype.sort;
	var splice = Array.prototype.splice;
	var unshift = Array.prototype.unshift;
	
	Array.prototype.pop = function () {
	  var notEmpty = this.length > 0;
	  var methodCallResult = pop.apply(this, arguments);
	  if (notEmpty && this.__array_observer__ !== undefined) {
	    this.__array_observer__.addChangeRecord({
	      type: 'delete',
	      object: this,
	      name: this.length,
	      oldValue: methodCallResult
	    });
	  }
	  return methodCallResult;
	};
	
	Array.prototype.push = function () {
	  var methodCallResult = push.apply(this, arguments);
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.addChangeRecord({
	      type: 'splice',
	      object: this,
	      index: this.length - arguments.length,
	      removed: [],
	      addedCount: arguments.length
	    });
	  }
	  return methodCallResult;
	};
	
	Array.prototype.reverse = function () {
	  var oldArray = void 0;
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.flushChangeRecords();
	    oldArray = this.slice();
	  }
	  var methodCallResult = reverse.apply(this, arguments);
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.reset(oldArray);
	  }
	  return methodCallResult;
	};
	
	Array.prototype.shift = function () {
	  var notEmpty = this.length > 0;
	  var methodCallResult = shift.apply(this, arguments);
	  if (notEmpty && this.__array_observer__ !== undefined) {
	    this.__array_observer__.addChangeRecord({
	      type: 'delete',
	      object: this,
	      name: 0,
	      oldValue: methodCallResult
	    });
	  }
	  return methodCallResult;
	};
	
	Array.prototype.sort = function () {
	  var oldArray = void 0;
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.flushChangeRecords();
	    oldArray = this.slice();
	  }
	  var methodCallResult = sort.apply(this, arguments);
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.reset(oldArray);
	  }
	  return methodCallResult;
	};
	
	Array.prototype.splice = function () {
	  var methodCallResult = splice.apply(this, arguments);
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.addChangeRecord({
	      type: 'splice',
	      object: this,
	      index: arguments[0],
	      removed: methodCallResult,
	      addedCount: arguments.length > 2 ? arguments.length - 2 : 0
	    });
	  }
	  return methodCallResult;
	};
	
	Array.prototype.unshift = function () {
	  var methodCallResult = unshift.apply(this, arguments);
	  if (this.__array_observer__ !== undefined) {
	    this.__array_observer__.addChangeRecord({
	      type: 'splice',
	      object: this,
	      index: 0,
	      removed: [],
	      addedCount: arguments.length
	    });
	  }
	  return methodCallResult;
	};
	
	function _getArrayObserver(taskQueue, array) {
	  return ModifyArrayObserver.for(taskQueue, array);
	}
	
	exports.getArrayObserver = _getArrayObserver;
	
	var ModifyArrayObserver = function (_ModifyCollectionObse) {
	  _inherits(ModifyArrayObserver, _ModifyCollectionObse);
	
	  function ModifyArrayObserver(taskQueue, array) {
	    
	
	    return _possibleConstructorReturn(this, _ModifyCollectionObse.call(this, taskQueue, array));
	  }
	
	  ModifyArrayObserver.for = function _for(taskQueue, array) {
	    if (!('__array_observer__' in array)) {
	      var observer = ModifyArrayObserver.create(taskQueue, array);
	      Reflect.defineProperty(array, '__array_observer__', { value: observer, enumerable: false, configurable: false });
	    }
	    return array.__array_observer__;
	  };
	
	  ModifyArrayObserver.create = function create(taskQueue, array) {
	    var observer = new ModifyArrayObserver(taskQueue, array);
	    return observer;
	  };
	
	  return ModifyArrayObserver;
	}(ModifyCollectionObserver);
	
	var Expression = exports.Expression = function () {
	  function Expression() {
	    
	
	    this.isChain = false;
	    this.isAssignable = false;
	  }
	
	  Expression.prototype.evaluate = function evaluate(scope, lookupFunctions, args) {
	    throw new Error('Binding expression "' + this + '" cannot be evaluated.');
	  };
	
	  Expression.prototype.assign = function assign(scope, value, lookupFunctions) {
	    throw new Error('Binding expression "' + this + '" cannot be assigned to.');
	  };
	
	  Expression.prototype.toString = function toString() {
	    return Unparser.unparse(this);
	  };
	
	  return Expression;
	}();
	
	var Chain = exports.Chain = function (_Expression) {
	  _inherits(Chain, _Expression);
	
	  function Chain(expressions) {
	    
	
	    var _this3 = _possibleConstructorReturn(this, _Expression.call(this));
	
	    _this3.expressions = expressions;
	    _this3.isChain = true;
	    return _this3;
	  }
	
	  Chain.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var result = void 0;
	    var expressions = this.expressions;
	    var last = void 0;
	
	    for (var _i7 = 0, length = expressions.length; _i7 < length; ++_i7) {
	      last = expressions[_i7].evaluate(scope, lookupFunctions);
	
	      if (last !== null) {
	        result = last;
	      }
	    }
	
	    return result;
	  };
	
	  Chain.prototype.accept = function accept(visitor) {
	    return visitor.visitChain(this);
	  };
	
	  return Chain;
	}(Expression);
	
	var BindingBehavior = exports.BindingBehavior = function (_Expression2) {
	  _inherits(BindingBehavior, _Expression2);
	
	  function BindingBehavior(expression, name, args) {
	    
	
	    var _this4 = _possibleConstructorReturn(this, _Expression2.call(this));
	
	    _this4.expression = expression;
	    _this4.name = name;
	    _this4.args = args;
	    return _this4;
	  }
	
	  BindingBehavior.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return this.expression.evaluate(scope, lookupFunctions);
	  };
	
	  BindingBehavior.prototype.assign = function assign(scope, value, lookupFunctions) {
	    return this.expression.assign(scope, value, lookupFunctions);
	  };
	
	  BindingBehavior.prototype.accept = function accept(visitor) {
	    return visitor.visitBindingBehavior(this);
	  };
	
	  BindingBehavior.prototype.connect = function connect(binding, scope) {
	    this.expression.connect(binding, scope);
	  };
	
	  BindingBehavior.prototype.bind = function bind(binding, scope, lookupFunctions) {
	    if (this.expression.expression && this.expression.bind) {
	      this.expression.bind(binding, scope, lookupFunctions);
	    }
	    var behavior = lookupFunctions.bindingBehaviors(this.name);
	    if (!behavior) {
	      throw new Error('No BindingBehavior named "' + this.name + '" was found!');
	    }
	    var behaviorKey = 'behavior-' + this.name;
	    if (binding[behaviorKey]) {
	      throw new Error('A binding behavior named "' + this.name + '" has already been applied to "' + this.expression + '"');
	    }
	    binding[behaviorKey] = behavior;
	    behavior.bind.apply(behavior, [binding, scope].concat(evalList(scope, this.args, binding.lookupFunctions)));
	  };
	
	  BindingBehavior.prototype.unbind = function unbind(binding, scope) {
	    var behaviorKey = 'behavior-' + this.name;
	    binding[behaviorKey].unbind(binding, scope);
	    binding[behaviorKey] = null;
	    if (this.expression.expression && this.expression.unbind) {
	      this.expression.unbind(binding, scope);
	    }
	  };
	
	  return BindingBehavior;
	}(Expression);
	
	var ValueConverter = exports.ValueConverter = function (_Expression3) {
	  _inherits(ValueConverter, _Expression3);
	
	  function ValueConverter(expression, name, args, allArgs) {
	    
	
	    var _this5 = _possibleConstructorReturn(this, _Expression3.call(this));
	
	    _this5.expression = expression;
	    _this5.name = name;
	    _this5.args = args;
	    _this5.allArgs = allArgs;
	    return _this5;
	  }
	
	  ValueConverter.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var converter = lookupFunctions.valueConverters(this.name);
	    if (!converter) {
	      throw new Error('No ValueConverter named "' + this.name + '" was found!');
	    }
	
	    if ('toView' in converter) {
	      return converter.toView.apply(converter, evalList(scope, this.allArgs, lookupFunctions));
	    }
	
	    return this.allArgs[0].evaluate(scope, lookupFunctions);
	  };
	
	  ValueConverter.prototype.assign = function assign(scope, value, lookupFunctions) {
	    var converter = lookupFunctions.valueConverters(this.name);
	    if (!converter) {
	      throw new Error('No ValueConverter named "' + this.name + '" was found!');
	    }
	
	    if ('fromView' in converter) {
	      value = converter.fromView.apply(converter, [value].concat(evalList(scope, this.args, lookupFunctions)));
	    }
	
	    return this.allArgs[0].assign(scope, value, lookupFunctions);
	  };
	
	  ValueConverter.prototype.accept = function accept(visitor) {
	    return visitor.visitValueConverter(this);
	  };
	
	  ValueConverter.prototype.connect = function connect(binding, scope) {
	    var expressions = this.allArgs;
	    var i = expressions.length;
	    while (i--) {
	      expressions[i].connect(binding, scope);
	    }
	  };
	
	  return ValueConverter;
	}(Expression);
	
	var Assign = exports.Assign = function (_Expression4) {
	  _inherits(Assign, _Expression4);
	
	  function Assign(target, value) {
	    
	
	    var _this6 = _possibleConstructorReturn(this, _Expression4.call(this));
	
	    _this6.target = target;
	    _this6.value = value;
	    return _this6;
	  }
	
	  Assign.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return this.target.assign(scope, this.value.evaluate(scope, lookupFunctions));
	  };
	
	  Assign.prototype.accept = function accept(vistor) {
	    vistor.visitAssign(this);
	  };
	
	  Assign.prototype.connect = function connect(binding, scope) {};
	
	  return Assign;
	}(Expression);
	
	var Conditional = exports.Conditional = function (_Expression5) {
	  _inherits(Conditional, _Expression5);
	
	  function Conditional(condition, yes, no) {
	    
	
	    var _this7 = _possibleConstructorReturn(this, _Expression5.call(this));
	
	    _this7.condition = condition;
	    _this7.yes = yes;
	    _this7.no = no;
	    return _this7;
	  }
	
	  Conditional.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return !!this.condition.evaluate(scope) ? this.yes.evaluate(scope) : this.no.evaluate(scope);
	  };
	
	  Conditional.prototype.accept = function accept(visitor) {
	    return visitor.visitConditional(this);
	  };
	
	  Conditional.prototype.connect = function connect(binding, scope) {
	    this.condition.connect(binding, scope);
	    if (this.condition.evaluate(scope)) {
	      this.yes.connect(binding, scope);
	    } else {
	      this.no.connect(binding, scope);
	    }
	  };
	
	  return Conditional;
	}(Expression);
	
	var AccessThis = exports.AccessThis = function (_Expression6) {
	  _inherits(AccessThis, _Expression6);
	
	  function AccessThis(ancestor) {
	    
	
	    var _this8 = _possibleConstructorReturn(this, _Expression6.call(this));
	
	    _this8.ancestor = ancestor;
	    return _this8;
	  }
	
	  AccessThis.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var oc = scope.overrideContext;
	    var i = this.ancestor;
	    while (i-- && oc) {
	      oc = oc.parentOverrideContext;
	    }
	    return i < 1 && oc ? oc.bindingContext : undefined;
	  };
	
	  AccessThis.prototype.accept = function accept(visitor) {
	    return visitor.visitAccessThis(this);
	  };
	
	  AccessThis.prototype.connect = function connect(binding, scope) {};
	
	  return AccessThis;
	}(Expression);
	
	var AccessScope = exports.AccessScope = function (_Expression7) {
	  _inherits(AccessScope, _Expression7);
	
	  function AccessScope(name, ancestor) {
	    
	
	    var _this9 = _possibleConstructorReturn(this, _Expression7.call(this));
	
	    _this9.name = name;
	    _this9.ancestor = ancestor;
	    _this9.isAssignable = true;
	    return _this9;
	  }
	
	  AccessScope.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var context = getContextFor(this.name, scope, this.ancestor);
	    return context[this.name];
	  };
	
	  AccessScope.prototype.assign = function assign(scope, value) {
	    var context = getContextFor(this.name, scope, this.ancestor);
	    return context ? context[this.name] = value : undefined;
	  };
	
	  AccessScope.prototype.accept = function accept(visitor) {
	    return visitor.visitAccessScope(this);
	  };
	
	  AccessScope.prototype.connect = function connect(binding, scope) {
	    var context = getContextFor(this.name, scope, this.ancestor);
	    binding.observeProperty(context, this.name);
	  };
	
	  return AccessScope;
	}(Expression);
	
	var AccessMember = exports.AccessMember = function (_Expression8) {
	  _inherits(AccessMember, _Expression8);
	
	  function AccessMember(object, name) {
	    
	
	    var _this10 = _possibleConstructorReturn(this, _Expression8.call(this));
	
	    _this10.object = object;
	    _this10.name = name;
	    _this10.isAssignable = true;
	    return _this10;
	  }
	
	  AccessMember.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var instance = this.object.evaluate(scope, lookupFunctions);
	    return instance === null || instance === undefined ? instance : instance[this.name];
	  };
	
	  AccessMember.prototype.assign = function assign(scope, value) {
	    var instance = this.object.evaluate(scope);
	
	    if (instance === null || instance === undefined) {
	      instance = {};
	      this.object.assign(scope, instance);
	    }
	
	    return instance[this.name] = value;
	  };
	
	  AccessMember.prototype.accept = function accept(visitor) {
	    return visitor.visitAccessMember(this);
	  };
	
	  AccessMember.prototype.connect = function connect(binding, scope) {
	    this.object.connect(binding, scope);
	    var obj = this.object.evaluate(scope);
	    if (obj) {
	      binding.observeProperty(obj, this.name);
	    }
	  };
	
	  return AccessMember;
	}(Expression);
	
	var AccessKeyed = exports.AccessKeyed = function (_Expression9) {
	  _inherits(AccessKeyed, _Expression9);
	
	  function AccessKeyed(object, key) {
	    
	
	    var _this11 = _possibleConstructorReturn(this, _Expression9.call(this));
	
	    _this11.object = object;
	    _this11.key = key;
	    _this11.isAssignable = true;
	    return _this11;
	  }
	
	  AccessKeyed.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var instance = this.object.evaluate(scope, lookupFunctions);
	    var lookup = this.key.evaluate(scope, lookupFunctions);
	    return getKeyed(instance, lookup);
	  };
	
	  AccessKeyed.prototype.assign = function assign(scope, value) {
	    var instance = this.object.evaluate(scope);
	    var lookup = this.key.evaluate(scope);
	    return setKeyed(instance, lookup, value);
	  };
	
	  AccessKeyed.prototype.accept = function accept(visitor) {
	    return visitor.visitAccessKeyed(this);
	  };
	
	  AccessKeyed.prototype.connect = function connect(binding, scope) {
	    this.object.connect(binding, scope);
	    var obj = this.object.evaluate(scope);
	    if (obj instanceof Object) {
	      this.key.connect(binding, scope);
	      var key = this.key.evaluate(scope);
	
	      if (key !== null && key !== undefined && !(Array.isArray(obj) && typeof key === 'number')) {
	        binding.observeProperty(obj, key);
	      }
	    }
	  };
	
	  return AccessKeyed;
	}(Expression);
	
	var CallScope = exports.CallScope = function (_Expression10) {
	  _inherits(CallScope, _Expression10);
	
	  function CallScope(name, args, ancestor) {
	    
	
	    var _this12 = _possibleConstructorReturn(this, _Expression10.call(this));
	
	    _this12.name = name;
	    _this12.args = args;
	    _this12.ancestor = ancestor;
	    return _this12;
	  }
	
	  CallScope.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
	    var args = evalList(scope, this.args, lookupFunctions);
	    var context = getContextFor(this.name, scope, this.ancestor);
	    var func = getFunction(context, this.name, mustEvaluate);
	    if (func) {
	      return func.apply(context, args);
	    }
	    return undefined;
	  };
	
	  CallScope.prototype.accept = function accept(visitor) {
	    return visitor.visitCallScope(this);
	  };
	
	  CallScope.prototype.connect = function connect(binding, scope) {
	    var args = this.args;
	    var i = args.length;
	    while (i--) {
	      args[i].connect(binding, scope);
	    }
	  };
	
	  return CallScope;
	}(Expression);
	
	var CallMember = exports.CallMember = function (_Expression11) {
	  _inherits(CallMember, _Expression11);
	
	  function CallMember(object, name, args) {
	    
	
	    var _this13 = _possibleConstructorReturn(this, _Expression11.call(this));
	
	    _this13.object = object;
	    _this13.name = name;
	    _this13.args = args;
	    return _this13;
	  }
	
	  CallMember.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
	    var instance = this.object.evaluate(scope, lookupFunctions);
	    var args = evalList(scope, this.args, lookupFunctions);
	    var func = getFunction(instance, this.name, mustEvaluate);
	    if (func) {
	      return func.apply(instance, args);
	    }
	    return undefined;
	  };
	
	  CallMember.prototype.accept = function accept(visitor) {
	    return visitor.visitCallMember(this);
	  };
	
	  CallMember.prototype.connect = function connect(binding, scope) {
	    this.object.connect(binding, scope);
	    var obj = this.object.evaluate(scope);
	    if (getFunction(obj, this.name, false)) {
	      var args = this.args;
	      var _i8 = args.length;
	      while (_i8--) {
	        args[_i8].connect(binding, scope);
	      }
	    }
	  };
	
	  return CallMember;
	}(Expression);
	
	var CallFunction = exports.CallFunction = function (_Expression12) {
	  _inherits(CallFunction, _Expression12);
	
	  function CallFunction(func, args) {
	    
	
	    var _this14 = _possibleConstructorReturn(this, _Expression12.call(this));
	
	    _this14.func = func;
	    _this14.args = args;
	    return _this14;
	  }
	
	  CallFunction.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
	    var func = this.func.evaluate(scope, lookupFunctions);
	    if (typeof func === 'function') {
	      return func.apply(null, evalList(scope, this.args, lookupFunctions));
	    }
	    if (!mustEvaluate && (func === null || func === undefined)) {
	      return undefined;
	    }
	    throw new Error(this.func + ' is not a function');
	  };
	
	  CallFunction.prototype.accept = function accept(visitor) {
	    return visitor.visitCallFunction(this);
	  };
	
	  CallFunction.prototype.connect = function connect(binding, scope) {
	    this.func.connect(binding, scope);
	    var func = this.func.evaluate(scope);
	    if (typeof func === 'function') {
	      var args = this.args;
	      var _i9 = args.length;
	      while (_i9--) {
	        args[_i9].connect(binding, scope);
	      }
	    }
	  };
	
	  return CallFunction;
	}(Expression);
	
	var Binary = exports.Binary = function (_Expression13) {
	  _inherits(Binary, _Expression13);
	
	  function Binary(operation, left, right) {
	    
	
	    var _this15 = _possibleConstructorReturn(this, _Expression13.call(this));
	
	    _this15.operation = operation;
	    _this15.left = left;
	    _this15.right = right;
	    return _this15;
	  }
	
	  Binary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var left = this.left.evaluate(scope);
	
	    switch (this.operation) {
	      case '&&':
	        return left && this.right.evaluate(scope);
	      case '||':
	        return left || this.right.evaluate(scope);
	    }
	
	    var right = this.right.evaluate(scope);
	
	    switch (this.operation) {
	      case '==':
	        return left == right;
	      case '===':
	        return left === right;
	      case '!=':
	        return left != right;
	      case '!==':
	        return left !== right;
	    }
	
	    if (left === null || right === null || left === undefined || right === undefined) {
	      switch (this.operation) {
	        case '+':
	          if (left !== null && left !== undefined) return left;
	          if (right !== null && right !== undefined) return right;
	          return 0;
	        case '-':
	          if (left !== null && left !== undefined) return left;
	          if (right !== null && right !== undefined) return 0 - right;
	          return 0;
	      }
	
	      return null;
	    }
	
	    switch (this.operation) {
	      case '+':
	        return autoConvertAdd(left, right);
	      case '-':
	        return left - right;
	      case '*':
	        return left * right;
	      case '/':
	        return left / right;
	      case '%':
	        return left % right;
	      case '<':
	        return left < right;
	      case '>':
	        return left > right;
	      case '<=':
	        return left <= right;
	      case '>=':
	        return left >= right;
	      case '^':
	        return left ^ right;
	    }
	
	    throw new Error('Internal error [' + this.operation + '] not handled');
	  };
	
	  Binary.prototype.accept = function accept(visitor) {
	    return visitor.visitBinary(this);
	  };
	
	  Binary.prototype.connect = function connect(binding, scope) {
	    this.left.connect(binding, scope);
	    var left = this.left.evaluate(scope);
	    if (this.operation === '&&' && !left || this.operation === '||' && left) {
	      return;
	    }
	    this.right.connect(binding, scope);
	  };
	
	  return Binary;
	}(Expression);
	
	var PrefixNot = exports.PrefixNot = function (_Expression14) {
	  _inherits(PrefixNot, _Expression14);
	
	  function PrefixNot(operation, expression) {
	    
	
	    var _this16 = _possibleConstructorReturn(this, _Expression14.call(this));
	
	    _this16.operation = operation;
	    _this16.expression = expression;
	    return _this16;
	  }
	
	  PrefixNot.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return !this.expression.evaluate(scope);
	  };
	
	  PrefixNot.prototype.accept = function accept(visitor) {
	    return visitor.visitPrefix(this);
	  };
	
	  PrefixNot.prototype.connect = function connect(binding, scope) {
	    this.expression.connect(binding, scope);
	  };
	
	  return PrefixNot;
	}(Expression);
	
	var LiteralPrimitive = exports.LiteralPrimitive = function (_Expression15) {
	  _inherits(LiteralPrimitive, _Expression15);
	
	  function LiteralPrimitive(value) {
	    
	
	    var _this17 = _possibleConstructorReturn(this, _Expression15.call(this));
	
	    _this17.value = value;
	    return _this17;
	  }
	
	  LiteralPrimitive.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return this.value;
	  };
	
	  LiteralPrimitive.prototype.accept = function accept(visitor) {
	    return visitor.visitLiteralPrimitive(this);
	  };
	
	  LiteralPrimitive.prototype.connect = function connect(binding, scope) {};
	
	  return LiteralPrimitive;
	}(Expression);
	
	var LiteralString = exports.LiteralString = function (_Expression16) {
	  _inherits(LiteralString, _Expression16);
	
	  function LiteralString(value) {
	    
	
	    var _this18 = _possibleConstructorReturn(this, _Expression16.call(this));
	
	    _this18.value = value;
	    return _this18;
	  }
	
	  LiteralString.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return this.value;
	  };
	
	  LiteralString.prototype.accept = function accept(visitor) {
	    return visitor.visitLiteralString(this);
	  };
	
	  LiteralString.prototype.connect = function connect(binding, scope) {};
	
	  return LiteralString;
	}(Expression);
	
	var LiteralArray = exports.LiteralArray = function (_Expression17) {
	  _inherits(LiteralArray, _Expression17);
	
	  function LiteralArray(elements) {
	    
	
	    var _this19 = _possibleConstructorReturn(this, _Expression17.call(this));
	
	    _this19.elements = elements;
	    return _this19;
	  }
	
	  LiteralArray.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var elements = this.elements;
	    var result = [];
	
	    for (var _i10 = 0, length = elements.length; _i10 < length; ++_i10) {
	      result[_i10] = elements[_i10].evaluate(scope, lookupFunctions);
	    }
	
	    return result;
	  };
	
	  LiteralArray.prototype.accept = function accept(visitor) {
	    return visitor.visitLiteralArray(this);
	  };
	
	  LiteralArray.prototype.connect = function connect(binding, scope) {
	    var length = this.elements.length;
	    for (var _i11 = 0; _i11 < length; _i11++) {
	      this.elements[_i11].connect(binding, scope);
	    }
	  };
	
	  return LiteralArray;
	}(Expression);
	
	var LiteralObject = exports.LiteralObject = function (_Expression18) {
	  _inherits(LiteralObject, _Expression18);
	
	  function LiteralObject(keys, values) {
	    
	
	    var _this20 = _possibleConstructorReturn(this, _Expression18.call(this));
	
	    _this20.keys = keys;
	    _this20.values = values;
	    return _this20;
	  }
	
	  LiteralObject.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    var instance = {};
	    var keys = this.keys;
	    var values = this.values;
	
	    for (var _i12 = 0, length = keys.length; _i12 < length; ++_i12) {
	      instance[keys[_i12]] = values[_i12].evaluate(scope, lookupFunctions);
	    }
	
	    return instance;
	  };
	
	  LiteralObject.prototype.accept = function accept(visitor) {
	    return visitor.visitLiteralObject(this);
	  };
	
	  LiteralObject.prototype.connect = function connect(binding, scope) {
	    var length = this.keys.length;
	    for (var _i13 = 0; _i13 < length; _i13++) {
	      this.values[_i13].connect(binding, scope);
	    }
	  };
	
	  return LiteralObject;
	}(Expression);
	
	var evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0]];
	
	function evalList(scope, list, lookupFunctions) {
	  var length = list.length;
	
	  for (var cacheLength = evalListCache.length; cacheLength <= length; ++cacheLength) {
	    evalListCache.push([]);
	  }
	
	  var result = evalListCache[length];
	
	  for (var _i14 = 0; _i14 < length; ++_i14) {
	    result[_i14] = list[_i14].evaluate(scope, lookupFunctions);
	  }
	
	  return result;
	}
	
	function autoConvertAdd(a, b) {
	  if (a !== null && b !== null) {
	    if (typeof a === 'string' && typeof b !== 'string') {
	      return a + b.toString();
	    }
	
	    if (typeof a !== 'string' && typeof b === 'string') {
	      return a.toString() + b;
	    }
	
	    return a + b;
	  }
	
	  if (a !== null) {
	    return a;
	  }
	
	  if (b !== null) {
	    return b;
	  }
	
	  return 0;
	}
	
	function getFunction(obj, name, mustExist) {
	  var func = obj === null || obj === undefined ? null : obj[name];
	  if (typeof func === 'function') {
	    return func;
	  }
	  if (!mustExist && (func === null || func === undefined)) {
	    return null;
	  }
	  throw new Error(name + ' is not a function');
	}
	
	function getKeyed(obj, key) {
	  if (Array.isArray(obj)) {
	    return obj[parseInt(key, 10)];
	  } else if (obj) {
	    return obj[key];
	  } else if (obj === null || obj === undefined) {
	    return undefined;
	  }
	
	  return obj[key];
	}
	
	function setKeyed(obj, key, value) {
	  if (Array.isArray(obj)) {
	    var index = parseInt(key, 10);
	
	    if (obj.length <= index) {
	      obj.length = index + 1;
	    }
	
	    obj[index] = value;
	  } else {
	    obj[key] = value;
	  }
	
	  return value;
	}
	
	var Unparser = exports.Unparser = function () {
	  function Unparser(buffer) {
	    
	
	    this.buffer = buffer;
	  }
	
	  Unparser.unparse = function unparse(expression) {
	    var buffer = [];
	    var visitor = new Unparser(buffer);
	
	    expression.accept(visitor);
	
	    return buffer.join('');
	  };
	
	  Unparser.prototype.write = function write(text) {
	    this.buffer.push(text);
	  };
	
	  Unparser.prototype.writeArgs = function writeArgs(args) {
	    this.write('(');
	
	    for (var _i15 = 0, length = args.length; _i15 < length; ++_i15) {
	      if (_i15 !== 0) {
	        this.write(',');
	      }
	
	      args[_i15].accept(this);
	    }
	
	    this.write(')');
	  };
	
	  Unparser.prototype.visitChain = function visitChain(chain) {
	    var expressions = chain.expressions;
	
	    for (var _i16 = 0, length = expression.length; _i16 < length; ++_i16) {
	      if (_i16 !== 0) {
	        this.write(';');
	      }
	
	      expressions[_i16].accept(this);
	    }
	  };
	
	  Unparser.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
	    var args = behavior.args;
	
	    behavior.expression.accept(this);
	    this.write('&' + behavior.name);
	
	    for (var _i17 = 0, length = args.length; _i17 < length; ++_i17) {
	      this.write(':');
	      args[_i17].accept(this);
	    }
	  };
	
	  Unparser.prototype.visitValueConverter = function visitValueConverter(converter) {
	    var args = converter.args;
	
	    converter.expression.accept(this);
	    this.write('|' + converter.name);
	
	    for (var _i18 = 0, length = args.length; _i18 < length; ++_i18) {
	      this.write(':');
	      args[_i18].accept(this);
	    }
	  };
	
	  Unparser.prototype.visitAssign = function visitAssign(assign) {
	    assign.target.accept(this);
	    this.write('=');
	    assign.value.accept(this);
	  };
	
	  Unparser.prototype.visitConditional = function visitConditional(conditional) {
	    conditional.condition.accept(this);
	    this.write('?');
	    conditional.yes.accept(this);
	    this.write(':');
	    conditional.no.accept(this);
	  };
	
	  Unparser.prototype.visitAccessThis = function visitAccessThis(access) {
	    if (access.ancestor === 0) {
	      this.write('$this');
	      return;
	    }
	    this.write('$parent');
	    var i = access.ancestor - 1;
	    while (i--) {
	      this.write('.$parent');
	    }
	  };
	
	  Unparser.prototype.visitAccessScope = function visitAccessScope(access) {
	    var i = access.ancestor;
	    while (i--) {
	      this.write('$parent.');
	    }
	    this.write(access.name);
	  };
	
	  Unparser.prototype.visitAccessMember = function visitAccessMember(access) {
	    access.object.accept(this);
	    this.write('.' + access.name);
	  };
	
	  Unparser.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
	    access.object.accept(this);
	    this.write('[');
	    access.key.accept(this);
	    this.write(']');
	  };
	
	  Unparser.prototype.visitCallScope = function visitCallScope(call) {
	    var i = call.ancestor;
	    while (i--) {
	      this.write('$parent.');
	    }
	    this.write(call.name);
	    this.writeArgs(call.args);
	  };
	
	  Unparser.prototype.visitCallFunction = function visitCallFunction(call) {
	    call.func.accept(this);
	    this.writeArgs(call.args);
	  };
	
	  Unparser.prototype.visitCallMember = function visitCallMember(call) {
	    call.object.accept(this);
	    this.write('.' + call.name);
	    this.writeArgs(call.args);
	  };
	
	  Unparser.prototype.visitPrefix = function visitPrefix(prefix) {
	    this.write('(' + prefix.operation);
	    prefix.expression.accept(this);
	    this.write(')');
	  };
	
	  Unparser.prototype.visitBinary = function visitBinary(binary) {
	    binary.left.accept(this);
	    this.write(binary.operation);
	    binary.right.accept(this);
	  };
	
	  Unparser.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
	    this.write('' + literal.value);
	  };
	
	  Unparser.prototype.visitLiteralArray = function visitLiteralArray(literal) {
	    var elements = literal.elements;
	
	    this.write('[');
	
	    for (var _i19 = 0, length = elements.length; _i19 < length; ++_i19) {
	      if (_i19 !== 0) {
	        this.write(',');
	      }
	
	      elements[_i19].accept(this);
	    }
	
	    this.write(']');
	  };
	
	  Unparser.prototype.visitLiteralObject = function visitLiteralObject(literal) {
	    var keys = literal.keys;
	    var values = literal.values;
	
	    this.write('{');
	
	    for (var _i20 = 0, length = keys.length; _i20 < length; ++_i20) {
	      if (_i20 !== 0) {
	        this.write(',');
	      }
	
	      this.write('\'' + keys[_i20] + '\':');
	      values[_i20].accept(this);
	    }
	
	    this.write('}');
	  };
	
	  Unparser.prototype.visitLiteralString = function visitLiteralString(literal) {
	    var escaped = literal.value.replace(/'/g, "\'");
	    this.write('\'' + escaped + '\'');
	  };
	
	  return Unparser;
	}();
	
	var ExpressionCloner = exports.ExpressionCloner = function () {
	  function ExpressionCloner() {
	    
	  }
	
	  ExpressionCloner.prototype.cloneExpressionArray = function cloneExpressionArray(array) {
	    var clonedArray = [];
	    var i = array.length;
	    while (i--) {
	      clonedArray[i] = array[i].accept(this);
	    }
	    return clonedArray;
	  };
	
	  ExpressionCloner.prototype.visitChain = function visitChain(chain) {
	    return new Chain(this.cloneExpressionArray(chain.expressions));
	  };
	
	  ExpressionCloner.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
	    return new BindingBehavior(behavior.expression.accept(this), behavior.name, this.cloneExpressionArray(behavior.args));
	  };
	
	  ExpressionCloner.prototype.visitValueConverter = function visitValueConverter(converter) {
	    return new ValueConverter(converter.expression.accept(this), converter.name, this.cloneExpressionArray(converter.args));
	  };
	
	  ExpressionCloner.prototype.visitAssign = function visitAssign(assign) {
	    return new Assign(assign.target.accept(this), assign.value.accept(this));
	  };
	
	  ExpressionCloner.prototype.visitConditional = function visitConditional(conditional) {
	    return new Conditional(conditional.condition.accept(this), conditional.yes.accept(this), conditional.no.accept(this));
	  };
	
	  ExpressionCloner.prototype.visitAccessThis = function visitAccessThis(access) {
	    return new AccessThis(access.ancestor);
	  };
	
	  ExpressionCloner.prototype.visitAccessScope = function visitAccessScope(access) {
	    return new AccessScope(access.name, access.ancestor);
	  };
	
	  ExpressionCloner.prototype.visitAccessMember = function visitAccessMember(access) {
	    return new AccessMember(access.object.accept(this), access.name);
	  };
	
	  ExpressionCloner.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
	    return new AccessKeyed(access.object.accept(this), access.key.accept(this));
	  };
	
	  ExpressionCloner.prototype.visitCallScope = function visitCallScope(call) {
	    return new CallScope(call.name, this.cloneExpressionArray(call.args), call.ancestor);
	  };
	
	  ExpressionCloner.prototype.visitCallFunction = function visitCallFunction(call) {
	    return new CallFunction(call.func.accept(this), this.cloneExpressionArray(call.args));
	  };
	
	  ExpressionCloner.prototype.visitCallMember = function visitCallMember(call) {
	    return new CallMember(call.object.accept(this), call.name, this.cloneExpressionArray(call.args));
	  };
	
	  ExpressionCloner.prototype.visitPrefix = function visitPrefix(prefix) {
	    return new PrefixNot(prefix.operation, prefix.expression.accept(this));
	  };
	
	  ExpressionCloner.prototype.visitBinary = function visitBinary(binary) {
	    return new Binary(binary.operation, binary.left.accept(this), binary.right.accept(this));
	  };
	
	  ExpressionCloner.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
	    return new LiteralPrimitive(literal);
	  };
	
	  ExpressionCloner.prototype.visitLiteralArray = function visitLiteralArray(literal) {
	    return new LiteralArray(this.cloneExpressionArray(literal.elements));
	  };
	
	  ExpressionCloner.prototype.visitLiteralObject = function visitLiteralObject(literal) {
	    return new LiteralObject(literal.keys, this.cloneExpressionArray(literal.values));
	  };
	
	  ExpressionCloner.prototype.visitLiteralString = function visitLiteralString(literal) {
	    return new LiteralString(literal.value);
	  };
	
	  return ExpressionCloner;
	}();
	
	function cloneExpression(expression) {
	  var visitor = new ExpressionCloner();
	  return expression.accept(visitor);
	}
	
	var bindingMode = exports.bindingMode = {
	  oneTime: 0,
	  oneWay: 1,
	  twoWay: 2
	};
	
	var Token = exports.Token = function () {
	  function Token(index, text) {
	    
	
	    this.index = index;
	    this.text = text;
	  }
	
	  Token.prototype.withOp = function withOp(op) {
	    this.opKey = op;
	    return this;
	  };
	
	  Token.prototype.withGetterSetter = function withGetterSetter(key) {
	    this.key = key;
	    return this;
	  };
	
	  Token.prototype.withValue = function withValue(value) {
	    this.value = value;
	    return this;
	  };
	
	  Token.prototype.toString = function toString() {
	    return 'Token(' + this.text + ')';
	  };
	
	  return Token;
	}();
	
	var Lexer = exports.Lexer = function () {
	  function Lexer() {
	    
	  }
	
	  Lexer.prototype.lex = function lex(text) {
	    var scanner = new Scanner(text);
	    var tokens = [];
	    var token = scanner.scanToken();
	
	    while (token) {
	      tokens.push(token);
	      token = scanner.scanToken();
	    }
	
	    return tokens;
	  };
	
	  return Lexer;
	}();
	
	var Scanner = exports.Scanner = function () {
	  function Scanner(input) {
	    
	
	    this.input = input;
	    this.length = input.length;
	    this.peek = 0;
	    this.index = -1;
	
	    this.advance();
	  }
	
	  Scanner.prototype.scanToken = function scanToken() {
	    while (this.peek <= $SPACE) {
	      if (++this.index >= this.length) {
	        this.peek = $EOF;
	        return null;
	      }
	
	      this.peek = this.input.charCodeAt(this.index);
	    }
	
	    if (isIdentifierStart(this.peek)) {
	      return this.scanIdentifier();
	    }
	
	    if (isDigit(this.peek)) {
	      return this.scanNumber(this.index);
	    }
	
	    var start = this.index;
	
	    switch (this.peek) {
	      case $PERIOD:
	        this.advance();
	        return isDigit(this.peek) ? this.scanNumber(start) : new Token(start, '.');
	      case $LPAREN:
	      case $RPAREN:
	      case $LBRACE:
	      case $RBRACE:
	      case $LBRACKET:
	      case $RBRACKET:
	      case $COMMA:
	      case $COLON:
	      case $SEMICOLON:
	        return this.scanCharacter(start, String.fromCharCode(this.peek));
	      case $SQ:
	      case $DQ:
	        return this.scanString();
	      case $PLUS:
	      case $MINUS:
	      case $STAR:
	      case $SLASH:
	      case $PERCENT:
	      case $CARET:
	      case $QUESTION:
	        return this.scanOperator(start, String.fromCharCode(this.peek));
	      case $LT:
	      case $GT:
	      case $BANG:
	      case $EQ:
	        return this.scanComplexOperator(start, $EQ, String.fromCharCode(this.peek), '=');
	      case $AMPERSAND:
	        return this.scanComplexOperator(start, $AMPERSAND, '&', '&');
	      case $BAR:
	        return this.scanComplexOperator(start, $BAR, '|', '|');
	      case $NBSP:
	        while (isWhitespace(this.peek)) {
	          this.advance();
	        }
	
	        return this.scanToken();
	    }
	
	    var character = String.fromCharCode(this.peek);
	    this.error('Unexpected character [' + character + ']');
	    return null;
	  };
	
	  Scanner.prototype.scanCharacter = function scanCharacter(start, text) {
	    assert(this.peek === text.charCodeAt(0));
	    this.advance();
	    return new Token(start, text);
	  };
	
	  Scanner.prototype.scanOperator = function scanOperator(start, text) {
	    assert(this.peek === text.charCodeAt(0));
	    assert(OPERATORS.indexOf(text) !== -1);
	    this.advance();
	    return new Token(start, text).withOp(text);
	  };
	
	  Scanner.prototype.scanComplexOperator = function scanComplexOperator(start, code, one, two) {
	    assert(this.peek === one.charCodeAt(0));
	    this.advance();
	
	    var text = one;
	
	    if (this.peek === code) {
	      this.advance();
	      text += two;
	    }
	
	    if (this.peek === code) {
	      this.advance();
	      text += two;
	    }
	
	    assert(OPERATORS.indexOf(text) !== -1);
	
	    return new Token(start, text).withOp(text);
	  };
	
	  Scanner.prototype.scanIdentifier = function scanIdentifier() {
	    assert(isIdentifierStart(this.peek));
	    var start = this.index;
	
	    this.advance();
	
	    while (isIdentifierPart(this.peek)) {
	      this.advance();
	    }
	
	    var text = this.input.substring(start, this.index);
	    var result = new Token(start, text);
	
	    if (OPERATORS.indexOf(text) !== -1) {
	      result.withOp(text);
	    } else {
	      result.withGetterSetter(text);
	    }
	
	    return result;
	  };
	
	  Scanner.prototype.scanNumber = function scanNumber(start) {
	    assert(isDigit(this.peek));
	    var simple = this.index === start;
	    this.advance();
	
	    while (true) {
	      if (isDigit(this.peek)) {} else if (this.peek === $PERIOD) {
	          simple = false;
	        } else if (isExponentStart(this.peek)) {
	          this.advance();
	
	          if (isExponentSign(this.peek)) {
	            this.advance();
	          }
	
	          if (!isDigit(this.peek)) {
	            this.error('Invalid exponent', -1);
	          }
	
	          simple = false;
	        } else {
	          break;
	        }
	
	      this.advance();
	    }
	
	    var text = this.input.substring(start, this.index);
	    var value = simple ? parseInt(text, 10) : parseFloat(text);
	    return new Token(start, text).withValue(value);
	  };
	
	  Scanner.prototype.scanString = function scanString() {
	    assert(this.peek === $SQ || this.peek === $DQ);
	
	    var start = this.index;
	    var quote = this.peek;
	
	    this.advance();
	
	    var buffer = void 0;
	    var marker = this.index;
	
	    while (this.peek !== quote) {
	      if (this.peek === $BACKSLASH) {
	        if (!buffer) {
	          buffer = [];
	        }
	
	        buffer.push(this.input.substring(marker, this.index));
	        this.advance();
	
	        var _unescaped = void 0;
	
	        if (this.peek === $u) {
	          var hex = this.input.substring(this.index + 1, this.index + 5);
	
	          if (!/[A-Z0-9]{4}/.test(hex)) {
	            this.error('Invalid unicode escape [\\u' + hex + ']');
	          }
	
	          _unescaped = parseInt(hex, 16);
	
	          for (var _i21 = 0; _i21 < 5; ++_i21) {
	            this.advance();
	          }
	        } else {
	          _unescaped = unescape(this.peek);
	          this.advance();
	        }
	
	        buffer.push(String.fromCharCode(_unescaped));
	        marker = this.index;
	      } else if (this.peek === $EOF) {
	        this.error('Unterminated quote');
	      } else {
	        this.advance();
	      }
	    }
	
	    var last = this.input.substring(marker, this.index);
	    this.advance();
	    var text = this.input.substring(start, this.index);
	
	    var unescaped = last;
	
	    if (buffer !== null && buffer !== undefined) {
	      buffer.push(last);
	      unescaped = buffer.join('');
	    }
	
	    return new Token(start, text).withValue(unescaped);
	  };
	
	  Scanner.prototype.advance = function advance() {
	    if (++this.index >= this.length) {
	      this.peek = $EOF;
	    } else {
	      this.peek = this.input.charCodeAt(this.index);
	    }
	  };
	
	  Scanner.prototype.error = function error(message) {
	    var offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	
	    var position = this.index + offset;
	    throw new Error('Lexer Error: ' + message + ' at column ' + position + ' in expression [' + this.input + ']');
	  };
	
	  return Scanner;
	}();
	
	var OPERATORS = ['undefined', 'null', 'true', 'false', '+', '-', '*', '/', '%', '^', '=', '==', '===', '!=', '!==', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?'];
	
	var $EOF = 0;
	var $TAB = 9;
	var $LF = 10;
	var $VTAB = 11;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $$ = 36;
	var $PERCENT = 37;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $LPAREN = 40;
	var $RPAREN = 41;
	var $STAR = 42;
	var $PLUS = 43;
	var $COMMA = 44;
	var $MINUS = 45;
	var $PERIOD = 46;
	var $SLASH = 47;
	var $COLON = 58;
	var $SEMICOLON = 59;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	
	var $0 = 48;
	var $9 = 57;
	
	var $A = 65;
	var $E = 69;
	var $Z = 90;
	
	var $LBRACKET = 91;
	var $BACKSLASH = 92;
	var $RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	
	var $a = 97;
	var $e = 101;
	var $f = 102;
	var $n = 110;
	var $r = 114;
	var $t = 116;
	var $u = 117;
	var $v = 118;
	var $z = 122;
	
	var $LBRACE = 123;
	var $BAR = 124;
	var $RBRACE = 125;
	var $NBSP = 160;
	
	function isWhitespace(code) {
	  return code >= $TAB && code <= $SPACE || code === $NBSP;
	}
	
	function isIdentifierStart(code) {
	  return $a <= code && code <= $z || $A <= code && code <= $Z || code === $_ || code === $$;
	}
	
	function isIdentifierPart(code) {
	  return $a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code === $_ || code === $$;
	}
	
	function isDigit(code) {
	  return $0 <= code && code <= $9;
	}
	
	function isExponentStart(code) {
	  return code === $e || code === $E;
	}
	
	function isExponentSign(code) {
	  return code === $MINUS || code === $PLUS;
	}
	
	function unescape(code) {
	  switch (code) {
	    case $n:
	      return $LF;
	    case $f:
	      return $FF;
	    case $r:
	      return $CR;
	    case $t:
	      return $TAB;
	    case $v:
	      return $VTAB;
	    default:
	      return code;
	  }
	}
	
	function assert(condition, message) {
	  if (!condition) {
	    throw message || 'Assertion failed';
	  }
	}
	
	var EOF = new Token(-1, null);
	
	var Parser = exports.Parser = function () {
	  function Parser() {
	    
	
	    this.cache = {};
	    this.lexer = new Lexer();
	  }
	
	  Parser.prototype.parse = function parse(input) {
	    input = input || '';
	
	    return this.cache[input] || (this.cache[input] = new ParserImplementation(this.lexer, input).parseChain());
	  };
	
	  return Parser;
	}();
	
	var ParserImplementation = exports.ParserImplementation = function () {
	  function ParserImplementation(lexer, input) {
	    
	
	    this.index = 0;
	    this.input = input;
	    this.tokens = lexer.lex(input);
	  }
	
	  ParserImplementation.prototype.parseChain = function parseChain() {
	    var isChain = false;
	    var expressions = [];
	
	    while (this.optional(';')) {
	      isChain = true;
	    }
	
	    while (this.index < this.tokens.length) {
	      if (this.peek.text === ')' || this.peek.text === '}' || this.peek.text === ']') {
	        this.error('Unconsumed token ' + this.peek.text);
	      }
	
	      var expr = this.parseBindingBehavior();
	      expressions.push(expr);
	
	      while (this.optional(';')) {
	        isChain = true;
	      }
	
	      if (isChain) {
	        this.error('Multiple expressions are not allowed.');
	      }
	    }
	
	    return expressions.length === 1 ? expressions[0] : new Chain(expressions);
	  };
	
	  ParserImplementation.prototype.parseBindingBehavior = function parseBindingBehavior() {
	    var result = this.parseValueConverter();
	
	    while (this.optional('&')) {
	      var name = this.peek.text;
	      var args = [];
	
	      this.advance();
	
	      while (this.optional(':')) {
	        args.push(this.parseExpression());
	      }
	
	      result = new BindingBehavior(result, name, args);
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseValueConverter = function parseValueConverter() {
	    var result = this.parseExpression();
	
	    while (this.optional('|')) {
	      var name = this.peek.text;
	      var args = [];
	
	      this.advance();
	
	      while (this.optional(':')) {
	        args.push(this.parseExpression());
	      }
	
	      result = new ValueConverter(result, name, args, [result].concat(args));
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseExpression = function parseExpression() {
	    var start = this.peek.index;
	    var result = this.parseConditional();
	
	    while (this.peek.text === '=') {
	      if (!result.isAssignable) {
	        var end = this.index < this.tokens.length ? this.peek.index : this.input.length;
	        var _expression = this.input.substring(start, end);
	
	        this.error('Expression ' + _expression + ' is not assignable');
	      }
	
	      this.expect('=');
	      result = new Assign(result, this.parseConditional());
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseConditional = function parseConditional() {
	    var start = this.peek.index;
	    var result = this.parseLogicalOr();
	
	    if (this.optional('?')) {
	      var yes = this.parseExpression();
	
	      if (!this.optional(':')) {
	        var end = this.index < this.tokens.length ? this.peek.index : this.input.length;
	        var _expression2 = this.input.substring(start, end);
	
	        this.error('Conditional expression ' + _expression2 + ' requires all 3 expressions');
	      }
	
	      var no = this.parseExpression();
	      result = new Conditional(result, yes, no);
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseLogicalOr = function parseLogicalOr() {
	    var result = this.parseLogicalAnd();
	
	    while (this.optional('||')) {
	      result = new Binary('||', result, this.parseLogicalAnd());
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseLogicalAnd = function parseLogicalAnd() {
	    var result = this.parseEquality();
	
	    while (this.optional('&&')) {
	      result = new Binary('&&', result, this.parseEquality());
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.parseEquality = function parseEquality() {
	    var result = this.parseRelational();
	
	    while (true) {
	      if (this.optional('==')) {
	        result = new Binary('==', result, this.parseRelational());
	      } else if (this.optional('!=')) {
	        result = new Binary('!=', result, this.parseRelational());
	      } else if (this.optional('===')) {
	        result = new Binary('===', result, this.parseRelational());
	      } else if (this.optional('!==')) {
	        result = new Binary('!==', result, this.parseRelational());
	      } else {
	        return result;
	      }
	    }
	  };
	
	  ParserImplementation.prototype.parseRelational = function parseRelational() {
	    var result = this.parseAdditive();
	
	    while (true) {
	      if (this.optional('<')) {
	        result = new Binary('<', result, this.parseAdditive());
	      } else if (this.optional('>')) {
	        result = new Binary('>', result, this.parseAdditive());
	      } else if (this.optional('<=')) {
	        result = new Binary('<=', result, this.parseAdditive());
	      } else if (this.optional('>=')) {
	        result = new Binary('>=', result, this.parseAdditive());
	      } else {
	        return result;
	      }
	    }
	  };
	
	  ParserImplementation.prototype.parseAdditive = function parseAdditive() {
	    var result = this.parseMultiplicative();
	
	    while (true) {
	      if (this.optional('+')) {
	        result = new Binary('+', result, this.parseMultiplicative());
	      } else if (this.optional('-')) {
	        result = new Binary('-', result, this.parseMultiplicative());
	      } else {
	        return result;
	      }
	    }
	  };
	
	  ParserImplementation.prototype.parseMultiplicative = function parseMultiplicative() {
	    var result = this.parsePrefix();
	
	    while (true) {
	      if (this.optional('*')) {
	        result = new Binary('*', result, this.parsePrefix());
	      } else if (this.optional('%')) {
	        result = new Binary('%', result, this.parsePrefix());
	      } else if (this.optional('/')) {
	        result = new Binary('/', result, this.parsePrefix());
	      } else {
	        return result;
	      }
	    }
	  };
	
	  ParserImplementation.prototype.parsePrefix = function parsePrefix() {
	    if (this.optional('+')) {
	      return this.parsePrefix();
	    } else if (this.optional('-')) {
	        return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());
	      } else if (this.optional('!')) {
	        return new PrefixNot('!', this.parsePrefix());
	      }
	
	    return this.parseAccessOrCallMember();
	  };
	
	  ParserImplementation.prototype.parseAccessOrCallMember = function parseAccessOrCallMember() {
	    var result = this.parsePrimary();
	
	    while (true) {
	      if (this.optional('.')) {
	        var name = this.peek.text;
	
	        this.advance();
	
	        if (this.optional('(')) {
	          var args = this.parseExpressionList(')');
	          this.expect(')');
	          if (result instanceof AccessThis) {
	            result = new CallScope(name, args, result.ancestor);
	          } else {
	            result = new CallMember(result, name, args);
	          }
	        } else {
	          if (result instanceof AccessThis) {
	            result = new AccessScope(name, result.ancestor);
	          } else {
	            result = new AccessMember(result, name);
	          }
	        }
	      } else if (this.optional('[')) {
	        var key = this.parseExpression();
	        this.expect(']');
	        result = new AccessKeyed(result, key);
	      } else if (this.optional('(')) {
	        var _args = this.parseExpressionList(')');
	        this.expect(')');
	        result = new CallFunction(result, _args);
	      } else {
	        return result;
	      }
	    }
	  };
	
	  ParserImplementation.prototype.parsePrimary = function parsePrimary() {
	    if (this.optional('(')) {
	      var result = this.parseExpression();
	      this.expect(')');
	      return result;
	    } else if (this.optional('null')) {
	      return new LiteralPrimitive(null);
	    } else if (this.optional('undefined')) {
	      return new LiteralPrimitive(undefined);
	    } else if (this.optional('true')) {
	      return new LiteralPrimitive(true);
	    } else if (this.optional('false')) {
	      return new LiteralPrimitive(false);
	    } else if (this.optional('[')) {
	      var elements = this.parseExpressionList(']');
	      this.expect(']');
	      return new LiteralArray(elements);
	    } else if (this.peek.text === '{') {
	      return this.parseObject();
	    } else if (this.peek.key !== null && this.peek.key !== undefined) {
	      return this.parseAccessOrCallScope();
	    } else if (this.peek.value !== null && this.peek.value !== undefined) {
	      var value = this.peek.value;
	      this.advance();
	      return value instanceof String || typeof value === 'string' ? new LiteralString(value) : new LiteralPrimitive(value);
	    } else if (this.index >= this.tokens.length) {
	      throw new Error('Unexpected end of expression: ' + this.input);
	    } else {
	      this.error('Unexpected token ' + this.peek.text);
	    }
	  };
	
	  ParserImplementation.prototype.parseAccessOrCallScope = function parseAccessOrCallScope() {
	    var name = this.peek.key;
	
	    this.advance();
	
	    if (name === '$this') {
	      return new AccessThis(0);
	    }
	
	    var ancestor = 0;
	    while (name === '$parent') {
	      ancestor++;
	      if (this.optional('.')) {
	        name = this.peek.key;
	        this.advance();
	      } else if (this.peek === EOF || this.peek.text === '(' || this.peek.text === '[' || this.peek.text === '}') {
	        return new AccessThis(ancestor);
	      } else {
	        this.error('Unexpected token ' + this.peek.text);
	      }
	    }
	
	    if (this.optional('(')) {
	      var args = this.parseExpressionList(')');
	      this.expect(')');
	      return new CallScope(name, args, ancestor);
	    }
	
	    return new AccessScope(name, ancestor);
	  };
	
	  ParserImplementation.prototype.parseObject = function parseObject() {
	    var keys = [];
	    var values = [];
	
	    this.expect('{');
	
	    if (this.peek.text !== '}') {
	      do {
	        var peek = this.peek;
	        var value = peek.value;
	        keys.push(typeof value === 'string' ? value : peek.text);
	
	        this.advance();
	        if (peek.key && (this.peek.text === ',' || this.peek.text === '}')) {
	          --this.index;
	          values.push(this.parseAccessOrCallScope());
	        } else {
	          this.expect(':');
	          values.push(this.parseExpression());
	        }
	      } while (this.optional(','));
	    }
	
	    this.expect('}');
	
	    return new LiteralObject(keys, values);
	  };
	
	  ParserImplementation.prototype.parseExpressionList = function parseExpressionList(terminator) {
	    var result = [];
	
	    if (this.peek.text !== terminator) {
	      do {
	        result.push(this.parseExpression());
	      } while (this.optional(','));
	    }
	
	    return result;
	  };
	
	  ParserImplementation.prototype.optional = function optional(text) {
	    if (this.peek.text === text) {
	      this.advance();
	      return true;
	    }
	
	    return false;
	  };
	
	  ParserImplementation.prototype.expect = function expect(text) {
	    if (this.peek.text === text) {
	      this.advance();
	    } else {
	      this.error('Missing expected ' + text);
	    }
	  };
	
	  ParserImplementation.prototype.advance = function advance() {
	    this.index++;
	  };
	
	  ParserImplementation.prototype.error = function error(message) {
	    var location = this.index < this.tokens.length ? 'at column ' + (this.tokens[this.index].index + 1) + ' in' : 'at the end of the expression';
	
	    throw new Error('Parser Error: ' + message + ' ' + location + ' [' + this.input + ']');
	  };
	
	  _createClass(ParserImplementation, [{
	    key: 'peek',
	    get: function get() {
	      return this.index < this.tokens.length ? this.tokens[this.index] : EOF;
	    }
	  }]);
	
	  return ParserImplementation;
	}();
	
	var mapProto = Map.prototype;
	
	function _getMapObserver(taskQueue, map) {
	  return ModifyMapObserver.for(taskQueue, map);
	}
	
	exports.getMapObserver = _getMapObserver;
	
	var ModifyMapObserver = function (_ModifyCollectionObse2) {
	  _inherits(ModifyMapObserver, _ModifyCollectionObse2);
	
	  function ModifyMapObserver(taskQueue, map) {
	    
	
	    return _possibleConstructorReturn(this, _ModifyCollectionObse2.call(this, taskQueue, map));
	  }
	
	  ModifyMapObserver.for = function _for(taskQueue, map) {
	    if (!('__map_observer__' in map)) {
	      var observer = ModifyMapObserver.create(taskQueue, map);
	      Reflect.defineProperty(map, '__map_observer__', { value: observer, enumerable: false, configurable: false });
	    }
	    return map.__map_observer__;
	  };
	
	  ModifyMapObserver.create = function create(taskQueue, map) {
	    var observer = new ModifyMapObserver(taskQueue, map);
	
	    var proto = mapProto;
	    if (proto.add !== map.add || proto.delete !== map.delete || proto.clear !== map.clear) {
	      proto = {
	        add: map.add,
	        delete: map.delete,
	        clear: map.clear
	      };
	    }
	
	    map.set = function () {
	      var hasValue = map.has(arguments[0]);
	      var type = hasValue ? 'update' : 'add';
	      var oldValue = map.get(arguments[0]);
	      var methodCallResult = proto.set.apply(map, arguments);
	      if (!hasValue || oldValue !== map.get(arguments[0])) {
	        observer.addChangeRecord({
	          type: type,
	          object: map,
	          key: arguments[0],
	          oldValue: oldValue
	        });
	      }
	      return methodCallResult;
	    };
	
	    map.delete = function () {
	      var hasValue = map.has(arguments[0]);
	      var oldValue = map.get(arguments[0]);
	      var methodCallResult = proto.delete.apply(map, arguments);
	      if (hasValue) {
	        observer.addChangeRecord({
	          type: 'delete',
	          object: map,
	          key: arguments[0],
	          oldValue: oldValue
	        });
	      }
	      return methodCallResult;
	    };
	
	    map.clear = function () {
	      var methodCallResult = proto.clear.apply(map, arguments);
	      observer.addChangeRecord({
	        type: 'clear',
	        object: map
	      });
	      return methodCallResult;
	    };
	
	    return observer;
	  };
	
	  return ModifyMapObserver;
	}(ModifyCollectionObserver);
	
	function findOriginalEventTarget(event) {
	  return event.path && event.path[0] || event.deepPath && event.deepPath[0] || event.target;
	}
	
	function handleDelegatedEvent(event) {
	  var target = findOriginalEventTarget(event);
	  var callback = void 0;
	
	  while (target && !callback) {
	    if (target.delegatedCallbacks) {
	      callback = target.delegatedCallbacks[event.type];
	    }
	
	    if (!callback) {
	      target = target.parentNode;
	    }
	  }
	
	  if (callback) {
	    callback(event);
	  }
	}
	
	var DelegateHandlerEntry = function () {
	  function DelegateHandlerEntry(eventName) {
	    
	
	    this.eventName = eventName;
	    this.count = 0;
	  }
	
	  DelegateHandlerEntry.prototype.increment = function increment() {
	    this.count++;
	
	    if (this.count === 1) {
	      _aureliaPal.DOM.addEventListener(this.eventName, handleDelegatedEvent, false);
	    }
	  };
	
	  DelegateHandlerEntry.prototype.decrement = function decrement() {
	    this.count--;
	
	    if (this.count === 0) {
	      _aureliaPal.DOM.removeEventListener(this.eventName, handleDelegatedEvent);
	    }
	  };
	
	  return DelegateHandlerEntry;
	}();
	
	var DefaultEventStrategy = function () {
	  function DefaultEventStrategy() {
	    
	
	    this.delegatedHandlers = [];
	  }
	
	  DefaultEventStrategy.prototype.subscribe = function subscribe(target, targetEvent, callback, delegate) {
	    var _this22 = this;
	
	    if (delegate) {
	      var _ret = function () {
	        var delegatedHandlers = _this22.delegatedHandlers;
	        var handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new DelegateHandlerEntry(targetEvent));
	        var delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});
	
	        handlerEntry.increment();
	        delegatedCallbacks[targetEvent] = callback;
	
	        return {
	          v: function v() {
	            handlerEntry.decrement();
	            delegatedCallbacks[targetEvent] = null;
	          }
	        };
	      }();
	
	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	
	    target.addEventListener(targetEvent, callback, false);
	
	    return function () {
	      target.removeEventListener(targetEvent, callback);
	    };
	  };
	
	  return DefaultEventStrategy;
	}();
	
	var EventManager = exports.EventManager = function () {
	  function EventManager() {
	    
	
	    this.elementHandlerLookup = {};
	    this.eventStrategyLookup = {};
	
	    this.registerElementConfig({
	      tagName: 'input',
	      properties: {
	        value: ['change', 'input'],
	        checked: ['change', 'input'],
	        files: ['change', 'input']
	      }
	    });
	
	    this.registerElementConfig({
	      tagName: 'textarea',
	      properties: {
	        value: ['change', 'input']
	      }
	    });
	
	    this.registerElementConfig({
	      tagName: 'select',
	      properties: {
	        value: ['change']
	      }
	    });
	
	    this.registerElementConfig({
	      tagName: 'content editable',
	      properties: {
	        value: ['change', 'input', 'blur', 'keyup', 'paste']
	      }
	    });
	
	    this.registerElementConfig({
	      tagName: 'scrollable element',
	      properties: {
	        scrollTop: ['scroll'],
	        scrollLeft: ['scroll']
	      }
	    });
	
	    this.defaultEventStrategy = new DefaultEventStrategy();
	  }
	
	  EventManager.prototype.registerElementConfig = function registerElementConfig(config) {
	    var tagName = config.tagName.toLowerCase();
	    var properties = config.properties;
	    var propertyName = void 0;
	
	    this.elementHandlerLookup[tagName] = {};
	
	    for (propertyName in properties) {
	      if (properties.hasOwnProperty(propertyName)) {
	        this.registerElementPropertyConfig(tagName, propertyName, properties[propertyName]);
	      }
	    }
	  };
	
	  EventManager.prototype.registerElementPropertyConfig = function registerElementPropertyConfig(tagName, propertyName, events) {
	    this.elementHandlerLookup[tagName][propertyName] = this.createElementHandler(events);
	  };
	
	  EventManager.prototype.createElementHandler = function createElementHandler(events) {
	    return {
	      subscribe: function subscribe(target, callback) {
	        events.forEach(function (changeEvent) {
	          target.addEventListener(changeEvent, callback, false);
	        });
	
	        return function () {
	          events.forEach(function (changeEvent) {
	            target.removeEventListener(changeEvent, callback);
	          });
	        };
	      }
	    };
	  };
	
	  EventManager.prototype.registerElementHandler = function registerElementHandler(tagName, handler) {
	    this.elementHandlerLookup[tagName.toLowerCase()] = handler;
	  };
	
	  EventManager.prototype.registerEventStrategy = function registerEventStrategy(eventName, strategy) {
	    this.eventStrategyLookup[eventName] = strategy;
	  };
	
	  EventManager.prototype.getElementHandler = function getElementHandler(target, propertyName) {
	    var tagName = void 0;
	    var lookup = this.elementHandlerLookup;
	
	    if (target.tagName) {
	      tagName = target.tagName.toLowerCase();
	
	      if (lookup[tagName] && lookup[tagName][propertyName]) {
	        return lookup[tagName][propertyName];
	      }
	
	      if (propertyName === 'textContent' || propertyName === 'innerHTML') {
	        return lookup['content editable'].value;
	      }
	
	      if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {
	        return lookup['scrollable element'][propertyName];
	      }
	    }
	
	    return null;
	  };
	
	  EventManager.prototype.addEventListener = function addEventListener(target, targetEvent, callback, delegate) {
	    return (this.eventStrategyLookup[targetEvent] || this.defaultEventStrategy).subscribe(target, targetEvent, callback, delegate);
	  };
	
	  return EventManager;
	}();
	
	var DirtyChecker = exports.DirtyChecker = function () {
	  function DirtyChecker() {
	    
	
	    this.tracked = [];
	    this.checkDelay = 120;
	  }
	
	  DirtyChecker.prototype.addProperty = function addProperty(property) {
	    var tracked = this.tracked;
	
	    tracked.push(property);
	
	    if (tracked.length === 1) {
	      this.scheduleDirtyCheck();
	    }
	  };
	
	  DirtyChecker.prototype.removeProperty = function removeProperty(property) {
	    var tracked = this.tracked;
	    tracked.splice(tracked.indexOf(property), 1);
	  };
	
	  DirtyChecker.prototype.scheduleDirtyCheck = function scheduleDirtyCheck() {
	    var _this23 = this;
	
	    setTimeout(function () {
	      return _this23.check();
	    }, this.checkDelay);
	  };
	
	  DirtyChecker.prototype.check = function check() {
	    var tracked = this.tracked;
	    var i = tracked.length;
	
	    while (i--) {
	      var current = tracked[i];
	
	      if (current.isDirty()) {
	        current.call();
	      }
	    }
	
	    if (tracked.length) {
	      this.scheduleDirtyCheck();
	    }
	  };
	
	  return DirtyChecker;
	}();
	
	var DirtyCheckProperty = exports.DirtyCheckProperty = (_dec5 = subscriberCollection(), _dec5(_class5 = function () {
	  function DirtyCheckProperty(dirtyChecker, obj, propertyName) {
	    
	
	    this.dirtyChecker = dirtyChecker;
	    this.obj = obj;
	    this.propertyName = propertyName;
	  }
	
	  DirtyCheckProperty.prototype.getValue = function getValue() {
	    return this.obj[this.propertyName];
	  };
	
	  DirtyCheckProperty.prototype.setValue = function setValue(newValue) {
	    this.obj[this.propertyName] = newValue;
	  };
	
	  DirtyCheckProperty.prototype.call = function call() {
	    var oldValue = this.oldValue;
	    var newValue = this.getValue();
	
	    this.callSubscribers(newValue, oldValue);
	
	    this.oldValue = newValue;
	  };
	
	  DirtyCheckProperty.prototype.isDirty = function isDirty() {
	    return this.oldValue !== this.obj[this.propertyName];
	  };
	
	  DirtyCheckProperty.prototype.subscribe = function subscribe(context, callable) {
	    if (!this.hasSubscribers()) {
	      this.oldValue = this.getValue();
	      this.dirtyChecker.addProperty(this);
	    }
	    this.addSubscriber(context, callable);
	  };
	
	  DirtyCheckProperty.prototype.unsubscribe = function unsubscribe(context, callable) {
	    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
	      this.dirtyChecker.removeProperty(this);
	    }
	  };
	
	  return DirtyCheckProperty;
	}()) || _class5);
	
	
	var logger = LogManager.getLogger('property-observation');
	
	var propertyAccessor = exports.propertyAccessor = {
	  getValue: function getValue(obj, propertyName) {
	    return obj[propertyName];
	  },
	  setValue: function setValue(value, obj, propertyName) {
	    obj[propertyName] = value;
	  }
	};
	
	var PrimitiveObserver = exports.PrimitiveObserver = function () {
	  function PrimitiveObserver(primitive, propertyName) {
	    
	
	    this.doNotCache = true;
	
	    this.primitive = primitive;
	    this.propertyName = propertyName;
	  }
	
	  PrimitiveObserver.prototype.getValue = function getValue() {
	    return this.primitive[this.propertyName];
	  };
	
	  PrimitiveObserver.prototype.setValue = function setValue() {
	    var type = _typeof(this.primitive);
	    throw new Error('The ' + this.propertyName + ' property of a ' + type + ' (' + this.primitive + ') cannot be assigned.');
	  };
	
	  PrimitiveObserver.prototype.subscribe = function subscribe() {};
	
	  PrimitiveObserver.prototype.unsubscribe = function unsubscribe() {};
	
	  return PrimitiveObserver;
	}();
	
	var SetterObserver = exports.SetterObserver = (_dec6 = subscriberCollection(), _dec6(_class7 = function () {
	  function SetterObserver(taskQueue, obj, propertyName) {
	    
	
	    this.taskQueue = taskQueue;
	    this.obj = obj;
	    this.propertyName = propertyName;
	    this.queued = false;
	    this.observing = false;
	  }
	
	  SetterObserver.prototype.getValue = function getValue() {
	    return this.obj[this.propertyName];
	  };
	
	  SetterObserver.prototype.setValue = function setValue(newValue) {
	    this.obj[this.propertyName] = newValue;
	  };
	
	  SetterObserver.prototype.getterValue = function getterValue() {
	    return this.currentValue;
	  };
	
	  SetterObserver.prototype.setterValue = function setterValue(newValue) {
	    var oldValue = this.currentValue;
	
	    if (oldValue !== newValue) {
	      if (!this.queued) {
	        this.oldValue = oldValue;
	        this.queued = true;
	        this.taskQueue.queueMicroTask(this);
	      }
	
	      this.currentValue = newValue;
	    }
	  };
	
	  SetterObserver.prototype.call = function call() {
	    var oldValue = this.oldValue;
	    var newValue = this.currentValue;
	
	    this.queued = false;
	
	    this.callSubscribers(newValue, oldValue);
	  };
	
	  SetterObserver.prototype.subscribe = function subscribe(context, callable) {
	    if (!this.observing) {
	      this.convertProperty();
	    }
	    this.addSubscriber(context, callable);
	  };
	
	  SetterObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    this.removeSubscriber(context, callable);
	  };
	
	  SetterObserver.prototype.convertProperty = function convertProperty() {
	    this.observing = true;
	    this.currentValue = this.obj[this.propertyName];
	    this.setValue = this.setterValue;
	    this.getValue = this.getterValue;
	
	    if (!Reflect.defineProperty(this.obj, this.propertyName, {
	      configurable: true,
	      enumerable: this.propertyName in this.obj ? this.obj.propertyIsEnumerable(this.propertyName) : true,
	      get: this.getValue.bind(this),
	      set: this.setValue.bind(this)
	    })) {
	      logger.warn('Cannot observe property \'' + this.propertyName + '\' of object', this.obj);
	    }
	  };
	
	  return SetterObserver;
	}()) || _class7);
	
	var XLinkAttributeObserver = exports.XLinkAttributeObserver = function () {
	  function XLinkAttributeObserver(element, propertyName, attributeName) {
	    
	
	    this.element = element;
	    this.propertyName = propertyName;
	    this.attributeName = attributeName;
	  }
	
	  XLinkAttributeObserver.prototype.getValue = function getValue() {
	    return this.element.getAttributeNS('http://www.w3.org/1999/xlink', this.attributeName);
	  };
	
	  XLinkAttributeObserver.prototype.setValue = function setValue(newValue) {
	    return this.element.setAttributeNS('http://www.w3.org/1999/xlink', this.attributeName, newValue);
	  };
	
	  XLinkAttributeObserver.prototype.subscribe = function subscribe() {
	    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
	  };
	
	  return XLinkAttributeObserver;
	}();
	
	var dataAttributeAccessor = exports.dataAttributeAccessor = {
	  getValue: function getValue(obj, propertyName) {
	    return obj.getAttribute(propertyName);
	  },
	  setValue: function setValue(value, obj, propertyName) {
	    return obj.setAttribute(propertyName, value);
	  }
	};
	
	var DataAttributeObserver = exports.DataAttributeObserver = function () {
	  function DataAttributeObserver(element, propertyName) {
	    
	
	    this.element = element;
	    this.propertyName = propertyName;
	  }
	
	  DataAttributeObserver.prototype.getValue = function getValue() {
	    return this.element.getAttribute(this.propertyName);
	  };
	
	  DataAttributeObserver.prototype.setValue = function setValue(newValue) {
	    return this.element.setAttribute(this.propertyName, newValue);
	  };
	
	  DataAttributeObserver.prototype.subscribe = function subscribe() {
	    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
	  };
	
	  return DataAttributeObserver;
	}();
	
	var StyleObserver = exports.StyleObserver = function () {
	  function StyleObserver(element, propertyName) {
	    
	
	    this.element = element;
	    this.propertyName = propertyName;
	
	    this.styles = null;
	    this.version = 0;
	  }
	
	  StyleObserver.prototype.getValue = function getValue() {
	    return this.element.style.cssText;
	  };
	
	  StyleObserver.prototype.setValue = function setValue(newValue) {
	    var styles = this.styles || {};
	    var style = void 0;
	    var version = this.version;
	
	    if (newValue !== null && newValue !== undefined) {
	      if (newValue instanceof Object) {
	        for (style in newValue) {
	          if (newValue.hasOwnProperty(style)) {
	            styles[style] = version;
	            this.element.style[style] = newValue[style];
	          }
	        }
	      } else if (newValue.length) {
	        var pairs = newValue.split(/(?:;|:(?!\/))\s*/);
	        for (var _i22 = 0, length = pairs.length; _i22 < length; _i22++) {
	          style = pairs[_i22].trim();
	          if (!style) {
	            continue;
	          }
	
	          styles[style] = version;
	
	          this.element.style[style] = pairs[++_i22];
	        }
	      }
	    }
	
	    this.styles = styles;
	    this.version += 1;
	
	    if (version === 0) {
	      return;
	    }
	
	    version -= 1;
	    for (style in styles) {
	      if (!styles.hasOwnProperty(style) || styles[style] !== version) {
	        continue;
	      }
	
	      this.element.style[style] = '';
	    }
	  };
	
	  StyleObserver.prototype.subscribe = function subscribe() {
	    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
	  };
	
	  return StyleObserver;
	}();
	
	var ValueAttributeObserver = exports.ValueAttributeObserver = (_dec7 = subscriberCollection(), _dec7(_class8 = function () {
	  function ValueAttributeObserver(element, propertyName, handler) {
	    
	
	    this.element = element;
	    this.propertyName = propertyName;
	    this.handler = handler;
	    if (propertyName === 'files') {
	      this.setValue = function () {};
	    }
	  }
	
	  ValueAttributeObserver.prototype.getValue = function getValue() {
	    return this.element[this.propertyName];
	  };
	
	  ValueAttributeObserver.prototype.setValue = function setValue(newValue) {
	    newValue = newValue === undefined || newValue === null ? '' : newValue;
	    if (this.element[this.propertyName] !== newValue) {
	      this.element[this.propertyName] = newValue;
	      this.notify();
	    }
	  };
	
	  ValueAttributeObserver.prototype.notify = function notify() {
	    var oldValue = this.oldValue;
	    var newValue = this.getValue();
	
	    this.callSubscribers(newValue, oldValue);
	
	    this.oldValue = newValue;
	  };
	
	  ValueAttributeObserver.prototype.subscribe = function subscribe(context, callable) {
	    if (!this.hasSubscribers()) {
	      this.oldValue = this.getValue();
	      this.disposeHandler = this.handler.subscribe(this.element, this.notify.bind(this));
	    }
	
	    this.addSubscriber(context, callable);
	  };
	
	  ValueAttributeObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
	      this.disposeHandler();
	      this.disposeHandler = null;
	    }
	  };
	
	  return ValueAttributeObserver;
	}()) || _class8);
	
	
	var checkedArrayContext = 'CheckedObserver:array';
	var checkedValueContext = 'CheckedObserver:value';
	
	var CheckedObserver = exports.CheckedObserver = (_dec8 = subscriberCollection(), _dec8(_class9 = function () {
	  function CheckedObserver(element, handler, observerLocator) {
	    
	
	    this.element = element;
	    this.handler = handler;
	    this.observerLocator = observerLocator;
	  }
	
	  CheckedObserver.prototype.getValue = function getValue() {
	    return this.value;
	  };
	
	  CheckedObserver.prototype.setValue = function setValue(newValue) {
	    if (this.value === newValue) {
	      return;
	    }
	
	    if (this.arrayObserver) {
	      this.arrayObserver.unsubscribe(checkedArrayContext, this);
	      this.arrayObserver = null;
	    }
	
	    if (this.element.type === 'checkbox' && Array.isArray(newValue)) {
	      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
	      this.arrayObserver.subscribe(checkedArrayContext, this);
	    }
	
	    this.oldValue = this.value;
	    this.value = newValue;
	    this.synchronizeElement();
	    this.notify();
	
	    if (!this.initialSync) {
	      this.initialSync = true;
	      this.observerLocator.taskQueue.queueMicroTask(this);
	    }
	  };
	
	  CheckedObserver.prototype.call = function call(context, splices) {
	    this.synchronizeElement();
	
	    if (!this.valueObserver && (this.valueObserver = this.element.__observers__.model || this.element.__observers__.value)) {
	      this.valueObserver.subscribe(checkedValueContext, this);
	    }
	  };
	
	  CheckedObserver.prototype.synchronizeElement = function synchronizeElement() {
	    var value = this.value;
	    var element = this.element;
	    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
	    var isRadio = element.type === 'radio';
	    var matcher = element.matcher || function (a, b) {
	      return a === b;
	    };
	
	    element.checked = isRadio && !!matcher(value, elementValue) || !isRadio && value === true || !isRadio && Array.isArray(value) && !!value.find(function (item) {
	      return !!matcher(item, elementValue);
	    });
	  };
	
	  CheckedObserver.prototype.synchronizeValue = function synchronizeValue() {
	    var value = this.value;
	    var element = this.element;
	    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
	    var index = void 0;
	    var matcher = element.matcher || function (a, b) {
	      return a === b;
	    };
	
	    if (element.type === 'checkbox') {
	      if (Array.isArray(value)) {
	        index = value.findIndex(function (item) {
	          return !!matcher(item, elementValue);
	        });
	        if (element.checked && index === -1) {
	          value.push(elementValue);
	        } else if (!element.checked && index !== -1) {
	          value.splice(index, 1);
	        }
	
	        return;
	      }
	
	      value = element.checked;
	    } else if (element.checked) {
	      value = elementValue;
	    } else {
	      return;
	    }
	
	    this.oldValue = this.value;
	    this.value = value;
	    this.notify();
	  };
	
	  CheckedObserver.prototype.notify = function notify() {
	    var oldValue = this.oldValue;
	    var newValue = this.value;
	
	    this.callSubscribers(newValue, oldValue);
	  };
	
	  CheckedObserver.prototype.subscribe = function subscribe(context, callable) {
	    if (!this.hasSubscribers()) {
	      this.disposeHandler = this.handler.subscribe(this.element, this.synchronizeValue.bind(this, false));
	    }
	    this.addSubscriber(context, callable);
	  };
	
	  CheckedObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
	      this.disposeHandler();
	      this.disposeHandler = null;
	    }
	  };
	
	  CheckedObserver.prototype.unbind = function unbind() {
	    if (this.arrayObserver) {
	      this.arrayObserver.unsubscribe(checkedArrayContext, this);
	      this.arrayObserver = null;
	    }
	    if (this.valueObserver) {
	      this.valueObserver.unsubscribe(checkedValueContext, this);
	    }
	  };
	
	  return CheckedObserver;
	}()) || _class9);
	
	
	var selectArrayContext = 'SelectValueObserver:array';
	
	var SelectValueObserver = exports.SelectValueObserver = (_dec9 = subscriberCollection(), _dec9(_class10 = function () {
	  function SelectValueObserver(element, handler, observerLocator) {
	    
	
	    this.element = element;
	    this.handler = handler;
	    this.observerLocator = observerLocator;
	  }
	
	  SelectValueObserver.prototype.getValue = function getValue() {
	    return this.value;
	  };
	
	  SelectValueObserver.prototype.setValue = function setValue(newValue) {
	    if (newValue !== null && newValue !== undefined && this.element.multiple && !Array.isArray(newValue)) {
	      throw new Error('Only null or Array instances can be bound to a multi-select.');
	    }
	    if (this.value === newValue) {
	      return;
	    }
	
	    if (this.arrayObserver) {
	      this.arrayObserver.unsubscribe(selectArrayContext, this);
	      this.arrayObserver = null;
	    }
	
	    if (Array.isArray(newValue)) {
	      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
	      this.arrayObserver.subscribe(selectArrayContext, this);
	    }
	
	    this.oldValue = this.value;
	    this.value = newValue;
	    this.synchronizeOptions();
	    this.notify();
	
	    if (!this.initialSync) {
	      this.initialSync = true;
	      this.observerLocator.taskQueue.queueMicroTask(this);
	    }
	  };
	
	  SelectValueObserver.prototype.call = function call(context, splices) {
	    this.synchronizeOptions();
	  };
	
	  SelectValueObserver.prototype.synchronizeOptions = function synchronizeOptions() {
	    var value = this.value;
	    var clear = void 0;
	    var isArray = void 0;
	
	    if (value === null || value === undefined) {
	      clear = true;
	    } else if (Array.isArray(value)) {
	      isArray = true;
	    }
	
	    var options = this.element.options;
	    var i = options.length;
	    var matcher = this.element.matcher || function (a, b) {
	      return a === b;
	    };
	
	    var _loop = function _loop() {
	      var option = options.item(i);
	      if (clear) {
	        option.selected = false;
	        return 'continue';
	      }
	      var optionValue = option.hasOwnProperty('model') ? option.model : option.value;
	      if (isArray) {
	        option.selected = !!value.find(function (item) {
	          return !!matcher(optionValue, item);
	        });
	        return 'continue';
	      }
	      option.selected = !!matcher(optionValue, value);
	    };
	
	    while (i--) {
	      var _ret2 = _loop();
	
	      if (_ret2 === 'continue') continue;
	    }
	  };
	
	  SelectValueObserver.prototype.synchronizeValue = function synchronizeValue() {
	    var _this24 = this;
	
	    var options = this.element.options;
	    var count = 0;
	    var value = [];
	
	    for (var _i23 = 0, ii = options.length; _i23 < ii; _i23++) {
	      var _option = options.item(_i23);
	      if (!_option.selected) {
	        continue;
	      }
	      value.push(_option.hasOwnProperty('model') ? _option.model : _option.value);
	      count++;
	    }
	
	    if (this.element.multiple) {
	      if (Array.isArray(this.value)) {
	        var _ret3 = function () {
	          var matcher = _this24.element.matcher || function (a, b) {
	            return a === b;
	          };
	
	          var i = 0;
	
	          var _loop2 = function _loop2() {
	            var a = _this24.value[i];
	            if (value.findIndex(function (b) {
	              return matcher(a, b);
	            }) === -1) {
	              _this24.value.splice(i, 1);
	            } else {
	              i++;
	            }
	          };
	
	          while (i < _this24.value.length) {
	            _loop2();
	          }
	
	          i = 0;
	
	          var _loop3 = function _loop3() {
	            var a = value[i];
	            if (_this24.value.findIndex(function (b) {
	              return matcher(a, b);
	            }) === -1) {
	              _this24.value.push(a);
	            }
	            i++;
	          };
	
	          while (i < value.length) {
	            _loop3();
	          }
	          return {
	            v: void 0
	          };
	        }();
	
	        if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
	      }
	    } else {
	        if (count === 0) {
	          value = null;
	        } else {
	          value = value[0];
	        }
	      }
	
	    if (value !== this.value) {
	      this.oldValue = this.value;
	      this.value = value;
	      this.notify();
	    }
	  };
	
	  SelectValueObserver.prototype.notify = function notify() {
	    var oldValue = this.oldValue;
	    var newValue = this.value;
	
	    this.callSubscribers(newValue, oldValue);
	  };
	
	  SelectValueObserver.prototype.subscribe = function subscribe(context, callable) {
	    if (!this.hasSubscribers()) {
	      this.disposeHandler = this.handler.subscribe(this.element, this.synchronizeValue.bind(this, false));
	    }
	    this.addSubscriber(context, callable);
	  };
	
	  SelectValueObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
	      this.disposeHandler();
	      this.disposeHandler = null;
	    }
	  };
	
	  SelectValueObserver.prototype.bind = function bind() {
	    var _this25 = this;
	
	    this.domObserver = _aureliaPal.DOM.createMutationObserver(function () {
	      _this25.synchronizeOptions();
	      _this25.synchronizeValue();
	    });
	    this.domObserver.observe(this.element, { childList: true, subtree: true });
	  };
	
	  SelectValueObserver.prototype.unbind = function unbind() {
	    this.domObserver.disconnect();
	    this.domObserver = null;
	
	    if (this.arrayObserver) {
	      this.arrayObserver.unsubscribe(selectArrayContext, this);
	      this.arrayObserver = null;
	    }
	  };
	
	  return SelectValueObserver;
	}()) || _class10);
	
	var ClassObserver = exports.ClassObserver = function () {
	  function ClassObserver(element) {
	    
	
	    this.element = element;
	    this.doNotCache = true;
	    this.value = '';
	    this.version = 0;
	  }
	
	  ClassObserver.prototype.getValue = function getValue() {
	    return this.value;
	  };
	
	  ClassObserver.prototype.setValue = function setValue(newValue) {
	    var nameIndex = this.nameIndex || {};
	    var version = this.version;
	    var names = void 0;
	    var name = void 0;
	
	    if (newValue !== null && newValue !== undefined && newValue.length) {
	      names = newValue.split(/\s+/);
	      for (var _i24 = 0, length = names.length; _i24 < length; _i24++) {
	        name = names[_i24];
	        if (name === '') {
	          continue;
	        }
	        nameIndex[name] = version;
	        this.element.classList.add(name);
	      }
	    }
	
	    this.value = newValue;
	    this.nameIndex = nameIndex;
	    this.version += 1;
	
	    if (version === 0) {
	      return;
	    }
	
	    version -= 1;
	    for (name in nameIndex) {
	      if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {
	        continue;
	      }
	      this.element.classList.remove(name);
	    }
	  };
	
	  ClassObserver.prototype.subscribe = function subscribe() {
	    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "class" property is not supported.');
	  };
	
	  return ClassObserver;
	}();
	
	function hasDeclaredDependencies(descriptor) {
	  return !!(descriptor && descriptor.get && descriptor.get.dependencies);
	}
	
	function declarePropertyDependencies(ctor, propertyName, dependencies) {
	  var descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, propertyName);
	  descriptor.get.dependencies = dependencies;
	}
	
	function computedFrom() {
	  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
	    rest[_key] = arguments[_key];
	  }
	
	  return function (target, key, descriptor) {
	    descriptor.get.dependencies = rest;
	    return descriptor;
	  };
	}
	
	var ComputedExpression = exports.ComputedExpression = function (_Expression19) {
	  _inherits(ComputedExpression, _Expression19);
	
	  function ComputedExpression(name, dependencies) {
	    
	
	    var _this26 = _possibleConstructorReturn(this, _Expression19.call(this));
	
	    _this26.name = name;
	    _this26.dependencies = dependencies;
	    _this26.isAssignable = true;
	    return _this26;
	  }
	
	  ComputedExpression.prototype.evaluate = function evaluate(scope, lookupFunctions) {
	    return scope.bindingContext[this.name];
	  };
	
	  ComputedExpression.prototype.assign = function assign(scope, value) {
	    scope.bindingContext[this.name] = value;
	  };
	
	  ComputedExpression.prototype.accept = function accept(visitor) {
	    throw new Error('not implemented');
	  };
	
	  ComputedExpression.prototype.connect = function connect(binding, scope) {
	    var dependencies = this.dependencies;
	    var i = dependencies.length;
	    while (i--) {
	      dependencies[i].connect(binding, scope);
	    }
	  };
	
	  return ComputedExpression;
	}(Expression);
	
	function createComputedObserver(obj, propertyName, descriptor, observerLocator) {
	  var dependencies = descriptor.get.dependencies;
	  if (!(dependencies instanceof ComputedExpression)) {
	    var _i25 = dependencies.length;
	    while (_i25--) {
	      dependencies[_i25] = observerLocator.parser.parse(dependencies[_i25]);
	    }
	    dependencies = descriptor.get.dependencies = new ComputedExpression(propertyName, dependencies);
	  }
	
	  var scope = { bindingContext: obj, overrideContext: createOverrideContext(obj) };
	  return new ExpressionObserver(scope, dependencies, observerLocator);
	}
	
	var elements = exports.elements = {
	  a: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'target', 'transform', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  altGlyph: ['class', 'dx', 'dy', 'externalResourcesRequired', 'format', 'glyphRef', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  altGlyphDef: ['id', 'xml:base', 'xml:lang', 'xml:space'],
	  altGlyphItem: ['id', 'xml:base', 'xml:lang', 'xml:space'],
	  animate: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  animateColor: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  animateMotion: ['accumulate', 'additive', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keyPoints', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'origin', 'path', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'rotate', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  animateTransform: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'type', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  circle: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'r', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  clipPath: ['class', 'clipPathUnits', 'externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  'color-profile': ['id', 'local', 'name', 'rendering-intent', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  cursor: ['externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  defs: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  desc: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
	  ellipse: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  feBlend: ['class', 'height', 'id', 'in', 'in2', 'mode', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feColorMatrix: ['class', 'height', 'id', 'in', 'result', 'style', 'type', 'values', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feComponentTransfer: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feComposite: ['class', 'height', 'id', 'in', 'in2', 'k1', 'k2', 'k3', 'k4', 'operator', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feConvolveMatrix: ['bias', 'class', 'divisor', 'edgeMode', 'height', 'id', 'in', 'kernelMatrix', 'kernelUnitLength', 'order', 'preserveAlpha', 'result', 'style', 'targetX', 'targetY', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feDiffuseLighting: ['class', 'diffuseConstant', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feDisplacementMap: ['class', 'height', 'id', 'in', 'in2', 'result', 'scale', 'style', 'width', 'x', 'xChannelSelector', 'xml:base', 'xml:lang', 'xml:space', 'y', 'yChannelSelector'],
	  feDistantLight: ['azimuth', 'elevation', 'id', 'xml:base', 'xml:lang', 'xml:space'],
	  feFlood: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feFuncA: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
	  feFuncB: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
	  feFuncG: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
	  feFuncR: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
	  feGaussianBlur: ['class', 'height', 'id', 'in', 'result', 'stdDeviation', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feImage: ['class', 'externalResourcesRequired', 'height', 'id', 'preserveAspectRatio', 'result', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feMerge: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feMergeNode: ['id', 'xml:base', 'xml:lang', 'xml:space'],
	  feMorphology: ['class', 'height', 'id', 'in', 'operator', 'radius', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feOffset: ['class', 'dx', 'dy', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  fePointLight: ['id', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
	  feSpecularLighting: ['class', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'specularConstant', 'specularExponent', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feSpotLight: ['id', 'limitingConeAngle', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'specularExponent', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
	  feTile: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  feTurbulence: ['baseFrequency', 'class', 'height', 'id', 'numOctaves', 'result', 'seed', 'stitchTiles', 'style', 'type', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  filter: ['class', 'externalResourcesRequired', 'filterRes', 'filterUnits', 'height', 'id', 'primitiveUnits', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  font: ['class', 'externalResourcesRequired', 'horiz-adv-x', 'horiz-origin-x', 'horiz-origin-y', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
	  'font-face': ['accent-height', 'alphabetic', 'ascent', 'bbox', 'cap-height', 'descent', 'font-family', 'font-size', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'hanging', 'id', 'ideographic', 'mathematical', 'overline-position', 'overline-thickness', 'panose-1', 'slope', 'stemh', 'stemv', 'strikethrough-position', 'strikethrough-thickness', 'underline-position', 'underline-thickness', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'widths', 'x-height', 'xml:base', 'xml:lang', 'xml:space'],
	  'font-face-format': ['id', 'string', 'xml:base', 'xml:lang', 'xml:space'],
	  'font-face-name': ['id', 'name', 'xml:base', 'xml:lang', 'xml:space'],
	  'font-face-src': ['id', 'xml:base', 'xml:lang', 'xml:space'],
	  'font-face-uri': ['id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  foreignObject: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  g: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  glyph: ['arabic-form', 'class', 'd', 'glyph-name', 'horiz-adv-x', 'id', 'lang', 'orientation', 'style', 'unicode', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
	  glyphRef: ['class', 'dx', 'dy', 'format', 'glyphRef', 'id', 'style', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  hkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space'],
	  image: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  line: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'x1', 'x2', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
	  linearGradient: ['class', 'externalResourcesRequired', 'gradientTransform', 'gradientUnits', 'id', 'spreadMethod', 'style', 'x1', 'x2', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
	  marker: ['class', 'externalResourcesRequired', 'id', 'markerHeight', 'markerUnits', 'markerWidth', 'orient', 'preserveAspectRatio', 'refX', 'refY', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
	  mask: ['class', 'externalResourcesRequired', 'height', 'id', 'maskContentUnits', 'maskUnits', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  metadata: ['id', 'xml:base', 'xml:lang', 'xml:space'],
	  'missing-glyph': ['class', 'd', 'horiz-adv-x', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
	  mpath: ['externalResourcesRequired', 'id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  path: ['class', 'd', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'pathLength', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  pattern: ['class', 'externalResourcesRequired', 'height', 'id', 'patternContentUnits', 'patternTransform', 'patternUnits', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'viewBox', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  polygon: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  polyline: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  radialGradient: ['class', 'cx', 'cy', 'externalResourcesRequired', 'fx', 'fy', 'gradientTransform', 'gradientUnits', 'id', 'r', 'spreadMethod', 'style', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  rect: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  script: ['externalResourcesRequired', 'id', 'type', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  set: ['attributeName', 'attributeType', 'begin', 'dur', 'end', 'externalResourcesRequired', 'fill', 'id', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  stop: ['class', 'id', 'offset', 'style', 'xml:base', 'xml:lang', 'xml:space'],
	  style: ['id', 'media', 'title', 'type', 'xml:base', 'xml:lang', 'xml:space'],
	  svg: ['baseProfile', 'class', 'contentScriptType', 'contentStyleType', 'externalResourcesRequired', 'height', 'id', 'onabort', 'onactivate', 'onclick', 'onerror', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onresize', 'onscroll', 'onunload', 'onzoom', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'version', 'viewBox', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'zoomAndPan'],
	  switch: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
	  symbol: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
	  text: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'transform', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  textPath: ['class', 'externalResourcesRequired', 'id', 'lengthAdjust', 'method', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'spacing', 'startOffset', 'style', 'systemLanguage', 'textLength', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
	  title: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
	  tref: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  tspan: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  use: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
	  view: ['externalResourcesRequired', 'id', 'preserveAspectRatio', 'viewBox', 'viewTarget', 'xml:base', 'xml:lang', 'xml:space', 'zoomAndPan'],
	  vkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']
	};
	var presentationElements = exports.presentationElements = {
	  'a': true,
	  'altGlyph': true,
	  'animate': true,
	  'animateColor': true,
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'feBlend': true,
	  'feColorMatrix': true,
	  'feComponentTransfer': true,
	  'feComposite': true,
	  'feConvolveMatrix': true,
	  'feDiffuseLighting': true,
	  'feDisplacementMap': true,
	  'feFlood': true,
	  'feGaussianBlur': true,
	  'feImage': true,
	  'feMerge': true,
	  'feMorphology': true,
	  'feOffset': true,
	  'feSpecularLighting': true,
	  'feTile': true,
	  'feTurbulence': true,
	  'filter': true,
	  'font': true,
	  'foreignObject': true,
	  'g': true,
	  'glyph': true,
	  'glyphRef': true,
	  'image': true,
	  'line': true,
	  'linearGradient': true,
	  'marker': true,
	  'mask': true,
	  'missing-glyph': true,
	  'path': true,
	  'pattern': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'svg': true,
	  'switch': true,
	  'symbol': true,
	  'text': true,
	  'textPath': true,
	  'tref': true,
	  'tspan': true,
	  'use': true
	};
	
	var presentationAttributes = exports.presentationAttributes = {
	  'alignment-baseline': true,
	  'baseline-shift': true,
	  'clip-path': true,
	  'clip-rule': true,
	  'clip': true,
	  'color-interpolation-filters': true,
	  'color-interpolation': true,
	  'color-profile': true,
	  'color-rendering': true,
	  'color': true,
	  'cursor': true,
	  'direction': true,
	  'display': true,
	  'dominant-baseline': true,
	  'enable-background': true,
	  'fill-opacity': true,
	  'fill-rule': true,
	  'fill': true,
	  'filter': true,
	  'flood-color': true,
	  'flood-opacity': true,
	  'font-family': true,
	  'font-size-adjust': true,
	  'font-size': true,
	  'font-stretch': true,
	  'font-style': true,
	  'font-variant': true,
	  'font-weight': true,
	  'glyph-orientation-horizontal': true,
	  'glyph-orientation-vertical': true,
	  'image-rendering': true,
	  'kerning': true,
	  'letter-spacing': true,
	  'lighting-color': true,
	  'marker-end': true,
	  'marker-mid': true,
	  'marker-start': true,
	  'mask': true,
	  'opacity': true,
	  'overflow': true,
	  'pointer-events': true,
	  'shape-rendering': true,
	  'stop-color': true,
	  'stop-opacity': true,
	  'stroke-dasharray': true,
	  'stroke-dashoffset': true,
	  'stroke-linecap': true,
	  'stroke-linejoin': true,
	  'stroke-miterlimit': true,
	  'stroke-opacity': true,
	  'stroke-width': true,
	  'stroke': true,
	  'text-anchor': true,
	  'text-decoration': true,
	  'text-rendering': true,
	  'unicode-bidi': true,
	  'visibility': true,
	  'word-spacing': true,
	  'writing-mode': true
	};
	
	function createElement(html) {
	  var div = _aureliaPal.DOM.createElement('div');
	  div.innerHTML = html;
	  return div.firstChild;
	}
	
	var SVGAnalyzer = exports.SVGAnalyzer = function () {
	  function SVGAnalyzer() {
	    
	
	    if (createElement('<svg><altGlyph /></svg>').firstElementChild.nodeName === 'altglyph' && elements.altGlyph) {
	      elements.altglyph = elements.altGlyph;
	      delete elements.altGlyph;
	      elements.altglyphdef = elements.altGlyphDef;
	      delete elements.altGlyphDef;
	      elements.altglyphitem = elements.altGlyphItem;
	      delete elements.altGlyphItem;
	      elements.glyphref = elements.glyphRef;
	      delete elements.glyphRef;
	    }
	  }
	
	  SVGAnalyzer.prototype.isStandardSvgAttribute = function isStandardSvgAttribute(nodeName, attributeName) {
	    return presentationElements[nodeName] && presentationAttributes[attributeName] || elements[nodeName] && elements[nodeName].indexOf(attributeName) !== -1;
	  };
	
	  return SVGAnalyzer;
	}();
	
	var ObserverLocator = exports.ObserverLocator = (_temp = _class11 = function () {
	  function ObserverLocator(taskQueue, eventManager, dirtyChecker, svgAnalyzer, parser) {
	    
	
	    this.taskQueue = taskQueue;
	    this.eventManager = eventManager;
	    this.dirtyChecker = dirtyChecker;
	    this.svgAnalyzer = svgAnalyzer;
	    this.parser = parser;
	    this.adapters = [];
	    this.logger = LogManager.getLogger('observer-locator');
	  }
	
	  ObserverLocator.prototype.getObserver = function getObserver(obj, propertyName) {
	    var observersLookup = obj.__observers__;
	    var observer = void 0;
	
	    if (observersLookup && propertyName in observersLookup) {
	      return observersLookup[propertyName];
	    }
	
	    observer = this.createPropertyObserver(obj, propertyName);
	
	    if (!observer.doNotCache) {
	      if (observersLookup === undefined) {
	        observersLookup = this.getOrCreateObserversLookup(obj);
	      }
	
	      observersLookup[propertyName] = observer;
	    }
	
	    return observer;
	  };
	
	  ObserverLocator.prototype.getOrCreateObserversLookup = function getOrCreateObserversLookup(obj) {
	    return obj.__observers__ || this.createObserversLookup(obj);
	  };
	
	  ObserverLocator.prototype.createObserversLookup = function createObserversLookup(obj) {
	    var value = {};
	
	    if (!Reflect.defineProperty(obj, '__observers__', {
	      enumerable: false,
	      configurable: false,
	      writable: false,
	      value: value
	    })) {
	      this.logger.warn('Cannot add observers to object', obj);
	    }
	
	    return value;
	  };
	
	  ObserverLocator.prototype.addAdapter = function addAdapter(adapter) {
	    this.adapters.push(adapter);
	  };
	
	  ObserverLocator.prototype.getAdapterObserver = function getAdapterObserver(obj, propertyName, descriptor) {
	    for (var _i26 = 0, ii = this.adapters.length; _i26 < ii; _i26++) {
	      var adapter = this.adapters[_i26];
	      var observer = adapter.getObserver(obj, propertyName, descriptor);
	      if (observer) {
	        return observer;
	      }
	    }
	    return null;
	  };
	
	  ObserverLocator.prototype.createPropertyObserver = function createPropertyObserver(obj, propertyName) {
	    var descriptor = void 0;
	    var handler = void 0;
	    var xlinkResult = void 0;
	
	    if (!(obj instanceof Object)) {
	      return new PrimitiveObserver(obj, propertyName);
	    }
	
	    if (obj instanceof _aureliaPal.DOM.Element) {
	      if (propertyName === 'class') {
	        return new ClassObserver(obj);
	      }
	      if (propertyName === 'style' || propertyName === 'css') {
	        return new StyleObserver(obj, propertyName);
	      }
	      handler = this.eventManager.getElementHandler(obj, propertyName);
	      if (propertyName === 'value' && obj.tagName.toLowerCase() === 'select') {
	        return new SelectValueObserver(obj, handler, this);
	      }
	      if (propertyName === 'checked' && obj.tagName.toLowerCase() === 'input') {
	        return new CheckedObserver(obj, handler, this);
	      }
	      if (handler) {
	        return new ValueAttributeObserver(obj, propertyName, handler);
	      }
	      xlinkResult = /^xlink:(.+)$/.exec(propertyName);
	      if (xlinkResult) {
	        return new XLinkAttributeObserver(obj, propertyName, xlinkResult[1]);
	      }
	      if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
	        return new DataAttributeObserver(obj, propertyName);
	      }
	    }
	
	    descriptor = Object.getPropertyDescriptor(obj, propertyName);
	
	    if (hasDeclaredDependencies(descriptor)) {
	      return createComputedObserver(obj, propertyName, descriptor, this);
	    }
	
	    var existingGetterOrSetter = void 0;
	    if (descriptor && (existingGetterOrSetter = descriptor.get || descriptor.set)) {
	      if (existingGetterOrSetter.getObserver) {
	        return existingGetterOrSetter.getObserver(obj);
	      }
	
	      var adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);
	      if (adapterObserver) {
	        return adapterObserver;
	      }
	      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
	    }
	
	    if (obj instanceof Array) {
	      if (propertyName === 'length') {
	        return this.getArrayObserver(obj).getLengthObserver();
	      }
	
	      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
	    } else if (obj instanceof Map) {
	      if (propertyName === 'size') {
	        return this.getMapObserver(obj).getLengthObserver();
	      }
	
	      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
	    } else if (obj instanceof Set) {
	      if (propertyName === 'size') {
	        return this.getSetObserver(obj).getLengthObserver();
	      }
	
	      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
	    }
	
	    return new SetterObserver(this.taskQueue, obj, propertyName);
	  };
	
	  ObserverLocator.prototype.getAccessor = function getAccessor(obj, propertyName) {
	    if (obj instanceof _aureliaPal.DOM.Element) {
	      if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css' || propertyName === 'value' && (obj.tagName.toLowerCase() === 'input' || obj.tagName.toLowerCase() === 'select') || propertyName === 'checked' && obj.tagName.toLowerCase() === 'input' || propertyName === 'model' && obj.tagName.toLowerCase() === 'input' || /^xlink:.+$/.exec(propertyName)) {
	        return this.getObserver(obj, propertyName);
	      }
	      if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
	        return dataAttributeAccessor;
	      }
	    }
	    return propertyAccessor;
	  };
	
	  ObserverLocator.prototype.getArrayObserver = function getArrayObserver(array) {
	    return _getArrayObserver(this.taskQueue, array);
	  };
	
	  ObserverLocator.prototype.getMapObserver = function getMapObserver(map) {
	    return _getMapObserver(this.taskQueue, map);
	  };
	
	  ObserverLocator.prototype.getSetObserver = function getSetObserver(set) {
	    return _getSetObserver(this.taskQueue, set);
	  };
	
	  return ObserverLocator;
	}(), _class11.inject = [_aureliaTaskQueue.TaskQueue, EventManager, DirtyChecker, SVGAnalyzer, Parser], _temp);
	
	var ObjectObservationAdapter = exports.ObjectObservationAdapter = function () {
	  function ObjectObservationAdapter() {
	    
	  }
	
	  ObjectObservationAdapter.prototype.getObserver = function getObserver(object, propertyName, descriptor) {
	    throw new Error('BindingAdapters must implement getObserver(object, propertyName).');
	  };
	
	  return ObjectObservationAdapter;
	}();
	
	var BindingExpression = exports.BindingExpression = function () {
	  function BindingExpression(observerLocator, targetProperty, sourceExpression, mode, lookupFunctions, attribute) {
	    
	
	    this.observerLocator = observerLocator;
	    this.targetProperty = targetProperty;
	    this.sourceExpression = sourceExpression;
	    this.mode = mode;
	    this.lookupFunctions = lookupFunctions;
	    this.attribute = attribute;
	    this.discrete = false;
	  }
	
	  BindingExpression.prototype.createBinding = function createBinding(target) {
	    return new Binding(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.mode, this.lookupFunctions);
	  };
	
	  return BindingExpression;
	}();
	
	var targetContext = 'Binding:target';
	
	var Binding = exports.Binding = (_dec10 = connectable(), _dec10(_class12 = function () {
	  function Binding(observerLocator, sourceExpression, target, targetProperty, mode, lookupFunctions) {
	    
	
	    this.observerLocator = observerLocator;
	    this.sourceExpression = sourceExpression;
	    this.target = target;
	    this.targetProperty = targetProperty;
	    this.mode = mode;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  Binding.prototype.updateTarget = function updateTarget(value) {
	    this.targetObserver.setValue(value, this.target, this.targetProperty);
	  };
	
	  Binding.prototype.updateSource = function updateSource(value) {
	    this.sourceExpression.assign(this.source, value, this.lookupFunctions);
	  };
	
	  Binding.prototype.call = function call(context, newValue, oldValue) {
	    if (!this.isBound) {
	      return;
	    }
	    if (context === sourceContext) {
	      oldValue = this.targetObserver.getValue(this.target, this.targetProperty);
	      newValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
	      if (newValue !== oldValue) {
	        this.updateTarget(newValue);
	      }
	      if (this.mode !== bindingMode.oneTime) {
	        this._version++;
	        this.sourceExpression.connect(this, this.source);
	        this.unobserve(false);
	      }
	      return;
	    }
	    if (context === targetContext) {
	      if (newValue !== this.sourceExpression.evaluate(this.source, this.lookupFunctions)) {
	        this.updateSource(newValue);
	      }
	      return;
	    }
	    throw new Error('Unexpected call context ' + context);
	  };
	
	  Binding.prototype.bind = function bind(source) {
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.isBound = true;
	    this.source = source;
	
	    if (this.sourceExpression.bind) {
	      this.sourceExpression.bind(this, source, this.lookupFunctions);
	    }
	
	    var mode = this.mode;
	    if (!this.targetObserver) {
	      var method = mode === bindingMode.twoWay ? 'getObserver' : 'getAccessor';
	      this.targetObserver = this.observerLocator[method](this.target, this.targetProperty);
	    }
	
	    if ('bind' in this.targetObserver) {
	      this.targetObserver.bind();
	    }
	    var value = this.sourceExpression.evaluate(source, this.lookupFunctions);
	    this.updateTarget(value);
	
	    if (mode === bindingMode.oneWay) {
	      enqueueBindingConnect(this);
	    } else if (mode === bindingMode.twoWay) {
	      this.sourceExpression.connect(this, source);
	      this.targetObserver.subscribe(targetContext, this);
	    }
	  };
	
	  Binding.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    if (this.sourceExpression.unbind) {
	      this.sourceExpression.unbind(this, this.source);
	    }
	    this.source = null;
	    if ('unbind' in this.targetObserver) {
	      this.targetObserver.unbind();
	    }
	    if (this.targetObserver.unsubscribe) {
	      this.targetObserver.unsubscribe(targetContext, this);
	    }
	    this.unobserve(true);
	  };
	
	  Binding.prototype.connect = function connect(evaluate) {
	    if (!this.isBound) {
	      return;
	    }
	    if (evaluate) {
	      var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
	      this.updateTarget(value);
	    }
	    this.sourceExpression.connect(this, this.source);
	  };
	
	  return Binding;
	}()) || _class12);
	
	var CallExpression = exports.CallExpression = function () {
	  function CallExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions) {
	    
	
	    this.observerLocator = observerLocator;
	    this.targetProperty = targetProperty;
	    this.sourceExpression = sourceExpression;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  CallExpression.prototype.createBinding = function createBinding(target) {
	    return new Call(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.lookupFunctions);
	  };
	
	  return CallExpression;
	}();
	
	var Call = exports.Call = function () {
	  function Call(observerLocator, sourceExpression, target, targetProperty, lookupFunctions) {
	    
	
	    this.sourceExpression = sourceExpression;
	    this.target = target;
	    this.targetProperty = observerLocator.getObserver(target, targetProperty);
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  Call.prototype.callSource = function callSource($event) {
	    var overrideContext = this.source.overrideContext;
	    Object.assign(overrideContext, $event);
	    overrideContext.$event = $event;
	    var mustEvaluate = true;
	    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
	    delete overrideContext.$event;
	    for (var prop in $event) {
	      delete overrideContext[prop];
	    }
	    return result;
	  };
	
	  Call.prototype.bind = function bind(source) {
	    var _this27 = this;
	
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.isBound = true;
	    this.source = source;
	
	    if (this.sourceExpression.bind) {
	      this.sourceExpression.bind(this, source, this.lookupFunctions);
	    }
	    this.targetProperty.setValue(function ($event) {
	      return _this27.callSource($event);
	    });
	  };
	
	  Call.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    if (this.sourceExpression.unbind) {
	      this.sourceExpression.unbind(this, this.source);
	    }
	    this.source = null;
	    this.targetProperty.setValue(null);
	  };
	
	  return Call;
	}();
	
	var ValueConverterResource = exports.ValueConverterResource = function () {
	  function ValueConverterResource(name) {
	    
	
	    this.name = name;
	  }
	
	  ValueConverterResource.convention = function convention(name) {
	    if (name.endsWith('ValueConverter')) {
	      return new ValueConverterResource(camelCase(name.substring(0, name.length - 14)));
	    }
	  };
	
	  ValueConverterResource.prototype.initialize = function initialize(container, target) {
	    this.instance = container.get(target);
	  };
	
	  ValueConverterResource.prototype.register = function register(registry, name) {
	    registry.registerValueConverter(name || this.name, this.instance);
	  };
	
	  ValueConverterResource.prototype.load = function load(container, target) {};
	
	  return ValueConverterResource;
	}();
	
	function valueConverter(nameOrTarget) {
	  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
	    return function (target) {
	      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(nameOrTarget), target);
	    };
	  }
	
	  _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(), nameOrTarget);
	}
	
	var BindingBehaviorResource = exports.BindingBehaviorResource = function () {
	  function BindingBehaviorResource(name) {
	    
	
	    this.name = name;
	  }
	
	  BindingBehaviorResource.convention = function convention(name) {
	    if (name.endsWith('BindingBehavior')) {
	      return new BindingBehaviorResource(camelCase(name.substring(0, name.length - 15)));
	    }
	  };
	
	  BindingBehaviorResource.prototype.initialize = function initialize(container, target) {
	    this.instance = container.get(target);
	  };
	
	  BindingBehaviorResource.prototype.register = function register(registry, name) {
	    registry.registerBindingBehavior(name || this.name, this.instance);
	  };
	
	  BindingBehaviorResource.prototype.load = function load(container, target) {};
	
	  return BindingBehaviorResource;
	}();
	
	function bindingBehavior(nameOrTarget) {
	  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
	    return function (target) {
	      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(nameOrTarget), target);
	    };
	  }
	
	  _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(), nameOrTarget);
	}
	
	var ListenerExpression = exports.ListenerExpression = function () {
	  function ListenerExpression(eventManager, targetEvent, sourceExpression, delegate, preventDefault, lookupFunctions) {
	    
	
	    this.eventManager = eventManager;
	    this.targetEvent = targetEvent;
	    this.sourceExpression = sourceExpression;
	    this.delegate = delegate;
	    this.discrete = true;
	    this.preventDefault = preventDefault;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  ListenerExpression.prototype.createBinding = function createBinding(target) {
	    return new Listener(this.eventManager, this.targetEvent, this.delegate, this.sourceExpression, target, this.preventDefault, this.lookupFunctions);
	  };
	
	  return ListenerExpression;
	}();
	
	var Listener = exports.Listener = function () {
	  function Listener(eventManager, targetEvent, delegate, sourceExpression, target, preventDefault, lookupFunctions) {
	    
	
	    this.eventManager = eventManager;
	    this.targetEvent = targetEvent;
	    this.delegate = delegate;
	    this.sourceExpression = sourceExpression;
	    this.target = target;
	    this.preventDefault = preventDefault;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  Listener.prototype.callSource = function callSource(event) {
	    var overrideContext = this.source.overrideContext;
	    overrideContext.$event = event;
	    var mustEvaluate = true;
	    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
	    delete overrideContext.$event;
	    if (result !== true && this.preventDefault) {
	      event.preventDefault();
	    }
	    return result;
	  };
	
	  Listener.prototype.bind = function bind(source) {
	    var _this28 = this;
	
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.isBound = true;
	    this.source = source;
	
	    if (this.sourceExpression.bind) {
	      this.sourceExpression.bind(this, source, this.lookupFunctions);
	    }
	    this._disposeListener = this.eventManager.addEventListener(this.target, this.targetEvent, function (event) {
	      return _this28.callSource(event);
	    }, this.delegate);
	  };
	
	  Listener.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    if (this.sourceExpression.unbind) {
	      this.sourceExpression.unbind(this, this.source);
	    }
	    this.source = null;
	    this._disposeListener();
	    this._disposeListener = null;
	  };
	
	  return Listener;
	}();
	
	function getAU(element) {
	  var au = element.au;
	
	  if (au === undefined) {
	    throw new Error('No Aurelia APIs are defined for the referenced element.');
	  }
	
	  return au;
	}
	
	var NameExpression = exports.NameExpression = function () {
	  function NameExpression(sourceExpression, apiName, lookupFunctions) {
	    
	
	    this.sourceExpression = sourceExpression;
	    this.apiName = apiName;
	    this.lookupFunctions = lookupFunctions;
	    this.discrete = true;
	  }
	
	  NameExpression.prototype.createBinding = function createBinding(target) {
	    return new NameBinder(this.sourceExpression, NameExpression.locateAPI(target, this.apiName), this.lookupFunctions);
	  };
	
	  NameExpression.locateAPI = function locateAPI(element, apiName) {
	    switch (apiName) {
	      case 'element':
	        return element;
	      case 'controller':
	        return getAU(element).controller;
	      case 'view-model':
	        return getAU(element).controller.viewModel;
	      case 'view':
	        return getAU(element).controller.view;
	      default:
	        var target = getAU(element)[apiName];
	
	        if (target === undefined) {
	          throw new Error('Attempted to reference "' + apiName + '", but it was not found amongst the target\'s API.');
	        }
	
	        return target.viewModel;
	    }
	  };
	
	  return NameExpression;
	}();
	
	var NameBinder = function () {
	  function NameBinder(sourceExpression, target, lookupFunctions) {
	    
	
	    this.sourceExpression = sourceExpression;
	    this.target = target;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  NameBinder.prototype.bind = function bind(source) {
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.isBound = true;
	    this.source = source;
	    if (this.sourceExpression.bind) {
	      this.sourceExpression.bind(this, source, this.lookupFunctions);
	    }
	    this.sourceExpression.assign(this.source, this.target, this.lookupFunctions);
	  };
	
	  NameBinder.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    this.sourceExpression.assign(this.source, null, this.lookupFunctions);
	    if (this.sourceExpression.unbind) {
	      this.sourceExpression.unbind(this, this.source);
	    }
	    this.source = null;
	  };
	
	  return NameBinder;
	}();
	
	var LookupFunctions = {
	  bindingBehaviors: function bindingBehaviors(name) {
	    return null;
	  },
	  valueConverters: function valueConverters(name) {
	    return null;
	  }
	};
	
	var BindingEngine = exports.BindingEngine = (_temp2 = _class13 = function () {
	  function BindingEngine(observerLocator, parser) {
	    
	
	    this.observerLocator = observerLocator;
	    this.parser = parser;
	  }
	
	  BindingEngine.prototype.createBindingExpression = function createBindingExpression(targetProperty, sourceExpression) {
	    var mode = arguments.length <= 2 || arguments[2] === undefined ? bindingMode.oneWay : arguments[2];
	    var lookupFunctions = arguments.length <= 3 || arguments[3] === undefined ? LookupFunctions : arguments[3];
	
	    return new BindingExpression(this.observerLocator, targetProperty, this.parser.parse(sourceExpression), mode, lookupFunctions);
	  };
	
	  BindingEngine.prototype.propertyObserver = function propertyObserver(obj, propertyName) {
	    var _this29 = this;
	
	    return {
	      subscribe: function subscribe(callback) {
	        var observer = _this29.observerLocator.getObserver(obj, propertyName);
	        observer.subscribe(callback);
	        return {
	          dispose: function dispose() {
	            return observer.unsubscribe(callback);
	          }
	        };
	      }
	    };
	  };
	
	  BindingEngine.prototype.collectionObserver = function collectionObserver(collection) {
	    var _this30 = this;
	
	    return {
	      subscribe: function subscribe(callback) {
	        var observer = void 0;
	        if (collection instanceof Array) {
	          observer = _this30.observerLocator.getArrayObserver(collection);
	        } else if (collection instanceof Map) {
	          observer = _this30.observerLocator.getMapObserver(collection);
	        } else if (collection instanceof Set) {
	          observer = _this30.observerLocator.getSetObserver(collection);
	        } else {
	          throw new Error('collection must be an instance of Array, Map or Set.');
	        }
	        observer.subscribe(callback);
	        return {
	          dispose: function dispose() {
	            return observer.unsubscribe(callback);
	          }
	        };
	      }
	    };
	  };
	
	  BindingEngine.prototype.expressionObserver = function expressionObserver(bindingContext, expression) {
	    var scope = { bindingContext: bindingContext, overrideContext: createOverrideContext(bindingContext) };
	    return new ExpressionObserver(scope, this.parser.parse(expression), this.observerLocator, LookupFunctions);
	  };
	
	  BindingEngine.prototype.parseExpression = function parseExpression(expression) {
	    return this.parser.parse(expression);
	  };
	
	  BindingEngine.prototype.registerAdapter = function registerAdapter(adapter) {
	    this.observerLocator.addAdapter(adapter);
	  };
	
	  return BindingEngine;
	}(), _class13.inject = [ObserverLocator, Parser], _temp2);
	
	
	var setProto = Set.prototype;
	
	function _getSetObserver(taskQueue, set) {
	  return ModifySetObserver.for(taskQueue, set);
	}
	
	exports.getSetObserver = _getSetObserver;
	
	var ModifySetObserver = function (_ModifyCollectionObse3) {
	  _inherits(ModifySetObserver, _ModifyCollectionObse3);
	
	  function ModifySetObserver(taskQueue, set) {
	    
	
	    return _possibleConstructorReturn(this, _ModifyCollectionObse3.call(this, taskQueue, set));
	  }
	
	  ModifySetObserver.for = function _for(taskQueue, set) {
	    if (!('__set_observer__' in set)) {
	      var observer = ModifySetObserver.create(taskQueue, set);
	      Reflect.defineProperty(set, '__set_observer__', { value: observer, enumerable: false, configurable: false });
	    }
	    return set.__set_observer__;
	  };
	
	  ModifySetObserver.create = function create(taskQueue, set) {
	    var observer = new ModifySetObserver(taskQueue, set);
	
	    var proto = setProto;
	    if (proto.add !== set.add || proto.delete !== set.delete || proto.clear !== set.clear) {
	      proto = {
	        add: set.add,
	        delete: set.delete,
	        clear: set.clear
	      };
	    }
	
	    set.add = function () {
	      var type = 'add';
	      var oldSize = set.size;
	      var methodCallResult = proto.add.apply(set, arguments);
	      var hasValue = set.size === oldSize;
	      if (!hasValue) {
	        observer.addChangeRecord({
	          type: type,
	          object: set,
	          value: Array.from(set).pop()
	        });
	      }
	      return methodCallResult;
	    };
	
	    set.delete = function () {
	      var hasValue = set.has(arguments[0]);
	      var methodCallResult = proto.delete.apply(set, arguments);
	      if (hasValue) {
	        observer.addChangeRecord({
	          type: 'delete',
	          object: set,
	          value: arguments[0]
	        });
	      }
	      return methodCallResult;
	    };
	
	    set.clear = function () {
	      var methodCallResult = proto.clear.apply(set, arguments);
	      observer.addChangeRecord({
	        type: 'clear',
	        object: set
	      });
	      return methodCallResult;
	    };
	
	    return observer;
	  };
	
	  return ModifySetObserver;
	}(ModifyCollectionObserver);
	
	function observable(targetOrConfig, key, descriptor) {
	  var deco = function deco(target, key2, descriptor2) {
	    var innerPropertyName = '_' + key2;
	    var callbackName = targetOrConfig && targetOrConfig.changeHandler || key2 + 'Changed';
	
	    var babel = descriptor2 !== undefined;
	
	    if (babel) {
	      if (typeof descriptor2.initializer === 'function') {
	        target[innerPropertyName] = descriptor2.initializer();
	      }
	    } else {
	      descriptor2 = {};
	    }
	
	    delete descriptor2.writable;
	    delete descriptor2.initializer;
	
	    descriptor2.get = function () {
	      return this[innerPropertyName];
	    };
	    descriptor2.set = function (newValue) {
	      var oldValue = this[innerPropertyName];
	      this[innerPropertyName] = newValue;
	      if (this[callbackName]) {
	        this[callbackName](newValue, oldValue);
	      }
	    };
	
	    descriptor2.get.dependencies = [innerPropertyName];
	
	    if (!babel) {
	      Reflect.defineProperty(target, key2, descriptor2);
	    }
	  };
	
	  if (key) {
	    var target = targetOrConfig;
	    targetOrConfig = null;
	    return deco(target, key, descriptor);
	  }
	
	  return deco;
	}

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TaskQueue = undefined;
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var hasSetImmediate = typeof setImmediate === 'function';
	
	function makeRequestFlushFromMutationObserver(flush) {
	  var toggle = 1;
	  var observer = _aureliaPal.DOM.createMutationObserver(flush);
	  var node = _aureliaPal.DOM.createTextNode('');
	  observer.observe(node, { characterData: true });
	  return function requestFlush() {
	    toggle = -toggle;
	    node.data = toggle;
	  };
	}
	
	function makeRequestFlushFromTimer(flush) {
	  return function requestFlush() {
	    var timeoutHandle = setTimeout(handleFlushTimer, 0);
	
	    var intervalHandle = setInterval(handleFlushTimer, 50);
	    function handleFlushTimer() {
	      clearTimeout(timeoutHandle);
	      clearInterval(intervalHandle);
	      flush();
	    }
	  };
	}
	
	function onError(error, task) {
	  if ('onError' in task) {
	    task.onError(error);
	  } else if (hasSetImmediate) {
	    setImmediate(function () {
	      throw error;
	    });
	  } else {
	    setTimeout(function () {
	      throw error;
	    }, 0);
	  }
	}
	
	var TaskQueue = exports.TaskQueue = function () {
	  function TaskQueue() {
	    var _this = this;
	
	    _classCallCheck(this, TaskQueue);
	
	    this.microTaskQueue = [];
	    this.microTaskQueueCapacity = 1024;
	    this.taskQueue = [];
	
	    if (_aureliaPal.FEATURE.mutationObserver) {
	      this.requestFlushMicroTaskQueue = makeRequestFlushFromMutationObserver(function () {
	        return _this.flushMicroTaskQueue();
	      });
	    } else {
	      this.requestFlushMicroTaskQueue = makeRequestFlushFromTimer(function () {
	        return _this.flushMicroTaskQueue();
	      });
	    }
	
	    this.requestFlushTaskQueue = makeRequestFlushFromTimer(function () {
	      return _this.flushTaskQueue();
	    });
	  }
	
	  TaskQueue.prototype.queueMicroTask = function queueMicroTask(task) {
	    if (this.microTaskQueue.length < 1) {
	      this.requestFlushMicroTaskQueue();
	    }
	
	    this.microTaskQueue.push(task);
	  };
	
	  TaskQueue.prototype.queueTask = function queueTask(task) {
	    if (this.taskQueue.length < 1) {
	      this.requestFlushTaskQueue();
	    }
	
	    this.taskQueue.push(task);
	  };
	
	  TaskQueue.prototype.flushTaskQueue = function flushTaskQueue() {
	    var queue = this.taskQueue;
	    var index = 0;
	    var task = void 0;
	
	    this.taskQueue = [];
	
	    try {
	      while (index < queue.length) {
	        task = queue[index];
	        task.call();
	        index++;
	      }
	    } catch (error) {
	      onError(error, task);
	    }
	  };
	
	  TaskQueue.prototype.flushMicroTaskQueue = function flushMicroTaskQueue() {
	    var queue = this.microTaskQueue;
	    var capacity = this.microTaskQueueCapacity;
	    var index = 0;
	    var task = void 0;
	
	    try {
	      while (index < queue.length) {
	        task = queue[index];
	        task.call();
	        index++;
	
	        if (index > capacity) {
	          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	            queue[scan] = queue[scan + index];
	          }
	
	          queue.length -= index;
	          index = 0;
	        }
	      }
	    } catch (error) {
	      onError(error, task);
	    }
	
	    queue.length = 0;
	  };
	
	  return TaskQueue;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22).setImmediate))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(23).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22).setImmediate, __webpack_require__(22).clearImmediate))

/***/ },
/* 23 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TemplatingEngine = exports.ElementConfigResource = exports.CompositionEngine = exports.HtmlBehaviorResource = exports.BindableProperty = exports.BehaviorPropertyObserver = exports.Controller = exports.ViewEngine = exports.ModuleAnalyzer = exports.ResourceDescription = exports.ResourceModule = exports.ViewCompiler = exports.ViewFactory = exports.BoundViewFactory = exports.ViewSlot = exports._ContentSelector = exports.View = exports.ViewResources = exports.BindingLanguage = exports.ViewLocator = exports.InlineViewStrategy = exports.TemplateRegistryViewStrategy = exports.NoViewStrategy = exports.ConventionalViewStrategy = exports.RelativeViewStrategy = exports.viewStrategy = exports.TargetInstruction = exports.BehaviorInstruction = exports.ViewCompileInstruction = exports.ResourceLoadContext = exports.ElementEvents = exports.CompositionTransaction = exports.Animator = exports.animationEvent = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class3, _temp, _dec, _class4, _dec2, _class5, _dec3, _class6, _dec4, _class7, _dec5, _class8, _class9, _temp2, _class11, _dec6, _class13, _dec7, _class14, _dec8, _class16, _dec9, _class17, _dec10, _class18;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports._hyphenate = _hyphenate;
	exports.children = children;
	exports.child = child;
	exports.resource = resource;
	exports.behavior = behavior;
	exports.customElement = customElement;
	exports.customAttribute = customAttribute;
	exports.templateController = templateController;
	exports.bindable = bindable;
	exports.dynamicOptions = dynamicOptions;
	exports.useShadowDOM = useShadowDOM;
	exports.processAttributes = processAttributes;
	exports.processContent = processContent;
	exports.containerless = containerless;
	exports.useViewStrategy = useViewStrategy;
	exports.useView = useView;
	exports.inlineView = inlineView;
	exports.noView = noView;
	exports.elementConfig = elementConfig;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaPal = __webpack_require__(4);
	
	var _aureliaMetadata = __webpack_require__(7);
	
	var _aureliaPath = __webpack_require__(9);
	
	var _aureliaLoader = __webpack_require__(8);
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTaskQueue = __webpack_require__(21);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var animationEvent = exports.animationEvent = {
	  enterBegin: 'animation:enter:begin',
	  enterActive: 'animation:enter:active',
	  enterDone: 'animation:enter:done',
	  enterTimeout: 'animation:enter:timeout',
	
	  leaveBegin: 'animation:leave:begin',
	  leaveActive: 'animation:leave:active',
	  leaveDone: 'animation:leave:done',
	  leaveTimeout: 'animation:leave:timeout',
	
	  staggerNext: 'animation:stagger:next',
	
	  removeClassBegin: 'animation:remove-class:begin',
	  removeClassActive: 'animation:remove-class:active',
	  removeClassDone: 'animation:remove-class:done',
	  removeClassTimeout: 'animation:remove-class:timeout',
	
	  addClassBegin: 'animation:add-class:begin',
	  addClassActive: 'animation:add-class:active',
	  addClassDone: 'animation:add-class:done',
	  addClassTimeout: 'animation:add-class:timeout',
	
	  animateBegin: 'animation:animate:begin',
	  animateActive: 'animation:animate:active',
	  animateDone: 'animation:animate:done',
	  animateTimeout: 'animation:animate:timeout',
	
	  sequenceBegin: 'animation:sequence:begin',
	  sequenceDone: 'animation:sequence:done'
	};
	
	var Animator = exports.Animator = function () {
	  function Animator() {
	    _classCallCheck(this, Animator);
	  }
	
	  Animator.prototype.enter = function enter(element) {
	    return Promise.resolve(false);
	  };
	
	  Animator.prototype.leave = function leave(element) {
	    return Promise.resolve(false);
	  };
	
	  Animator.prototype.removeClass = function removeClass(element, className) {
	    element.classList.remove(className);
	    return Promise.resolve(false);
	  };
	
	  Animator.prototype.addClass = function addClass(element, className) {
	    element.classList.add(className);
	    return Promise.resolve(false);
	  };
	
	  Animator.prototype.animate = function animate(element, className) {
	    return Promise.resolve(false);
	  };
	
	  Animator.prototype.runSequence = function runSequence(animations) {};
	
	  Animator.prototype.registerEffect = function registerEffect(effectName, properties) {};
	
	  Animator.prototype.unregisterEffect = function unregisterEffect(effectName) {};
	
	  return Animator;
	}();
	
	var CompositionTransaction = exports.CompositionTransaction = function () {
	  function CompositionTransaction() {
	    _classCallCheck(this, CompositionTransaction);
	
	    this._ownershipToken = null;
	    this._compositionCount = 0;
	  }
	
	  CompositionTransaction.prototype.tryCapture = function tryCapture() {
	    if (this._ownershipToken !== null) {
	      return null;
	    }
	
	    return this._ownershipToken = this._createOwnershipToken();
	  };
	
	  CompositionTransaction.prototype.enlist = function enlist() {
	    var that = this;
	
	    that._compositionCount++;
	
	    return {
	      done: function done() {
	        that._compositionCount--;
	        that._tryCompleteTransaction();
	      }
	    };
	  };
	
	  CompositionTransaction.prototype._tryCompleteTransaction = function _tryCompleteTransaction() {
	    if (this._compositionCount <= 0) {
	      this._compositionCount = 0;
	
	      if (this._ownershipToken !== null) {
	        var capture = this._ownershipToken;
	        this._ownershipToken = null;
	        capture._resolve();
	      }
	    }
	  };
	
	  CompositionTransaction.prototype._createOwnershipToken = function _createOwnershipToken() {
	    var _this = this;
	
	    var token = {};
	    var promise = new Promise(function (resolve, reject) {
	      token._resolve = resolve;
	    });
	
	    token.waitForCompositionComplete = function () {
	      _this._tryCompleteTransaction();
	      return promise;
	    };
	
	    return token;
	  };
	
	  return CompositionTransaction;
	}();
	
	var capitalMatcher = /([A-Z])/g;
	
	function addHyphenAndLower(char) {
	  return '-' + char.toLowerCase();
	}
	
	function _hyphenate(name) {
	  return (name.charAt(0).toLowerCase() + name.slice(1)).replace(capitalMatcher, addHyphenAndLower);
	}
	
	var ElementEvents = exports.ElementEvents = function () {
	  function ElementEvents(element) {
	    _classCallCheck(this, ElementEvents);
	
	    this.element = element;
	    this.subscriptions = {};
	  }
	
	  ElementEvents.prototype._enqueueHandler = function _enqueueHandler(handler) {
	    this.subscriptions[handler.eventName] = this.subscriptions[handler.eventName] || [];
	    this.subscriptions[handler.eventName].push(handler);
	  };
	
	  ElementEvents.prototype._dequeueHandler = function _dequeueHandler(handler) {
	    var index = void 0;
	    var subscriptions = this.subscriptions[handler.eventName];
	    if (subscriptions) {
	      index = subscriptions.indexOf(handler);
	      if (index > -1) {
	        subscriptions.splice(index, 1);
	      }
	    }
	    return handler;
	  };
	
	  ElementEvents.prototype.publish = function publish(eventName) {
	    var detail = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	    var cancelable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
	
	    var event = _aureliaPal.DOM.createCustomEvent(eventName, { cancelable: cancelable, bubbles: bubbles, detail: detail });
	    this.element.dispatchEvent(event);
	  };
	
	  ElementEvents.prototype.subscribe = function subscribe(eventName, handler) {
	    var _this2 = this;
	
	    var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    if (handler && typeof handler === 'function') {
	      handler.eventName = eventName;
	      handler.handler = handler;
	      handler.bubbles = bubbles;
	      handler.dispose = function () {
	        _this2.element.removeEventListener(eventName, handler, bubbles);
	        _this2._dequeueHandler(handler);
	      };
	      this.element.addEventListener(eventName, handler, bubbles);
	      this._enqueueHandler(handler);
	      return handler;
	    }
	  };
	
	  ElementEvents.prototype.subscribeOnce = function subscribeOnce(eventName, handler) {
	    var _this3 = this;
	
	    var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    if (handler && typeof handler === 'function') {
	      var _ret = function () {
	        var _handler = function _handler(event) {
	          handler(event);
	          _handler.dispose();
	        };
	        return {
	          v: _this3.subscribe(eventName, _handler, bubbles)
	        };
	      }();
	
	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	  };
	
	  ElementEvents.prototype.dispose = function dispose(eventName) {
	    if (eventName && typeof eventName === 'string') {
	      var subscriptions = this.subscriptions[eventName];
	      if (subscriptions) {
	        while (subscriptions.length) {
	          var subscription = subscriptions.pop();
	          if (subscription) {
	            subscription.dispose();
	          }
	        }
	      }
	    } else {
	      this.disposeAll();
	    }
	  };
	
	  ElementEvents.prototype.disposeAll = function disposeAll() {
	    for (var key in this.subscriptions) {
	      this.dispose(key);
	    }
	  };
	
	  return ElementEvents;
	}();
	
	var ResourceLoadContext = exports.ResourceLoadContext = function () {
	  function ResourceLoadContext() {
	    _classCallCheck(this, ResourceLoadContext);
	
	    this.dependencies = {};
	  }
	
	  ResourceLoadContext.prototype.addDependency = function addDependency(url) {
	    this.dependencies[url] = true;
	  };
	
	  ResourceLoadContext.prototype.hasDependency = function hasDependency(url) {
	    return url in this.dependencies;
	  };
	
	  return ResourceLoadContext;
	}();
	
	var ViewCompileInstruction = exports.ViewCompileInstruction = function ViewCompileInstruction() {
	  var targetShadowDOM = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	  var compileSurrogate = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	  _classCallCheck(this, ViewCompileInstruction);
	
	  this.targetShadowDOM = targetShadowDOM;
	  this.compileSurrogate = compileSurrogate;
	  this.associatedModuleId = null;
	};
	
	ViewCompileInstruction.normal = new ViewCompileInstruction();
	
	var BehaviorInstruction = exports.BehaviorInstruction = function () {
	  BehaviorInstruction.enhance = function enhance() {
	    var instruction = new BehaviorInstruction();
	    instruction.enhance = true;
	    return instruction;
	  };
	
	  BehaviorInstruction.unitTest = function unitTest(type, attributes) {
	    var instruction = new BehaviorInstruction();
	    instruction.type = type;
	    instruction.attributes = attributes || {};
	    return instruction;
	  };
	
	  BehaviorInstruction.element = function element(node, type) {
	    var instruction = new BehaviorInstruction();
	    instruction.type = type;
	    instruction.attributes = {};
	    instruction.anchorIsContainer = !(node.hasAttribute('containerless') || type.containerless);
	    instruction.initiatedByBehavior = true;
	    return instruction;
	  };
	
	  BehaviorInstruction.attribute = function attribute(attrName, type) {
	    var instruction = new BehaviorInstruction();
	    instruction.attrName = attrName;
	    instruction.type = type || null;
	    instruction.attributes = {};
	    return instruction;
	  };
	
	  BehaviorInstruction.dynamic = function dynamic(host, viewModel, viewFactory) {
	    var instruction = new BehaviorInstruction();
	    instruction.host = host;
	    instruction.viewModel = viewModel;
	    instruction.viewFactory = viewFactory;
	    instruction.inheritBindingContext = true;
	    return instruction;
	  };
	
	  function BehaviorInstruction() {
	    _classCallCheck(this, BehaviorInstruction);
	
	    this.initiatedByBehavior = false;
	    this.enhance = false;
	    this.partReplacements = null;
	    this.viewFactory = null;
	    this.originalAttrName = null;
	    this.skipContentProcessing = false;
	    this.contentFactory = null;
	    this.viewModel = null;
	    this.anchorIsContainer = false;
	    this.host = null;
	    this.attributes = null;
	    this.type = null;
	    this.attrName = null;
	    this.inheritBindingContext = false;
	  }
	
	  return BehaviorInstruction;
	}();
	
	BehaviorInstruction.normal = new BehaviorInstruction();
	
	var TargetInstruction = exports.TargetInstruction = (_temp = _class3 = function () {
	  TargetInstruction.contentSelector = function contentSelector(node, parentInjectorId) {
	    var instruction = new TargetInstruction();
	    instruction.parentInjectorId = parentInjectorId;
	    instruction.contentSelector = true;
	    instruction.selector = node.getAttribute('select');
	    return instruction;
	  };
	
	  TargetInstruction.contentExpression = function contentExpression(expression) {
	    var instruction = new TargetInstruction();
	    instruction.contentExpression = expression;
	    return instruction;
	  };
	
	  TargetInstruction.lifting = function lifting(parentInjectorId, liftingInstruction) {
	    var instruction = new TargetInstruction();
	    instruction.parentInjectorId = parentInjectorId;
	    instruction.expressions = TargetInstruction.noExpressions;
	    instruction.behaviorInstructions = [liftingInstruction];
	    instruction.viewFactory = liftingInstruction.viewFactory;
	    instruction.providers = [liftingInstruction.type.target];
	    instruction.lifting = true;
	    return instruction;
	  };
	
	  TargetInstruction.normal = function normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction) {
	    var instruction = new TargetInstruction();
	    instruction.injectorId = injectorId;
	    instruction.parentInjectorId = parentInjectorId;
	    instruction.providers = providers;
	    instruction.behaviorInstructions = behaviorInstructions;
	    instruction.expressions = expressions;
	    instruction.anchorIsContainer = elementInstruction ? elementInstruction.anchorIsContainer : true;
	    instruction.elementInstruction = elementInstruction;
	    return instruction;
	  };
	
	  TargetInstruction.surrogate = function surrogate(providers, behaviorInstructions, expressions, values) {
	    var instruction = new TargetInstruction();
	    instruction.expressions = expressions;
	    instruction.behaviorInstructions = behaviorInstructions;
	    instruction.providers = providers;
	    instruction.values = values;
	    return instruction;
	  };
	
	  function TargetInstruction() {
	    _classCallCheck(this, TargetInstruction);
	
	    this.injectorId = null;
	    this.parentInjectorId = null;
	
	    this.contentSelector = false;
	    this.selector = null;
	
	    this.contentExpression = null;
	
	    this.expressions = null;
	    this.behaviorInstructions = null;
	    this.providers = null;
	
	    this.viewFactory = null;
	
	    this.anchorIsContainer = false;
	    this.elementInstruction = null;
	    this.lifting = false;
	
	    this.values = null;
	  }
	
	  return TargetInstruction;
	}(), _class3.noExpressions = Object.freeze([]), _temp);
	var viewStrategy = exports.viewStrategy = _aureliaMetadata.protocol.create('aurelia:view-strategy', {
	  validate: function validate(target) {
	    if (!(typeof target.loadViewFactory === 'function')) {
	      return 'View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>';
	    }
	
	    return true;
	  },
	  compose: function compose(target) {
	    if (!(typeof target.makeRelativeTo === 'function')) {
	      target.makeRelativeTo = _aureliaPal.PLATFORM.noop;
	    }
	  }
	});
	
	var RelativeViewStrategy = exports.RelativeViewStrategy = (_dec = viewStrategy(), _dec(_class4 = function () {
	  function RelativeViewStrategy(path) {
	    _classCallCheck(this, RelativeViewStrategy);
	
	    this.path = path;
	    this.absolutePath = null;
	  }
	
	  RelativeViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
	    if (this.absolutePath === null && this.moduleId) {
	      this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, this.moduleId);
	    }
	
	    compileInstruction.associatedModuleId = this.moduleId;
	    return viewEngine.loadViewFactory(this.absolutePath || this.path, compileInstruction, loadContext);
	  };
	
	  RelativeViewStrategy.prototype.makeRelativeTo = function makeRelativeTo(file) {
	    if (this.absolutePath === null) {
	      this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, file);
	    }
	  };
	
	  return RelativeViewStrategy;
	}()) || _class4);
	var ConventionalViewStrategy = exports.ConventionalViewStrategy = (_dec2 = viewStrategy(), _dec2(_class5 = function () {
	  function ConventionalViewStrategy(viewLocator, origin) {
	    _classCallCheck(this, ConventionalViewStrategy);
	
	    this.moduleId = origin.moduleId;
	    this.viewUrl = viewLocator.convertOriginToViewUrl(origin);
	  }
	
	  ConventionalViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
	    compileInstruction.associatedModuleId = this.moduleId;
	    return viewEngine.loadViewFactory(this.viewUrl, compileInstruction, loadContext);
	  };
	
	  return ConventionalViewStrategy;
	}()) || _class5);
	var NoViewStrategy = exports.NoViewStrategy = (_dec3 = viewStrategy(), _dec3(_class6 = function () {
	  function NoViewStrategy() {
	    _classCallCheck(this, NoViewStrategy);
	  }
	
	  NoViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
	    return Promise.resolve(null);
	  };
	
	  return NoViewStrategy;
	}()) || _class6);
	var TemplateRegistryViewStrategy = exports.TemplateRegistryViewStrategy = (_dec4 = viewStrategy(), _dec4(_class7 = function () {
	  function TemplateRegistryViewStrategy(moduleId, entry) {
	    _classCallCheck(this, TemplateRegistryViewStrategy);
	
	    this.moduleId = moduleId;
	    this.entry = entry;
	  }
	
	  TemplateRegistryViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
	    var entry = this.entry;
	
	    if (entry.factoryIsReady) {
	      return Promise.resolve(entry.factory);
	    }
	
	    compileInstruction.associatedModuleId = this.moduleId;
	    return viewEngine.loadViewFactory(entry, compileInstruction, loadContext);
	  };
	
	  return TemplateRegistryViewStrategy;
	}()) || _class7);
	var InlineViewStrategy = exports.InlineViewStrategy = (_dec5 = viewStrategy(), _dec5(_class8 = function () {
	  function InlineViewStrategy(markup, dependencies, dependencyBaseUrl) {
	    _classCallCheck(this, InlineViewStrategy);
	
	    this.markup = markup;
	    this.dependencies = dependencies || null;
	    this.dependencyBaseUrl = dependencyBaseUrl || '';
	  }
	
	  InlineViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
	    var entry = this.entry;
	    var dependencies = this.dependencies;
	
	    if (entry && entry.factoryIsReady) {
	      return Promise.resolve(entry.factory);
	    }
	
	    this.entry = entry = new _aureliaLoader.TemplateRegistryEntry(this.moduleId || this.dependencyBaseUrl);
	    entry.template = _aureliaPal.DOM.createTemplateFromMarkup(this.markup);
	
	    if (dependencies !== null) {
	      for (var i = 0, ii = dependencies.length; i < ii; ++i) {
	        var current = dependencies[i];
	
	        if (typeof current === 'string' || typeof current === 'function') {
	          entry.addDependency(current);
	        } else {
	          entry.addDependency(current.from, current.as);
	        }
	      }
	    }
	
	    compileInstruction.associatedModuleId = this.moduleId;
	    return viewEngine.loadViewFactory(entry, compileInstruction, loadContext);
	  };
	
	  return InlineViewStrategy;
	}()) || _class8);
	var ViewLocator = exports.ViewLocator = (_temp2 = _class9 = function () {
	  function ViewLocator() {
	    _classCallCheck(this, ViewLocator);
	  }
	
	  ViewLocator.prototype.getViewStrategy = function getViewStrategy(value) {
	    if (!value) {
	      return null;
	    }
	
	    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'getViewStrategy' in value) {
	      var _origin = _aureliaMetadata.Origin.get(value.constructor);
	
	      value = value.getViewStrategy();
	
	      if (typeof value === 'string') {
	        value = new RelativeViewStrategy(value);
	      }
	
	      viewStrategy.assert(value);
	
	      if (_origin) {
	        value.makeRelativeTo(_origin.moduleId);
	      }
	
	      return value;
	    }
	
	    if (typeof value === 'string') {
	      value = new RelativeViewStrategy(value);
	    }
	
	    if (viewStrategy.validate(value)) {
	      return value;
	    }
	
	    if (typeof value !== 'function') {
	      value = value.constructor;
	    }
	
	    var origin = _aureliaMetadata.Origin.get(value);
	    var strategy = _aureliaMetadata.metadata.get(ViewLocator.viewStrategyMetadataKey, value);
	
	    if (!strategy) {
	      if (!origin) {
	        throw new Error('Cannot determinte default view strategy for object.', value);
	      }
	
	      strategy = this.createFallbackViewStrategy(origin);
	    } else if (origin) {
	      strategy.moduleId = origin.moduleId;
	    }
	
	    return strategy;
	  };
	
	  ViewLocator.prototype.createFallbackViewStrategy = function createFallbackViewStrategy(origin) {
	    return new ConventionalViewStrategy(this, origin);
	  };
	
	  ViewLocator.prototype.convertOriginToViewUrl = function convertOriginToViewUrl(origin) {
	    var moduleId = origin.moduleId;
	    var id = moduleId.endsWith('.js') || moduleId.endsWith('.ts') ? moduleId.substring(0, moduleId.length - 3) : moduleId;
	    return id + '.html';
	  };
	
	  return ViewLocator;
	}(), _class9.viewStrategyMetadataKey = 'aurelia:view-strategy', _temp2);
	
	var BindingLanguage = exports.BindingLanguage = function () {
	  function BindingLanguage() {
	    _classCallCheck(this, BindingLanguage);
	  }
	
	  BindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, elementName, attrName, attrValue) {
	    throw new Error('A BindingLanguage must implement inspectAttribute(...)');
	  };
	
	  BindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, info, existingInstruction) {
	    throw new Error('A BindingLanguage must implement createAttributeInstruction(...)');
	  };
	
	  BindingLanguage.prototype.inspectTextContent = function inspectTextContent(resources, value) {
	    throw new Error('A BindingLanguage must implement inspectTextContent(...)');
	  };
	
	  return BindingLanguage;
	}();
	
	function register(lookup, name, resource, type) {
	  if (!name) {
	    return;
	  }
	
	  var existing = lookup[name];
	  if (existing) {
	    if (existing !== resource) {
	      throw new Error('Attempted to register ' + type + ' when one with the same name already exists. Name: ' + name + '.');
	    }
	
	    return;
	  }
	
	  lookup[name] = resource;
	}
	
	var ViewResources = exports.ViewResources = function () {
	  function ViewResources(parent, viewUrl) {
	    _classCallCheck(this, ViewResources);
	
	    this.bindingLanguage = null;
	
	    this.parent = parent || null;
	    this.hasParent = this.parent !== null;
	    this.viewUrl = viewUrl || '';
	    this.lookupFunctions = {
	      valueConverters: this.getValueConverter.bind(this),
	      bindingBehaviors: this.getBindingBehavior.bind(this)
	    };
	    this.attributes = Object.create(null);
	    this.elements = Object.create(null);
	    this.valueConverters = Object.create(null);
	    this.bindingBehaviors = Object.create(null);
	    this.attributeMap = Object.create(null);
	    this.beforeCompile = this.afterCompile = this.beforeCreate = this.afterCreate = this.beforeBind = this.beforeUnbind = false;
	  }
	
	  ViewResources.prototype._tryAddHook = function _tryAddHook(obj, name) {
	    if (typeof obj[name] === 'function') {
	      var func = obj[name].bind(obj);
	      var counter = 1;
	      var callbackName = void 0;
	
	      while (this[callbackName = name + counter.toString()] !== undefined) {
	        counter++;
	      }
	
	      this[name] = true;
	      this[callbackName] = func;
	    }
	  };
	
	  ViewResources.prototype._invokeHook = function _invokeHook(name, one, two, three, four) {
	    if (this.hasParent) {
	      this.parent._invokeHook(name, one, two, three, four);
	    }
	
	    if (this[name]) {
	      this[name + '1'](one, two, three, four);
	
	      var callbackName = name + '2';
	      if (this[callbackName]) {
	        this[callbackName](one, two, three, four);
	
	        callbackName = name + '3';
	        if (this[callbackName]) {
	          this[callbackName](one, two, three, four);
	
	          var counter = 4;
	
	          while (this[callbackName = name + counter.toString()] !== undefined) {
	            this[callbackName](one, two, three, four);
	            counter++;
	          }
	        }
	      }
	    }
	  };
	
	  ViewResources.prototype.registerViewEngineHooks = function registerViewEngineHooks(hooks) {
	    this._tryAddHook(hooks, 'beforeCompile');
	    this._tryAddHook(hooks, 'afterCompile');
	    this._tryAddHook(hooks, 'beforeCreate');
	    this._tryAddHook(hooks, 'afterCreate');
	    this._tryAddHook(hooks, 'beforeBind');
	    this._tryAddHook(hooks, 'beforeUnbind');
	  };
	
	  ViewResources.prototype.getBindingLanguage = function getBindingLanguage(bindingLanguageFallback) {
	    return this.bindingLanguage || (this.bindingLanguage = bindingLanguageFallback);
	  };
	
	  ViewResources.prototype.patchInParent = function patchInParent(newParent) {
	    var originalParent = this.parent;
	
	    this.parent = newParent || null;
	    this.hasParent = this.parent !== null;
	
	    if (newParent.parent === null) {
	      newParent.parent = originalParent;
	      newParent.hasParent = originalParent !== null;
	    }
	  };
	
	  ViewResources.prototype.relativeToView = function relativeToView(path) {
	    return (0, _aureliaPath.relativeToFile)(path, this.viewUrl);
	  };
	
	  ViewResources.prototype.registerElement = function registerElement(tagName, behavior) {
	    register(this.elements, tagName, behavior, 'an Element');
	  };
	
	  ViewResources.prototype.getElement = function getElement(tagName) {
	    return this.elements[tagName] || (this.hasParent ? this.parent.getElement(tagName) : null);
	  };
	
	  ViewResources.prototype.mapAttribute = function mapAttribute(attribute) {
	    return this.attributeMap[attribute] || (this.hasParent ? this.parent.mapAttribute(attribute) : null);
	  };
	
	  ViewResources.prototype.registerAttribute = function registerAttribute(attribute, behavior, knownAttribute) {
	    this.attributeMap[attribute] = knownAttribute;
	    register(this.attributes, attribute, behavior, 'an Attribute');
	  };
	
	  ViewResources.prototype.getAttribute = function getAttribute(attribute) {
	    return this.attributes[attribute] || (this.hasParent ? this.parent.getAttribute(attribute) : null);
	  };
	
	  ViewResources.prototype.registerValueConverter = function registerValueConverter(name, valueConverter) {
	    register(this.valueConverters, name, valueConverter, 'a ValueConverter');
	  };
	
	  ViewResources.prototype.getValueConverter = function getValueConverter(name) {
	    return this.valueConverters[name] || (this.hasParent ? this.parent.getValueConverter(name) : null);
	  };
	
	  ViewResources.prototype.registerBindingBehavior = function registerBindingBehavior(name, bindingBehavior) {
	    register(this.bindingBehaviors, name, bindingBehavior, 'a BindingBehavior');
	  };
	
	  ViewResources.prototype.getBindingBehavior = function getBindingBehavior(name) {
	    return this.bindingBehaviors[name] || (this.hasParent ? this.parent.getBindingBehavior(name) : null);
	  };
	
	  return ViewResources;
	}();
	
	var View = exports.View = function () {
	  function View(container, viewFactory, fragment, controllers, bindings, children, contentSelectors) {
	    _classCallCheck(this, View);
	
	    this.container = container;
	    this.viewFactory = viewFactory;
	    this.resources = viewFactory.resources;
	    this.fragment = fragment;
	    this.controllers = controllers;
	    this.bindings = bindings;
	    this.children = children;
	    this.contentSelectors = contentSelectors;
	    this.firstChild = fragment.firstChild;
	    this.lastChild = fragment.lastChild;
	    this.fromCache = false;
	    this.isBound = false;
	    this.isAttached = false;
	    this.fromCache = false;
	    this.bindingContext = null;
	    this.overrideContext = null;
	    this.controller = null;
	    this.viewModelScope = null;
	    this._isUserControlled = false;
	  }
	
	  View.prototype.returnToCache = function returnToCache() {
	    this.viewFactory.returnViewToCache(this);
	  };
	
	  View.prototype.created = function created() {
	    var i = void 0;
	    var ii = void 0;
	    var controllers = this.controllers;
	
	    for (i = 0, ii = controllers.length; i < ii; ++i) {
	      controllers[i].created(this);
	    }
	  };
	
	  View.prototype.bind = function bind(bindingContext, overrideContext, _systemUpdate) {
	    var controllers = void 0;
	    var bindings = void 0;
	    var children = void 0;
	    var i = void 0;
	    var ii = void 0;
	
	    if (_systemUpdate && this._isUserControlled) {
	      return;
	    }
	
	    if (this.isBound) {
	      if (this.bindingContext === bindingContext) {
	        return;
	      }
	
	      this.unbind();
	    }
	
	    this.isBound = true;
	    this.bindingContext = bindingContext;
	    this.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(bindingContext);
	
	    this.resources._invokeHook('beforeBind', this);
	
	    bindings = this.bindings;
	    for (i = 0, ii = bindings.length; i < ii; ++i) {
	      bindings[i].bind(this);
	    }
	
	    if (this.viewModelScope !== null) {
	      bindingContext.bind(this.viewModelScope.bindingContext, this.viewModelScope.overrideContext);
	      this.viewModelScope = null;
	    }
	
	    controllers = this.controllers;
	    for (i = 0, ii = controllers.length; i < ii; ++i) {
	      controllers[i].bind(this);
	    }
	
	    children = this.children;
	    for (i = 0, ii = children.length; i < ii; ++i) {
	      children[i].bind(bindingContext, overrideContext, true);
	    }
	  };
	
	  View.prototype.addBinding = function addBinding(binding) {
	    this.bindings.push(binding);
	
	    if (this.isBound) {
	      binding.bind(this);
	    }
	  };
	
	  View.prototype.unbind = function unbind() {
	    var controllers = void 0;
	    var bindings = void 0;
	    var children = void 0;
	    var i = void 0;
	    var ii = void 0;
	
	    if (this.isBound) {
	      this.isBound = false;
	      this.resources._invokeHook('beforeUnbind', this);
	
	      if (this.controller !== null) {
	        this.controller.unbind();
	      }
	
	      bindings = this.bindings;
	      for (i = 0, ii = bindings.length; i < ii; ++i) {
	        bindings[i].unbind();
	      }
	
	      controllers = this.controllers;
	      for (i = 0, ii = controllers.length; i < ii; ++i) {
	        controllers[i].unbind();
	      }
	
	      children = this.children;
	      for (i = 0, ii = children.length; i < ii; ++i) {
	        children[i].unbind();
	      }
	
	      this.bindingContext = null;
	      this.overrideContext = null;
	    }
	  };
	
	  View.prototype.insertNodesBefore = function insertNodesBefore(refNode) {
	    var parent = refNode.parentNode;
	    parent.insertBefore(this.fragment, refNode);
	  };
	
	  View.prototype.appendNodesTo = function appendNodesTo(parent) {
	    parent.appendChild(this.fragment);
	  };
	
	  View.prototype.removeNodes = function removeNodes() {
	    var start = this.firstChild;
	    var end = this.lastChild;
	    var fragment = this.fragment;
	    var next = void 0;
	    var current = start;
	    var loop = true;
	
	    while (loop) {
	      if (current === end) {
	        loop = false;
	      }
	
	      next = current.nextSibling;
	      fragment.appendChild(current);
	      current = next;
	    }
	  };
	
	  View.prototype.attached = function attached() {
	    var controllers = void 0;
	    var children = void 0;
	    var i = void 0;
	    var ii = void 0;
	
	    if (this.isAttached) {
	      return;
	    }
	
	    this.isAttached = true;
	
	    if (this.controller !== null) {
	      this.controller.attached();
	    }
	
	    controllers = this.controllers;
	    for (i = 0, ii = controllers.length; i < ii; ++i) {
	      controllers[i].attached();
	    }
	
	    children = this.children;
	    for (i = 0, ii = children.length; i < ii; ++i) {
	      children[i].attached();
	    }
	  };
	
	  View.prototype.detached = function detached() {
	    var controllers = void 0;
	    var children = void 0;
	    var i = void 0;
	    var ii = void 0;
	
	    if (this.isAttached) {
	      this.isAttached = false;
	
	      if (this.controller !== null) {
	        this.controller.detached();
	      }
	
	      controllers = this.controllers;
	      for (i = 0, ii = controllers.length; i < ii; ++i) {
	        controllers[i].detached();
	      }
	
	      children = this.children;
	      for (i = 0, ii = children.length; i < ii; ++i) {
	        children[i].detached();
	      }
	    }
	  };
	
	  return View;
	}();
	
	var placeholder = [];
	
	function findInsertionPoint(groups, index) {
	  var insertionPoint = void 0;
	
	  while (!insertionPoint && index >= 0) {
	    insertionPoint = groups[index][0];
	    index--;
	  }
	
	  return insertionPoint;
	}
	
	var _ContentSelector = exports._ContentSelector = function () {
	  _ContentSelector.applySelectors = function applySelectors(view, contentSelectors, callback) {
	    var currentChild = view.fragment.firstChild;
	    var contentMap = new Map();
	    var nextSibling = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var contentSelector = void 0;
	
	    while (currentChild) {
	      nextSibling = currentChild.nextSibling;
	
	      if (currentChild.isContentProjectionSource) {
	        var viewSlotSelectors = contentSelectors.map(function (x) {
	          return x.copyForViewSlot();
	        });
	        currentChild.viewSlot._installContentSelectors(viewSlotSelectors);
	      } else {
	        for (i = 0, ii = contentSelectors.length; i < ii; i++) {
	          contentSelector = contentSelectors[i];
	          if (contentSelector.matches(currentChild)) {
	            var elements = contentMap.get(contentSelector);
	            if (!elements) {
	              elements = [];
	              contentMap.set(contentSelector, elements);
	            }
	
	            elements.push(currentChild);
	            break;
	          }
	        }
	      }
	
	      currentChild = nextSibling;
	    }
	
	    for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
	      contentSelector = contentSelectors[i];
	      callback(contentSelector, contentMap.get(contentSelector) || placeholder);
	    }
	  };
	
	  function _ContentSelector(anchor, selector) {
	    _classCallCheck(this, _ContentSelector);
	
	    this.anchor = anchor;
	    this.selector = selector;
	    this.all = !this.selector;
	    this.groups = [];
	  }
	
	  _ContentSelector.prototype.copyForViewSlot = function copyForViewSlot() {
	    return new _ContentSelector(this.anchor, this.selector);
	  };
	
	  _ContentSelector.prototype.matches = function matches(node) {
	    return this.all || node.nodeType === 1 && node.matches(this.selector);
	  };
	
	  _ContentSelector.prototype.add = function add(group) {
	    var anchor = this.anchor;
	    var parent = anchor.parentNode;
	    var i = void 0;
	    var ii = void 0;
	
	    for (i = 0, ii = group.length; i < ii; ++i) {
	      parent.insertBefore(group[i], anchor);
	    }
	
	    this.groups.push(group);
	  };
	
	  _ContentSelector.prototype.insert = function insert(index, group) {
	    if (group.length) {
	      var anchor = findInsertionPoint(this.groups, index) || this.anchor;
	      var parent = anchor.parentNode;
	      var i = void 0;
	      var ii = void 0;
	
	      for (i = 0, ii = group.length; i < ii; ++i) {
	        parent.insertBefore(group[i], anchor);
	      }
	    }
	
	    this.groups.splice(index, 0, group);
	  };
	
	  _ContentSelector.prototype.removeAt = function removeAt(index, fragment) {
	    var group = this.groups[index];
	    var i = void 0;
	    var ii = void 0;
	
	    for (i = 0, ii = group.length; i < ii; ++i) {
	      fragment.appendChild(group[i]);
	    }
	
	    this.groups.splice(index, 1);
	  };
	
	  return _ContentSelector;
	}();
	
	function getAnimatableElement(view) {
	  var firstChild = view.firstChild;
	
	  if (firstChild !== null && firstChild !== undefined && firstChild.nodeType === 8) {
	    var _element = _aureliaPal.DOM.nextElementSibling(firstChild);
	
	    if (_element !== null && _element !== undefined && _element.nodeType === 1 && _element.classList.contains('au-animate')) {
	      return _element;
	    }
	  }
	
	  return null;
	}
	
	var ViewSlot = exports.ViewSlot = function () {
	  function ViewSlot(anchor, anchorIsContainer) {
	    var animator = arguments.length <= 2 || arguments[2] === undefined ? Animator.instance : arguments[2];
	
	    _classCallCheck(this, ViewSlot);
	
	    this.anchor = anchor;
	    this.viewAddMethod = anchorIsContainer ? 'appendNodesTo' : 'insertNodesBefore';
	    this.bindingContext = null;
	    this.overrideContext = null;
	    this.animator = animator;
	    this.children = [];
	    this.isBound = false;
	    this.isAttached = false;
	    this.contentSelectors = null;
	    anchor.viewSlot = this;
	    anchor.isContentProjectionSource = false;
	  }
	
	  ViewSlot.prototype.transformChildNodesIntoView = function transformChildNodesIntoView() {
	    var parent = this.anchor;
	
	    this.children.push({
	      fragment: parent,
	      firstChild: parent.firstChild,
	      lastChild: parent.lastChild,
	      returnToCache: function returnToCache() {},
	      removeNodes: function removeNodes() {
	        var last = void 0;
	
	        while (last = parent.lastChild) {
	          parent.removeChild(last);
	        }
	      },
	      created: function created() {},
	      bind: function bind() {},
	      unbind: function unbind() {},
	      attached: function attached() {},
	      detached: function detached() {}
	    });
	  };
	
	  ViewSlot.prototype.bind = function bind(bindingContext, overrideContext) {
	    var i = void 0;
	    var ii = void 0;
	    var children = void 0;
	
	    if (this.isBound) {
	      if (this.bindingContext === bindingContext) {
	        return;
	      }
	
	      this.unbind();
	    }
	
	    this.isBound = true;
	    this.bindingContext = bindingContext = bindingContext || this.bindingContext;
	    this.overrideContext = overrideContext = overrideContext || this.overrideContext;
	
	    children = this.children;
	    for (i = 0, ii = children.length; i < ii; ++i) {
	      children[i].bind(bindingContext, overrideContext, true);
	    }
	  };
	
	  ViewSlot.prototype.unbind = function unbind() {
	    if (this.isBound) {
	      var i = void 0;
	      var ii = void 0;
	      var _children = this.children;
	
	      this.isBound = false;
	      this.bindingContext = null;
	      this.overrideContext = null;
	
	      for (i = 0, ii = _children.length; i < ii; ++i) {
	        _children[i].unbind();
	      }
	    }
	  };
	
	  ViewSlot.prototype.add = function add(view) {
	    view[this.viewAddMethod](this.anchor);
	    this.children.push(view);
	
	    if (this.isAttached) {
	      view.attached();
	
	      var animatableElement = getAnimatableElement(view);
	      if (animatableElement !== null) {
	        return this.animator.enter(animatableElement);
	      }
	    }
	  };
	
	  ViewSlot.prototype.insert = function insert(index, view) {
	    var children = this.children;
	    var length = children.length;
	
	    if (index === 0 && length === 0 || index >= length) {
	      return this.add(view);
	    }
	
	    view.insertNodesBefore(children[index].firstChild);
	    children.splice(index, 0, view);
	
	    if (this.isAttached) {
	      view.attached();
	
	      var animatableElement = getAnimatableElement(view);
	      if (animatableElement !== null) {
	        return this.animator.enter(animatableElement);
	      }
	    }
	  };
	
	  ViewSlot.prototype.move = function move(sourceIndex, targetIndex) {
	    if (sourceIndex === targetIndex) {
	      return;
	    }
	
	    var children = this.children;
	    var view = children[sourceIndex];
	
	    view.removeNodes();
	    view.insertNodesBefore(children[targetIndex].firstChild);
	    children.splice(sourceIndex, 1);
	    children.splice(targetIndex, 0, view);
	  };
	
	  ViewSlot.prototype.remove = function remove(view, returnToCache, skipAnimation) {
	    return this.removeAt(this.children.indexOf(view), returnToCache, skipAnimation);
	  };
	
	  ViewSlot.prototype.removeMany = function removeMany(viewsToRemove, returnToCache, skipAnimation) {
	    var _this4 = this;
	
	    var children = this.children;
	    var ii = viewsToRemove.length;
	    var i = void 0;
	    var rmPromises = [];
	
	    viewsToRemove.forEach(function (child) {
	      if (skipAnimation) {
	        child.removeNodes();
	        return;
	      }
	
	      var animatableElement = getAnimatableElement(child);
	      if (animatableElement !== null) {
	        rmPromises.push(_this4.animator.leave(animatableElement).then(function () {
	          return child.removeNodes();
	        }));
	      } else {
	        child.removeNodes();
	      }
	    });
	
	    var removeAction = function removeAction() {
	      if (_this4.isAttached) {
	        for (i = 0; i < ii; ++i) {
	          viewsToRemove[i].detached();
	        }
	      }
	
	      if (returnToCache) {
	        for (i = 0; i < ii; ++i) {
	          viewsToRemove[i].returnToCache();
	        }
	      }
	
	      for (i = 0; i < ii; ++i) {
	        var index = children.indexOf(viewsToRemove[i]);
	        if (index >= 0) {
	          children.splice(index, 1);
	        }
	      }
	    };
	
	    if (rmPromises.length > 0) {
	      return Promise.all(rmPromises).then(function () {
	        return removeAction();
	      });
	    }
	
	    removeAction();
	  };
	
	  ViewSlot.prototype.removeAt = function removeAt(index, returnToCache, skipAnimation) {
	    var _this5 = this;
	
	    var view = this.children[index];
	
	    var removeAction = function removeAction() {
	      index = _this5.children.indexOf(view);
	      view.removeNodes();
	      _this5.children.splice(index, 1);
	
	      if (_this5.isAttached) {
	        view.detached();
	      }
	
	      if (returnToCache) {
	        view.returnToCache();
	      }
	
	      return view;
	    };
	
	    if (!skipAnimation) {
	      var animatableElement = getAnimatableElement(view);
	      if (animatableElement !== null) {
	        return this.animator.leave(animatableElement).then(function () {
	          return removeAction();
	        });
	      }
	    }
	
	    return removeAction();
	  };
	
	  ViewSlot.prototype.removeAll = function removeAll(returnToCache, skipAnimation) {
	    var _this6 = this;
	
	    var children = this.children;
	    var ii = children.length;
	    var i = void 0;
	    var rmPromises = [];
	
	    children.forEach(function (child) {
	      if (skipAnimation) {
	        child.removeNodes();
	        return;
	      }
	
	      var animatableElement = getAnimatableElement(child);
	      if (animatableElement !== null) {
	        rmPromises.push(_this6.animator.leave(animatableElement).then(function () {
	          return child.removeNodes();
	        }));
	      } else {
	        child.removeNodes();
	      }
	    });
	
	    var removeAction = function removeAction() {
	      if (_this6.isAttached) {
	        for (i = 0; i < ii; ++i) {
	          children[i].detached();
	        }
	      }
	
	      if (returnToCache) {
	        for (i = 0; i < ii; ++i) {
	          children[i].returnToCache();
	        }
	      }
	
	      _this6.children = [];
	    };
	
	    if (rmPromises.length > 0) {
	      return Promise.all(rmPromises).then(function () {
	        return removeAction();
	      });
	    }
	
	    removeAction();
	  };
	
	  ViewSlot.prototype.attached = function attached() {
	    var i = void 0;
	    var ii = void 0;
	    var children = void 0;
	    var child = void 0;
	
	    if (this.isAttached) {
	      return;
	    }
	
	    this.isAttached = true;
	
	    children = this.children;
	    for (i = 0, ii = children.length; i < ii; ++i) {
	      child = children[i];
	      child.attached();
	
	      var _element2 = child.firstChild ? _aureliaPal.DOM.nextElementSibling(child.firstChild) : null;
	      if (child.firstChild && child.firstChild.nodeType === 8 && _element2 && _element2.nodeType === 1 && _element2.classList.contains('au-animate')) {
	        this.animator.enter(_element2);
	      }
	    }
	  };
	
	  ViewSlot.prototype.detached = function detached() {
	    var i = void 0;
	    var ii = void 0;
	    var children = void 0;
	
	    if (this.isAttached) {
	      this.isAttached = false;
	      children = this.children;
	      for (i = 0, ii = children.length; i < ii; ++i) {
	        children[i].detached();
	      }
	    }
	  };
	
	  ViewSlot.prototype._installContentSelectors = function _installContentSelectors(contentSelectors) {
	    this.contentSelectors = contentSelectors;
	    this.add = this._contentSelectorAdd;
	    this.insert = this._contentSelectorInsert;
	    this.remove = this._contentSelectorRemove;
	    this.removeAt = this._contentSelectorRemoveAt;
	    this.removeAll = this._contentSelectorRemoveAll;
	  };
	
	  ViewSlot.prototype._contentSelectorAdd = function _contentSelectorAdd(view) {
	    _ContentSelector.applySelectors(view, this.contentSelectors, function (contentSelector, group) {
	      return contentSelector.add(group);
	    });
	
	    this.children.push(view);
	
	    if (this.isAttached) {
	      view.attached();
	    }
	  };
	
	  ViewSlot.prototype._contentSelectorInsert = function _contentSelectorInsert(index, view) {
	    if (index === 0 && !this.children.length || index >= this.children.length) {
	      this.add(view);
	    } else {
	      _ContentSelector.applySelectors(view, this.contentSelectors, function (contentSelector, group) {
	        return contentSelector.insert(index, group);
	      });
	
	      this.children.splice(index, 0, view);
	
	      if (this.isAttached) {
	        view.attached();
	      }
	    }
	  };
	
	  ViewSlot.prototype._contentSelectorRemove = function _contentSelectorRemove(view) {
	    var index = this.children.indexOf(view);
	    var contentSelectors = this.contentSelectors;
	    var i = void 0;
	    var ii = void 0;
	
	    for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
	      contentSelectors[i].removeAt(index, view.fragment);
	    }
	
	    this.children.splice(index, 1);
	
	    if (this.isAttached) {
	      view.detached();
	    }
	  };
	
	  ViewSlot.prototype._contentSelectorRemoveAt = function _contentSelectorRemoveAt(index) {
	    var view = this.children[index];
	    var contentSelectors = this.contentSelectors;
	    var i = void 0;
	    var ii = void 0;
	
	    for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
	      contentSelectors[i].removeAt(index, view.fragment);
	    }
	
	    this.children.splice(index, 1);
	
	    if (this.isAttached) {
	      view.detached();
	    }
	
	    return view;
	  };
	
	  ViewSlot.prototype._contentSelectorRemoveAll = function _contentSelectorRemoveAll() {
	    var children = this.children;
	    var contentSelectors = this.contentSelectors;
	    var ii = children.length;
	    var jj = contentSelectors.length;
	    var i = void 0;
	    var j = void 0;
	    var view = void 0;
	
	    for (i = 0; i < ii; ++i) {
	      view = children[i];
	
	      for (j = 0; j < jj; ++j) {
	        contentSelectors[j].removeAt(0, view.fragment);
	      }
	    }
	
	    if (this.isAttached) {
	      for (i = 0; i < ii; ++i) {
	        children[i].detached();
	      }
	    }
	
	    this.children = [];
	  };
	
	  return ViewSlot;
	}();
	
	var ProviderResolver = (0, _aureliaDependencyInjection.resolver)(_class11 = function () {
	  function ProviderResolver() {
	    _classCallCheck(this, ProviderResolver);
	  }
	
	  ProviderResolver.prototype.get = function get(container, key) {
	    var id = key.__providerId__;
	    return id in container ? container[id] : container[id] = container.invoke(key);
	  };
	
	  return ProviderResolver;
	}()) || _class11;
	
	var providerResolverInstance = new ProviderResolver();
	
	function elementContainerGet(key) {
	  if (key === _aureliaPal.DOM.Element) {
	    return this.element;
	  }
	
	  if (key === BoundViewFactory) {
	    if (this.boundViewFactory) {
	      return this.boundViewFactory;
	    }
	
	    var factory = this.instruction.viewFactory;
	    var _partReplacements = this.partReplacements;
	
	    if (_partReplacements) {
	      factory = _partReplacements[factory.part] || factory;
	    }
	
	    this.boundViewFactory = new BoundViewFactory(this, factory, _partReplacements);
	    return this.boundViewFactory;
	  }
	
	  if (key === ViewSlot) {
	    if (this.viewSlot === undefined) {
	      this.viewSlot = new ViewSlot(this.element, this.instruction.anchorIsContainer);
	      this.element.isContentProjectionSource = this.instruction.lifting;
	      this.children.push(this.viewSlot);
	    }
	
	    return this.viewSlot;
	  }
	
	  if (key === ElementEvents) {
	    return this.elementEvents || (this.elementEvents = new ElementEvents(this.element));
	  }
	
	  if (key === CompositionTransaction) {
	    return this.compositionTransaction || (this.compositionTransaction = this.parent.get(key));
	  }
	
	  if (key === ViewResources) {
	    return this.viewResources;
	  }
	
	  if (key === TargetInstruction) {
	    return this.instruction;
	  }
	
	  return this.superGet(key);
	}
	
	function createElementContainer(parent, element, instruction, children, partReplacements, resources) {
	  var container = parent.createChild();
	  var providers = void 0;
	  var i = void 0;
	
	  container.element = element;
	  container.instruction = instruction;
	  container.children = children;
	  container.viewResources = resources;
	  container.partReplacements = partReplacements;
	
	  providers = instruction.providers;
	  i = providers.length;
	
	  while (i--) {
	    container._resolvers.set(providers[i], providerResolverInstance);
	  }
	
	  container.superGet = container.get;
	  container.get = elementContainerGet;
	
	  return container;
	}
	
	function makeElementIntoAnchor(element, elementInstruction) {
	  var anchor = _aureliaPal.DOM.createComment('anchor');
	
	  if (elementInstruction) {
	    anchor.hasAttribute = function (name) {
	      return element.hasAttribute(name);
	    };
	    anchor.getAttribute = function (name) {
	      return element.getAttribute(name);
	    };
	    anchor.setAttribute = function (name, value) {
	      element.setAttribute(name, value);
	    };
	  }
	
	  _aureliaPal.DOM.replaceNode(anchor, element);
	
	  return anchor;
	}
	
	function applyInstructions(containers, element, instruction, controllers, bindings, children, contentSelectors, partReplacements, resources) {
	  var behaviorInstructions = instruction.behaviorInstructions;
	  var expressions = instruction.expressions;
	  var elementContainer = void 0;
	  var i = void 0;
	  var ii = void 0;
	  var current = void 0;
	  var instance = void 0;
	
	  if (instruction.contentExpression) {
	    bindings.push(instruction.contentExpression.createBinding(element.nextSibling));
	    element.parentNode.removeChild(element);
	    return;
	  }
	
	  if (instruction.contentSelector) {
	    var commentAnchor = _aureliaPal.DOM.createComment('anchor');
	    _aureliaPal.DOM.replaceNode(commentAnchor, element);
	    contentSelectors.push(new _ContentSelector(commentAnchor, instruction.selector));
	    return;
	  }
	
	  if (behaviorInstructions.length) {
	    if (!instruction.anchorIsContainer) {
	      element = makeElementIntoAnchor(element, instruction.elementInstruction);
	    }
	
	    containers[instruction.injectorId] = elementContainer = createElementContainer(containers[instruction.parentInjectorId], element, instruction, children, partReplacements, resources);
	
	    for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
	      current = behaviorInstructions[i];
	      instance = current.type.create(elementContainer, current, element, bindings);
	
	      if (instance.contentView) {
	        children.push(instance.contentView);
	      }
	
	      controllers.push(instance);
	    }
	  }
	
	  for (i = 0, ii = expressions.length; i < ii; ++i) {
	    bindings.push(expressions[i].createBinding(element));
	  }
	}
	
	function styleStringToObject(style, target) {
	  var attributes = style.split(';');
	  var firstIndexOfColon = void 0;
	  var i = void 0;
	  var current = void 0;
	  var key = void 0;
	  var value = void 0;
	
	  target = target || {};
	
	  for (i = 0; i < attributes.length; i++) {
	    current = attributes[i];
	    firstIndexOfColon = current.indexOf(':');
	    key = current.substring(0, firstIndexOfColon).trim();
	    value = current.substring(firstIndexOfColon + 1).trim();
	    target[key] = value;
	  }
	
	  return target;
	}
	
	function styleObjectToString(obj) {
	  var result = '';
	
	  for (var key in obj) {
	    result += key + ':' + obj[key] + ';';
	  }
	
	  return result;
	}
	
	function applySurrogateInstruction(container, element, instruction, controllers, bindings, children) {
	  var behaviorInstructions = instruction.behaviorInstructions;
	  var expressions = instruction.expressions;
	  var providers = instruction.providers;
	  var values = instruction.values;
	  var i = void 0;
	  var ii = void 0;
	  var current = void 0;
	  var instance = void 0;
	  var currentAttributeValue = void 0;
	
	  i = providers.length;
	  while (i--) {
	    container._resolvers.set(providers[i], providerResolverInstance);
	  }
	
	  for (var key in values) {
	    currentAttributeValue = element.getAttribute(key);
	
	    if (currentAttributeValue) {
	      if (key === 'class') {
	        element.setAttribute('class', currentAttributeValue + ' ' + values[key]);
	      } else if (key === 'style') {
	        var styleObject = styleStringToObject(values[key]);
	        styleStringToObject(currentAttributeValue, styleObject);
	        element.setAttribute('style', styleObjectToString(styleObject));
	      }
	    } else {
	        element.setAttribute(key, values[key]);
	      }
	  }
	
	  if (behaviorInstructions.length) {
	    for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
	      current = behaviorInstructions[i];
	      instance = current.type.create(container, current, element, bindings);
	
	      if (instance.contentView) {
	        children.push(instance.contentView);
	      }
	
	      controllers.push(instance);
	    }
	  }
	
	  for (i = 0, ii = expressions.length; i < ii; ++i) {
	    bindings.push(expressions[i].createBinding(element));
	  }
	}
	
	var BoundViewFactory = exports.BoundViewFactory = function () {
	  function BoundViewFactory(parentContainer, viewFactory, partReplacements) {
	    _classCallCheck(this, BoundViewFactory);
	
	    this.parentContainer = parentContainer;
	    this.viewFactory = viewFactory;
	    this.factoryCreateInstruction = { partReplacements: partReplacements };
	  }
	
	  BoundViewFactory.prototype.create = function create() {
	    var view = this.viewFactory.create(this.parentContainer.createChild(), this.factoryCreateInstruction);
	    view._isUserControlled = true;
	    return view;
	  };
	
	  BoundViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
	    this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
	  };
	
	  BoundViewFactory.prototype.getCachedView = function getCachedView() {
	    return this.viewFactory.getCachedView();
	  };
	
	  BoundViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
	    this.viewFactory.returnViewToCache(view);
	  };
	
	  _createClass(BoundViewFactory, [{
	    key: 'isCaching',
	    get: function get() {
	      return this.viewFactory.isCaching;
	    }
	  }]);
	
	  return BoundViewFactory;
	}();
	
	var ViewFactory = exports.ViewFactory = function () {
	  function ViewFactory(template, instructions, resources) {
	    _classCallCheck(this, ViewFactory);
	
	    this.isCaching = false;
	
	    this.template = template;
	    this.instructions = instructions;
	    this.resources = resources;
	    this.cacheSize = -1;
	    this.cache = null;
	  }
	
	  ViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
	    if (size) {
	      if (size === '*') {
	        size = Number.MAX_VALUE;
	      } else if (typeof size === 'string') {
	        size = parseInt(size, 10);
	      }
	    }
	
	    if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
	      this.cacheSize = size;
	    }
	
	    if (this.cacheSize > 0) {
	      this.cache = [];
	    } else {
	      this.cache = null;
	    }
	
	    this.isCaching = this.cacheSize > 0;
	  };
	
	  ViewFactory.prototype.getCachedView = function getCachedView() {
	    return this.cache !== null ? this.cache.pop() || null : null;
	  };
	
	  ViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
	    if (view.isAttached) {
	      view.detached();
	    }
	
	    if (view.isBound) {
	      view.unbind();
	    }
	
	    if (this.cache !== null && this.cache.length < this.cacheSize) {
	      view.fromCache = true;
	      this.cache.push(view);
	    }
	  };
	
	  ViewFactory.prototype.create = function create(container, createInstruction, element) {
	    createInstruction = createInstruction || BehaviorInstruction.normal;
	    element = element || null;
	
	    var cachedView = this.getCachedView();
	    if (cachedView !== null) {
	      return cachedView;
	    }
	
	    var fragment = createInstruction.enhance ? this.template : this.template.cloneNode(true);
	    var instructables = fragment.querySelectorAll('.au-target');
	    var instructions = this.instructions;
	    var resources = this.resources;
	    var controllers = [];
	    var bindings = [];
	    var children = [];
	    var contentSelectors = [];
	    var containers = { root: container };
	    var partReplacements = createInstruction.partReplacements;
	    var i = void 0;
	    var ii = void 0;
	    var view = void 0;
	    var instructable = void 0;
	    var instruction = void 0;
	
	    this.resources._invokeHook('beforeCreate', this, container, fragment, createInstruction);
	
	    if (element !== null && this.surrogateInstruction !== null) {
	      applySurrogateInstruction(container, element, this.surrogateInstruction, controllers, bindings, children);
	    }
	
	    for (i = 0, ii = instructables.length; i < ii; ++i) {
	      instructable = instructables[i];
	      instruction = instructions[instructable.getAttribute('au-target-id')];
	
	      applyInstructions(containers, instructable, instruction, controllers, bindings, children, contentSelectors, partReplacements, resources);
	    }
	
	    view = new View(container, this, fragment, controllers, bindings, children, contentSelectors);
	
	    if (!createInstruction.initiatedByBehavior) {
	      view.created();
	    }
	
	    this.resources._invokeHook('afterCreate', view);
	
	    return view;
	  };
	
	  return ViewFactory;
	}();
	
	var nextInjectorId = 0;
	function getNextInjectorId() {
	  return ++nextInjectorId;
	}
	
	function configureProperties(instruction, resources) {
	  var type = instruction.type;
	  var attrName = instruction.attrName;
	  var attributes = instruction.attributes;
	  var property = void 0;
	  var key = void 0;
	  var value = void 0;
	
	  var knownAttribute = resources.mapAttribute(attrName);
	  if (knownAttribute && attrName in attributes && knownAttribute !== attrName) {
	    attributes[knownAttribute] = attributes[attrName];
	    delete attributes[attrName];
	  }
	
	  for (key in attributes) {
	    value = attributes[key];
	
	    if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	      property = type.attributes[key];
	
	      if (property !== undefined) {
	        value.targetProperty = property.name;
	      } else {
	        value.targetProperty = key;
	      }
	    }
	  }
	}
	
	var lastAUTargetID = 0;
	function getNextAUTargetID() {
	  return (++lastAUTargetID).toString();
	}
	
	function makeIntoInstructionTarget(element) {
	  var value = element.getAttribute('class');
	  var auTargetID = getNextAUTargetID();
	
	  element.setAttribute('class', value ? value += ' au-target' : 'au-target');
	  element.setAttribute('au-target-id', auTargetID);
	
	  return auTargetID;
	}
	
	var ViewCompiler = exports.ViewCompiler = (_dec6 = (0, _aureliaDependencyInjection.inject)(BindingLanguage, ViewResources), _dec6(_class13 = function () {
	  function ViewCompiler(bindingLanguage, resources) {
	    _classCallCheck(this, ViewCompiler);
	
	    this.bindingLanguage = bindingLanguage;
	    this.resources = resources;
	  }
	
	  ViewCompiler.prototype.compile = function compile(source, resources, compileInstruction) {
	    resources = resources || this.resources;
	    compileInstruction = compileInstruction || ViewCompileInstruction.normal;
	    source = typeof source === 'string' ? _aureliaPal.DOM.createTemplateFromMarkup(source) : source;
	
	    var content = void 0;
	    var part = void 0;
	    var cacheSize = void 0;
	
	    if (source.content) {
	      part = source.getAttribute('part');
	      cacheSize = source.getAttribute('view-cache');
	      content = _aureliaPal.DOM.adoptNode(source.content);
	    } else {
	      content = source;
	    }
	
	    compileInstruction.targetShadowDOM = compileInstruction.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
	    resources._invokeHook('beforeCompile', content, resources, compileInstruction);
	
	    var instructions = {};
	    this._compileNode(content, resources, instructions, source, 'root', !compileInstruction.targetShadowDOM);
	    content.insertBefore(_aureliaPal.DOM.createComment('<view>'), content.firstChild);
	    content.appendChild(_aureliaPal.DOM.createComment('</view>'));
	
	    var factory = new ViewFactory(content, instructions, resources);
	
	    factory.surrogateInstruction = compileInstruction.compileSurrogate ? this._compileSurrogate(source, resources) : null;
	    factory.part = part;
	
	    if (cacheSize) {
	      factory.setCacheSize(cacheSize);
	    }
	
	    resources._invokeHook('afterCompile', factory);
	
	    return factory;
	  };
	
	  ViewCompiler.prototype._compileNode = function _compileNode(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
	    switch (node.nodeType) {
	      case 1:
	        return this._compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM);
	      case 3:
	        var expression = resources.getBindingLanguage(this.bindingLanguage).inspectTextContent(resources, node.wholeText);
	        if (expression) {
	          var marker = _aureliaPal.DOM.createElement('au-marker');
	          var auTargetID = makeIntoInstructionTarget(marker);
	          (node.parentNode || parentNode).insertBefore(marker, node);
	          node.textContent = ' ';
	          instructions[auTargetID] = TargetInstruction.contentExpression(expression);
	
	          while (node.nextSibling && node.nextSibling.nodeType === 3) {
	            (node.parentNode || parentNode).removeChild(node.nextSibling);
	          }
	        } else {
	          while (node.nextSibling && node.nextSibling.nodeType === 3) {
	            node = node.nextSibling;
	          }
	        }
	        return node.nextSibling;
	      case 11:
	        var currentChild = node.firstChild;
	        while (currentChild) {
	          currentChild = this._compileNode(currentChild, resources, instructions, node, parentInjectorId, targetLightDOM);
	        }
	        break;
	      default:
	        break;
	    }
	
	    return node.nextSibling;
	  };
	
	  ViewCompiler.prototype._compileSurrogate = function _compileSurrogate(node, resources) {
	    var tagName = node.tagName.toLowerCase();
	    var attributes = node.attributes;
	    var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
	    var knownAttribute = void 0;
	    var property = void 0;
	    var instruction = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var attr = void 0;
	    var attrName = void 0;
	    var attrValue = void 0;
	    var info = void 0;
	    var type = void 0;
	    var expressions = [];
	    var expression = void 0;
	    var behaviorInstructions = [];
	    var values = {};
	    var hasValues = false;
	    var providers = [];
	
	    for (i = 0, ii = attributes.length; i < ii; ++i) {
	      attr = attributes[i];
	      attrName = attr.name;
	      attrValue = attr.value;
	
	      info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);
	      type = resources.getAttribute(info.attrName);
	
	      if (type) {
	        knownAttribute = resources.mapAttribute(info.attrName);
	        if (knownAttribute) {
	          property = type.attributes[knownAttribute];
	
	          if (property) {
	            info.defaultBindingMode = property.defaultBindingMode;
	
	            if (!info.command && !info.expression) {
	              info.command = property.hasOptions ? 'options' : null;
	            }
	          }
	        }
	      }
	
	      instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
	
	      if (instruction) {
	        if (instruction.alteredAttr) {
	          type = resources.getAttribute(instruction.attrName);
	        }
	
	        if (instruction.discrete) {
	          expressions.push(instruction);
	        } else {
	          if (type) {
	            instruction.type = type;
	            configureProperties(instruction, resources);
	
	            if (type.liftsContent) {
	              throw new Error('You cannot place a template controller on a surrogate element.');
	            } else {
	              behaviorInstructions.push(instruction);
	            }
	          } else {
	            expressions.push(instruction.attributes[instruction.attrName]);
	          }
	        }
	      } else {
	        if (type) {
	          instruction = BehaviorInstruction.attribute(attrName, type);
	          instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
	
	          if (type.liftsContent) {
	            throw new Error('You cannot place a template controller on a surrogate element.');
	          } else {
	            behaviorInstructions.push(instruction);
	          }
	        } else if (attrName !== 'id' && attrName !== 'part' && attrName !== 'replace-part') {
	          hasValues = true;
	          values[attrName] = attrValue;
	        }
	      }
	    }
	
	    if (expressions.length || behaviorInstructions.length || hasValues) {
	      for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
	        instruction = behaviorInstructions[i];
	        instruction.type.compile(this, resources, node, instruction);
	        providers.push(instruction.type.target);
	      }
	
	      for (i = 0, ii = expressions.length; i < ii; ++i) {
	        expression = expressions[i];
	        if (expression.attrToRemove !== undefined) {
	          node.removeAttribute(expression.attrToRemove);
	        }
	      }
	
	      return TargetInstruction.surrogate(providers, behaviorInstructions, expressions, values);
	    }
	
	    return null;
	  };
	
	  ViewCompiler.prototype._compileElement = function _compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
	    var tagName = node.tagName.toLowerCase();
	    var attributes = node.attributes;
	    var expressions = [];
	    var expression = void 0;
	    var behaviorInstructions = [];
	    var providers = [];
	    var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
	    var liftingInstruction = void 0;
	    var viewFactory = void 0;
	    var type = void 0;
	    var elementInstruction = void 0;
	    var elementProperty = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var attr = void 0;
	    var attrName = void 0;
	    var attrValue = void 0;
	    var instruction = void 0;
	    var info = void 0;
	    var property = void 0;
	    var knownAttribute = void 0;
	    var auTargetID = void 0;
	    var injectorId = void 0;
	
	    if (tagName === 'content') {
	      if (targetLightDOM) {
	        auTargetID = makeIntoInstructionTarget(node);
	        instructions[auTargetID] = TargetInstruction.contentSelector(node, parentInjectorId);
	      }
	      return node.nextSibling;
	    } else if (tagName === 'template') {
	      viewFactory = this.compile(node, resources);
	      viewFactory.part = node.getAttribute('part');
	    } else {
	      type = resources.getElement(node.getAttribute('as-element') || tagName);
	      if (type) {
	        elementInstruction = BehaviorInstruction.element(node, type);
	        type.processAttributes(this, resources, node, attributes, elementInstruction);
	        behaviorInstructions.push(elementInstruction);
	      }
	    }
	
	    for (i = 0, ii = attributes.length; i < ii; ++i) {
	      attr = attributes[i];
	      attrName = attr.name;
	      attrValue = attr.value;
	      info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);
	      type = resources.getAttribute(info.attrName);
	      elementProperty = null;
	
	      if (type) {
	        knownAttribute = resources.mapAttribute(info.attrName);
	        if (knownAttribute) {
	          property = type.attributes[knownAttribute];
	
	          if (property) {
	            info.defaultBindingMode = property.defaultBindingMode;
	
	            if (!info.command && !info.expression) {
	              info.command = property.hasOptions ? 'options' : null;
	            }
	          }
	        }
	      } else if (elementInstruction) {
	          elementProperty = elementInstruction.type.attributes[info.attrName];
	          if (elementProperty) {
	            info.defaultBindingMode = elementProperty.defaultBindingMode;
	          }
	        }
	
	      if (elementProperty) {
	        instruction = bindingLanguage.createAttributeInstruction(resources, node, info, elementInstruction);
	      } else {
	        instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
	      }
	
	      if (instruction) {
	        if (instruction.alteredAttr) {
	          type = resources.getAttribute(instruction.attrName);
	        }
	
	        if (instruction.discrete) {
	          expressions.push(instruction);
	        } else {
	          if (type) {
	            instruction.type = type;
	            configureProperties(instruction, resources);
	
	            if (type.liftsContent) {
	              instruction.originalAttrName = attrName;
	              liftingInstruction = instruction;
	              break;
	            } else {
	              behaviorInstructions.push(instruction);
	            }
	          } else if (elementProperty) {
	            elementInstruction.attributes[info.attrName].targetProperty = elementProperty.name;
	          } else {
	            expressions.push(instruction.attributes[instruction.attrName]);
	          }
	        }
	      } else {
	        if (type) {
	          instruction = BehaviorInstruction.attribute(attrName, type);
	          instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
	
	          if (type.liftsContent) {
	            instruction.originalAttrName = attrName;
	            liftingInstruction = instruction;
	            break;
	          } else {
	            behaviorInstructions.push(instruction);
	          }
	        } else if (elementProperty) {
	          elementInstruction.attributes[attrName] = attrValue;
	        }
	      }
	    }
	
	    if (liftingInstruction) {
	      liftingInstruction.viewFactory = viewFactory;
	      node = liftingInstruction.type.compile(this, resources, node, liftingInstruction, parentNode);
	      auTargetID = makeIntoInstructionTarget(node);
	      instructions[auTargetID] = TargetInstruction.lifting(parentInjectorId, liftingInstruction);
	    } else {
	      if (expressions.length || behaviorInstructions.length) {
	        injectorId = behaviorInstructions.length ? getNextInjectorId() : false;
	
	        for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
	          instruction = behaviorInstructions[i];
	          instruction.type.compile(this, resources, node, instruction, parentNode);
	          providers.push(instruction.type.target);
	        }
	
	        for (i = 0, ii = expressions.length; i < ii; ++i) {
	          expression = expressions[i];
	          if (expression.attrToRemove !== undefined) {
	            node.removeAttribute(expression.attrToRemove);
	          }
	        }
	
	        auTargetID = makeIntoInstructionTarget(node);
	        instructions[auTargetID] = TargetInstruction.normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction);
	      }
	
	      if (elementInstruction && elementInstruction.skipContentProcessing) {
	        return node.nextSibling;
	      }
	
	      var currentChild = node.firstChild;
	      while (currentChild) {
	        currentChild = this._compileNode(currentChild, resources, instructions, node, injectorId || parentInjectorId, targetLightDOM);
	      }
	    }
	
	    return node.nextSibling;
	  };
	
	  return ViewCompiler;
	}()) || _class13);
	
	var ResourceModule = exports.ResourceModule = function () {
	  function ResourceModule(moduleId) {
	    _classCallCheck(this, ResourceModule);
	
	    this.id = moduleId;
	    this.moduleInstance = null;
	    this.mainResource = null;
	    this.resources = null;
	    this.viewStrategy = null;
	    this.isInitialized = false;
	    this.onLoaded = null;
	  }
	
	  ResourceModule.prototype.initialize = function initialize(container) {
	    var current = this.mainResource;
	    var resources = this.resources;
	    var vs = this.viewStrategy;
	
	    if (this.isInitialized) {
	      return;
	    }
	
	    this.isInitialized = true;
	
	    if (current !== undefined) {
	      current.metadata.viewStrategy = vs;
	      current.initialize(container);
	    }
	
	    for (var i = 0, ii = resources.length; i < ii; ++i) {
	      current = resources[i];
	      current.metadata.viewStrategy = vs;
	      current.initialize(container);
	    }
	  };
	
	  ResourceModule.prototype.register = function register(registry, name) {
	    var main = this.mainResource;
	    var resources = this.resources;
	
	    if (main !== undefined) {
	      main.register(registry, name);
	      name = null;
	    }
	
	    for (var i = 0, ii = resources.length; i < ii; ++i) {
	      resources[i].register(registry, name);
	      name = null;
	    }
	  };
	
	  ResourceModule.prototype.load = function load(container, loadContext) {
	    if (this.onLoaded !== null) {
	      return this.onLoaded;
	    }
	
	    var main = this.mainResource;
	    var resources = this.resources;
	    var loads = void 0;
	
	    if (main !== undefined) {
	      loads = new Array(resources.length + 1);
	      loads[0] = main.load(container, loadContext);
	      for (var i = 0, ii = resources.length; i < ii; ++i) {
	        loads[i + 1] = resources[i].load(container, loadContext);
	      }
	    } else {
	      loads = new Array(resources.length);
	      for (var _i = 0, _ii = resources.length; _i < _ii; ++_i) {
	        loads[_i] = resources[_i].load(container, loadContext);
	      }
	    }
	
	    this.onLoaded = Promise.all(loads);
	    return this.onLoaded;
	  };
	
	  return ResourceModule;
	}();
	
	var ResourceDescription = exports.ResourceDescription = function () {
	  function ResourceDescription(key, exportedValue, resourceTypeMeta) {
	    _classCallCheck(this, ResourceDescription);
	
	    if (!resourceTypeMeta) {
	      resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);
	
	      if (!resourceTypeMeta) {
	        resourceTypeMeta = new HtmlBehaviorResource();
	        resourceTypeMeta.elementName = _hyphenate(key);
	        _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, resourceTypeMeta, exportedValue);
	      }
	    }
	
	    if (resourceTypeMeta instanceof HtmlBehaviorResource) {
	      if (resourceTypeMeta.elementName === undefined) {
	        resourceTypeMeta.elementName = _hyphenate(key);
	      } else if (resourceTypeMeta.attributeName === undefined) {
	        resourceTypeMeta.attributeName = _hyphenate(key);
	      } else if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
	        HtmlBehaviorResource.convention(key, resourceTypeMeta);
	      }
	    } else if (!resourceTypeMeta.name) {
	      resourceTypeMeta.name = _hyphenate(key);
	    }
	
	    this.metadata = resourceTypeMeta;
	    this.value = exportedValue;
	  }
	
	  ResourceDescription.prototype.initialize = function initialize(container) {
	    this.metadata.initialize(container, this.value);
	  };
	
	  ResourceDescription.prototype.register = function register(registry, name) {
	    this.metadata.register(registry, name);
	  };
	
	  ResourceDescription.prototype.load = function load(container, loadContext) {
	    return this.metadata.load(container, this.value, loadContext);
	  };
	
	  return ResourceDescription;
	}();
	
	var ModuleAnalyzer = exports.ModuleAnalyzer = function () {
	  function ModuleAnalyzer() {
	    _classCallCheck(this, ModuleAnalyzer);
	
	    this.cache = Object.create(null);
	  }
	
	  ModuleAnalyzer.prototype.getAnalysis = function getAnalysis(moduleId) {
	    return this.cache[moduleId];
	  };
	
	  ModuleAnalyzer.prototype.analyze = function analyze(moduleId, moduleInstance, mainResourceKey) {
	    var mainResource = void 0;
	    var fallbackValue = void 0;
	    var fallbackKey = void 0;
	    var resourceTypeMeta = void 0;
	    var key = void 0;
	    var exportedValue = void 0;
	    var resources = [];
	    var conventional = void 0;
	    var vs = void 0;
	    var resourceModule = void 0;
	
	    resourceModule = this.cache[moduleId];
	    if (resourceModule) {
	      return resourceModule;
	    }
	
	    resourceModule = new ResourceModule(moduleId);
	    this.cache[moduleId] = resourceModule;
	
	    if (typeof moduleInstance === 'function') {
	      moduleInstance = { 'default': moduleInstance };
	    }
	
	    if (mainResourceKey) {
	      mainResource = new ResourceDescription(mainResourceKey, moduleInstance[mainResourceKey]);
	    }
	
	    for (key in moduleInstance) {
	      exportedValue = moduleInstance[key];
	
	      if (key === mainResourceKey || typeof exportedValue !== 'function') {
	        continue;
	      }
	
	      resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);
	
	      if (resourceTypeMeta) {
	        if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
	          HtmlBehaviorResource.convention(key, resourceTypeMeta);
	        }
	
	        if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
	          resourceTypeMeta.elementName = _hyphenate(key);
	        }
	
	        if (!mainResource && resourceTypeMeta instanceof HtmlBehaviorResource && resourceTypeMeta.elementName !== null) {
	          mainResource = new ResourceDescription(key, exportedValue, resourceTypeMeta);
	        } else {
	          resources.push(new ResourceDescription(key, exportedValue, resourceTypeMeta));
	        }
	      } else if (viewStrategy.decorates(exportedValue)) {
	        vs = exportedValue;
	      } else if (exportedValue instanceof _aureliaLoader.TemplateRegistryEntry) {
	        vs = new TemplateRegistryViewStrategy(moduleId, exportedValue);
	      } else {
	        if (conventional = HtmlBehaviorResource.convention(key)) {
	          if (conventional.elementName !== null && !mainResource) {
	            mainResource = new ResourceDescription(key, exportedValue, conventional);
	          } else {
	            resources.push(new ResourceDescription(key, exportedValue, conventional));
	          }
	
	          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
	        } else if (conventional = _aureliaBinding.ValueConverterResource.convention(key)) {
	          resources.push(new ResourceDescription(key, exportedValue, conventional));
	          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
	        } else if (conventional = _aureliaBinding.BindingBehaviorResource.convention(key)) {
	          resources.push(new ResourceDescription(key, exportedValue, conventional));
	          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
	        } else if (!fallbackValue) {
	          fallbackValue = exportedValue;
	          fallbackKey = key;
	        }
	      }
	    }
	
	    if (!mainResource && fallbackValue) {
	      mainResource = new ResourceDescription(fallbackKey, fallbackValue);
	    }
	
	    resourceModule.moduleInstance = moduleInstance;
	    resourceModule.mainResource = mainResource;
	    resourceModule.resources = resources;
	    resourceModule.viewStrategy = vs;
	
	    return resourceModule;
	  };
	
	  return ModuleAnalyzer;
	}();
	
	var logger = LogManager.getLogger('templating');
	
	function ensureRegistryEntry(loader, urlOrRegistryEntry) {
	  if (urlOrRegistryEntry instanceof _aureliaLoader.TemplateRegistryEntry) {
	    return Promise.resolve(urlOrRegistryEntry);
	  }
	
	  return loader.loadTemplate(urlOrRegistryEntry);
	}
	
	var ProxyViewFactory = function () {
	  function ProxyViewFactory(promise) {
	    var _this7 = this;
	
	    _classCallCheck(this, ProxyViewFactory);
	
	    promise.then(function (x) {
	      return _this7.viewFactory = x;
	    });
	  }
	
	  ProxyViewFactory.prototype.create = function create(container, bindingContext, createInstruction, element) {
	    return this.viewFactory.create(container, bindingContext, createInstruction, element);
	  };
	
	  ProxyViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
	    this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
	  };
	
	  ProxyViewFactory.prototype.getCachedView = function getCachedView() {
	    return this.viewFactory.getCachedView();
	  };
	
	  ProxyViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
	    this.viewFactory.returnViewToCache(view);
	  };
	
	  _createClass(ProxyViewFactory, [{
	    key: 'isCaching',
	    get: function get() {
	      return this.viewFactory.isCaching;
	    }
	  }]);
	
	  return ProxyViewFactory;
	}();
	
	var ViewEngine = exports.ViewEngine = (_dec7 = (0, _aureliaDependencyInjection.inject)(_aureliaLoader.Loader, _aureliaDependencyInjection.Container, ViewCompiler, ModuleAnalyzer, ViewResources), _dec7(_class14 = function () {
	  function ViewEngine(loader, container, viewCompiler, moduleAnalyzer, appResources) {
	    _classCallCheck(this, ViewEngine);
	
	    this.loader = loader;
	    this.container = container;
	    this.viewCompiler = viewCompiler;
	    this.moduleAnalyzer = moduleAnalyzer;
	    this.appResources = appResources;
	    this._pluginMap = {};
	  }
	
	  ViewEngine.prototype.addResourcePlugin = function addResourcePlugin(extension, implementation) {
	    var name = extension.replace('.', '') + '-resource-plugin';
	    this._pluginMap[extension] = name;
	    this.loader.addPlugin(name, implementation);
	  };
	
	  ViewEngine.prototype.loadViewFactory = function loadViewFactory(urlOrRegistryEntry, compileInstruction, loadContext) {
	    var _this8 = this;
	
	    loadContext = loadContext || new ResourceLoadContext();
	
	    return ensureRegistryEntry(this.loader, urlOrRegistryEntry).then(function (registryEntry) {
	      if (registryEntry.onReady) {
	        if (!loadContext.hasDependency(urlOrRegistryEntry)) {
	          loadContext.addDependency(urlOrRegistryEntry);
	          return registryEntry.onReady;
	        }
	
	        return Promise.resolve(new ProxyViewFactory(registryEntry.onReady));
	      }
	
	      loadContext.addDependency(urlOrRegistryEntry);
	
	      registryEntry.onReady = _this8.loadTemplateResources(registryEntry, compileInstruction, loadContext).then(function (resources) {
	        registryEntry.resources = resources;
	        var viewFactory = _this8.viewCompiler.compile(registryEntry.template, resources, compileInstruction);
	        registryEntry.factory = viewFactory;
	        return viewFactory;
	      });
	
	      return registryEntry.onReady;
	    });
	  };
	
	  ViewEngine.prototype.loadTemplateResources = function loadTemplateResources(registryEntry, compileInstruction, loadContext) {
	    var resources = new ViewResources(this.appResources, registryEntry.address);
	    var dependencies = registryEntry.dependencies;
	    var importIds = void 0;
	    var names = void 0;
	
	    compileInstruction = compileInstruction || ViewCompileInstruction.normal;
	
	    if (dependencies.length === 0 && !compileInstruction.associatedModuleId) {
	      return Promise.resolve(resources);
	    }
	
	    importIds = dependencies.map(function (x) {
	      return x.src;
	    });
	    names = dependencies.map(function (x) {
	      return x.name;
	    });
	    logger.debug('importing resources for ' + registryEntry.address, importIds);
	
	    return this.importViewResources(importIds, names, resources, compileInstruction, loadContext);
	  };
	
	  ViewEngine.prototype.importViewModelResource = function importViewModelResource(moduleImport, moduleMember) {
	    var _this9 = this;
	
	    return this.loader.loadModule(moduleImport).then(function (viewModelModule) {
	      var normalizedId = _aureliaMetadata.Origin.get(viewModelModule).moduleId;
	      var resourceModule = _this9.moduleAnalyzer.analyze(normalizedId, viewModelModule, moduleMember);
	
	      if (!resourceModule.mainResource) {
	        throw new Error('No view model found in module "' + moduleImport + '".');
	      }
	
	      resourceModule.initialize(_this9.container);
	
	      return resourceModule.mainResource;
	    });
	  };
	
	  ViewEngine.prototype.importViewResources = function importViewResources(moduleIds, names, resources, compileInstruction, loadContext) {
	    var _this10 = this;
	
	    loadContext = loadContext || new ResourceLoadContext();
	    compileInstruction = compileInstruction || ViewCompileInstruction.normal;
	
	    moduleIds = moduleIds.map(function (x) {
	      return _this10._applyLoaderPlugin(x);
	    });
	
	    return this.loader.loadAllModules(moduleIds).then(function (imports) {
	      var i = void 0;
	      var ii = void 0;
	      var analysis = void 0;
	      var normalizedId = void 0;
	      var current = void 0;
	      var associatedModule = void 0;
	      var container = _this10.container;
	      var moduleAnalyzer = _this10.moduleAnalyzer;
	      var allAnalysis = new Array(imports.length);
	
	      for (i = 0, ii = imports.length; i < ii; ++i) {
	        current = imports[i];
	        normalizedId = _aureliaMetadata.Origin.get(current).moduleId;
	
	        analysis = moduleAnalyzer.analyze(normalizedId, current);
	        analysis.initialize(container);
	        analysis.register(resources, names[i]);
	
	        allAnalysis[i] = analysis;
	      }
	
	      if (compileInstruction.associatedModuleId) {
	        associatedModule = moduleAnalyzer.getAnalysis(compileInstruction.associatedModuleId);
	
	        if (associatedModule) {
	          associatedModule.register(resources);
	        }
	      }
	
	      for (i = 0, ii = allAnalysis.length; i < ii; ++i) {
	        allAnalysis[i] = allAnalysis[i].load(container, loadContext);
	      }
	
	      return Promise.all(allAnalysis).then(function () {
	        return resources;
	      });
	    });
	  };
	
	  ViewEngine.prototype._applyLoaderPlugin = function _applyLoaderPlugin(id) {
	    var index = id.lastIndexOf('.');
	    if (index !== -1) {
	      var ext = id.substring(index);
	      var pluginName = this._pluginMap[ext];
	
	      if (pluginName === undefined) {
	        return id;
	      }
	
	      return this.loader.applyPluginToUrl(id, pluginName);
	    }
	
	    return id;
	  };
	
	  return ViewEngine;
	}()) || _class14);
	
	var Controller = exports.Controller = function () {
	  function Controller(behavior, instruction, viewModel, elementEvents) {
	    _classCallCheck(this, Controller);
	
	    this.behavior = behavior;
	    this.instruction = instruction;
	    this.viewModel = viewModel;
	    this.isAttached = false;
	    this.view = null;
	    this.isBound = false;
	    this.scope = null;
	    this.elementEvents = elementEvents || null;
	
	    var observerLookup = behavior.observerLocator.getOrCreateObserversLookup(viewModel);
	    var handlesBind = behavior.handlesBind;
	    var attributes = instruction.attributes;
	    var boundProperties = this.boundProperties = [];
	    var properties = behavior.properties;
	    var i = void 0;
	    var ii = void 0;
	
	    behavior._ensurePropertiesDefined(viewModel, observerLookup);
	
	    for (i = 0, ii = properties.length; i < ii; ++i) {
	      properties[i]._initialize(viewModel, observerLookup, attributes, handlesBind, boundProperties);
	    }
	  }
	
	  Controller.prototype.created = function created(owningView) {
	    if (this.behavior.handlesCreated) {
	      this.viewModel.created(owningView, this.view);
	    }
	  };
	
	  Controller.prototype.automate = function automate(overrideContext, owningView) {
	    this.view.bindingContext = this.viewModel;
	    this.view.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(this.viewModel);
	    this.view._isUserControlled = true;
	
	    if (this.behavior.handlesCreated) {
	      this.viewModel.created(owningView || null, this.view);
	    }
	
	    this.bind(this.view);
	  };
	
	  Controller.prototype.bind = function bind(scope) {
	    var skipSelfSubscriber = this.behavior.handlesBind;
	    var boundProperties = this.boundProperties;
	    var i = void 0;
	    var ii = void 0;
	    var x = void 0;
	    var observer = void 0;
	    var selfSubscriber = void 0;
	
	    if (this.isBound) {
	      if (this.scope === scope) {
	        return;
	      }
	
	      this.unbind();
	    }
	
	    this.isBound = true;
	    this.scope = scope;
	
	    for (i = 0, ii = boundProperties.length; i < ii; ++i) {
	      x = boundProperties[i];
	      observer = x.observer;
	      selfSubscriber = observer.selfSubscriber;
	      observer.publishing = false;
	
	      if (skipSelfSubscriber) {
	        observer.selfSubscriber = null;
	      }
	
	      x.binding.bind(scope);
	      observer.call();
	
	      observer.publishing = true;
	      observer.selfSubscriber = selfSubscriber;
	    }
	
	    var overrideContext = void 0;
	    if (this.view !== null) {
	      if (skipSelfSubscriber) {
	        this.view.viewModelScope = scope;
	      }
	
	      if (this.viewModel === scope.overrideContext.bindingContext) {
	        overrideContext = scope.overrideContext;
	      } else if (this.instruction.inheritBindingContext) {
	          overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel, scope.overrideContext);
	        } else {
	            overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel);
	            overrideContext.__parentOverrideContext = scope.overrideContext;
	          }
	      this.view.bind(this.viewModel, overrideContext);
	    } else if (skipSelfSubscriber) {
	      overrideContext = scope.overrideContext;
	
	      if (scope.overrideContext.__parentOverrideContext !== undefined && this.viewModel.viewFactory && this.viewModel.viewFactory.factoryCreateInstruction.partReplacements) {
	        overrideContext = Object.assign({}, scope.overrideContext);
	        overrideContext.parentOverrideContext = scope.overrideContext.__parentOverrideContext;
	      }
	      this.viewModel.bind(scope.bindingContext, overrideContext);
	    }
	  };
	
	  Controller.prototype.unbind = function unbind() {
	    if (this.isBound) {
	      var boundProperties = this.boundProperties;
	      var i = void 0;
	      var ii = void 0;
	
	      this.isBound = false;
	      this.scope = null;
	
	      if (this.view !== null) {
	        this.view.unbind();
	      }
	
	      if (this.behavior.handlesUnbind) {
	        this.viewModel.unbind();
	      }
	
	      if (this.elementEvents !== null) {
	        this.elementEvents.disposeAll();
	      }
	
	      for (i = 0, ii = boundProperties.length; i < ii; ++i) {
	        boundProperties[i].binding.unbind();
	      }
	    }
	  };
	
	  Controller.prototype.attached = function attached() {
	    if (this.isAttached) {
	      return;
	    }
	
	    this.isAttached = true;
	
	    if (this.behavior.handlesAttached) {
	      this.viewModel.attached();
	    }
	
	    if (this.view !== null) {
	      this.view.attached();
	    }
	  };
	
	  Controller.prototype.detached = function detached() {
	    if (this.isAttached) {
	      this.isAttached = false;
	
	      if (this.view !== null) {
	        this.view.detached();
	      }
	
	      if (this.behavior.handlesDetached) {
	        this.viewModel.detached();
	      }
	    }
	  };
	
	  return Controller;
	}();
	
	var BehaviorPropertyObserver = exports.BehaviorPropertyObserver = (_dec8 = (0, _aureliaBinding.subscriberCollection)(), _dec8(_class16 = function () {
	  function BehaviorPropertyObserver(taskQueue, obj, propertyName, selfSubscriber, initialValue) {
	    _classCallCheck(this, BehaviorPropertyObserver);
	
	    this.taskQueue = taskQueue;
	    this.obj = obj;
	    this.propertyName = propertyName;
	    this.notqueued = true;
	    this.publishing = false;
	    this.selfSubscriber = selfSubscriber;
	    this.currentValue = this.oldValue = initialValue;
	  }
	
	  BehaviorPropertyObserver.prototype.getValue = function getValue() {
	    return this.currentValue;
	  };
	
	  BehaviorPropertyObserver.prototype.setValue = function setValue(newValue) {
	    var oldValue = this.currentValue;
	
	    if (oldValue !== newValue) {
	      if (this.publishing && this.notqueued) {
	        this.notqueued = false;
	        this.taskQueue.queueMicroTask(this);
	      }
	
	      this.oldValue = oldValue;
	      this.currentValue = newValue;
	    }
	  };
	
	  BehaviorPropertyObserver.prototype.call = function call() {
	    var oldValue = this.oldValue;
	    var newValue = this.currentValue;
	
	    this.notqueued = true;
	
	    if (newValue === oldValue) {
	      return;
	    }
	
	    if (this.selfSubscriber) {
	      this.selfSubscriber(newValue, oldValue);
	    }
	
	    this.callSubscribers(newValue, oldValue);
	    this.oldValue = newValue;
	  };
	
	  BehaviorPropertyObserver.prototype.subscribe = function subscribe(context, callable) {
	    this.addSubscriber(context, callable);
	  };
	
	  BehaviorPropertyObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
	    this.removeSubscriber(context, callable);
	  };
	
	  return BehaviorPropertyObserver;
	}()) || _class16);
	
	
	function getObserver(behavior, instance, name) {
	  var lookup = instance.__observers__;
	
	  if (lookup === undefined) {
	    if (!behavior.isInitialized) {
	      behavior.initialize(_aureliaDependencyInjection.Container.instance || new _aureliaDependencyInjection.Container(), instance.constructor);
	    }
	
	    lookup = behavior.observerLocator.getOrCreateObserversLookup(instance);
	    behavior._ensurePropertiesDefined(instance, lookup);
	  }
	
	  return lookup[name];
	}
	
	var BindableProperty = exports.BindableProperty = function () {
	  function BindableProperty(nameOrConfig) {
	    _classCallCheck(this, BindableProperty);
	
	    if (typeof nameOrConfig === 'string') {
	      this.name = nameOrConfig;
	    } else {
	      Object.assign(this, nameOrConfig);
	    }
	
	    this.attribute = this.attribute || _hyphenate(this.name);
	    if (this.defaultBindingMode === null || this.defaultBindingMode === undefined) {
	      this.defaultBindingMode = _aureliaBinding.bindingMode.oneWay;
	    }
	    this.changeHandler = this.changeHandler || null;
	    this.owner = null;
	    this.descriptor = null;
	  }
	
	  BindableProperty.prototype.registerWith = function registerWith(target, behavior, descriptor) {
	    behavior.properties.push(this);
	    behavior.attributes[this.attribute] = this;
	    this.owner = behavior;
	
	    if (descriptor) {
	      this.descriptor = descriptor;
	      return this._configureDescriptor(behavior, descriptor);
	    }
	  };
	
	  BindableProperty.prototype._configureDescriptor = function _configureDescriptor(behavior, descriptor) {
	    var name = this.name;
	
	    descriptor.configurable = true;
	    descriptor.enumerable = true;
	
	    if ('initializer' in descriptor) {
	      this.defaultValue = descriptor.initializer;
	      delete descriptor.initializer;
	      delete descriptor.writable;
	    }
	
	    if ('value' in descriptor) {
	      this.defaultValue = descriptor.value;
	      delete descriptor.value;
	      delete descriptor.writable;
	    }
	
	    descriptor.get = function () {
	      return getObserver(behavior, this, name).getValue();
	    };
	
	    descriptor.set = function (value) {
	      getObserver(behavior, this, name).setValue(value);
	    };
	
	    descriptor.get.getObserver = function (obj) {
	      return getObserver(behavior, obj, name);
	    };
	
	    return descriptor;
	  };
	
	  BindableProperty.prototype.defineOn = function defineOn(target, behavior) {
	    var name = this.name;
	    var handlerName = void 0;
	
	    if (this.changeHandler === null) {
	      handlerName = name + 'Changed';
	      if (handlerName in target.prototype) {
	        this.changeHandler = handlerName;
	      }
	    }
	
	    if (this.descriptor === null) {
	      Object.defineProperty(target.prototype, name, this._configureDescriptor(behavior, {}));
	    }
	  };
	
	  BindableProperty.prototype.createObserver = function createObserver(viewModel) {
	    var selfSubscriber = null;
	    var defaultValue = this.defaultValue;
	    var changeHandlerName = this.changeHandler;
	    var name = this.name;
	    var initialValue = void 0;
	
	    if (this.hasOptions) {
	      return undefined;
	    }
	
	    if (changeHandlerName in viewModel) {
	      if ('propertyChanged' in viewModel) {
	        selfSubscriber = function selfSubscriber(newValue, oldValue) {
	          viewModel[changeHandlerName](newValue, oldValue);
	          viewModel.propertyChanged(name, newValue, oldValue);
	        };
	      } else {
	        selfSubscriber = function selfSubscriber(newValue, oldValue) {
	          return viewModel[changeHandlerName](newValue, oldValue);
	        };
	      }
	    } else if ('propertyChanged' in viewModel) {
	      selfSubscriber = function selfSubscriber(newValue, oldValue) {
	        return viewModel.propertyChanged(name, newValue, oldValue);
	      };
	    } else if (changeHandlerName !== null) {
	      throw new Error('Change handler ' + changeHandlerName + ' was specified but not declared on the class.');
	    }
	
	    if (defaultValue !== undefined) {
	      initialValue = typeof defaultValue === 'function' ? defaultValue.call(viewModel) : defaultValue;
	    }
	
	    return new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, this.name, selfSubscriber, initialValue);
	  };
	
	  BindableProperty.prototype._initialize = function _initialize(viewModel, observerLookup, attributes, behaviorHandlesBind, boundProperties) {
	    var selfSubscriber = void 0;
	    var observer = void 0;
	    var attribute = void 0;
	    var defaultValue = this.defaultValue;
	
	    if (this.isDynamic) {
	      for (var key in attributes) {
	        this._createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, key, attributes[key], boundProperties);
	      }
	    } else if (!this.hasOptions) {
	      observer = observerLookup[this.name];
	
	      if (attributes !== null) {
	        selfSubscriber = observer.selfSubscriber;
	        attribute = attributes[this.attribute];
	
	        if (behaviorHandlesBind) {
	          observer.selfSubscriber = null;
	        }
	
	        if (typeof attribute === 'string') {
	          viewModel[this.name] = attribute;
	          observer.call();
	        } else if (attribute) {
	          boundProperties.push({ observer: observer, binding: attribute.createBinding(viewModel) });
	        } else if (defaultValue !== undefined) {
	          observer.call();
	        }
	
	        observer.selfSubscriber = selfSubscriber;
	      }
	
	      observer.publishing = true;
	    }
	  };
	
	  BindableProperty.prototype._createDynamicProperty = function _createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, name, attribute, boundProperties) {
	    var changeHandlerName = name + 'Changed';
	    var selfSubscriber = null;
	    var observer = void 0;
	    var info = void 0;
	
	    if (changeHandlerName in viewModel) {
	      if ('propertyChanged' in viewModel) {
	        selfSubscriber = function selfSubscriber(newValue, oldValue) {
	          viewModel[changeHandlerName](newValue, oldValue);
	          viewModel.propertyChanged(name, newValue, oldValue);
	        };
	      } else {
	        selfSubscriber = function selfSubscriber(newValue, oldValue) {
	          return viewModel[changeHandlerName](newValue, oldValue);
	        };
	      }
	    } else if ('propertyChanged' in viewModel) {
	      selfSubscriber = function selfSubscriber(newValue, oldValue) {
	        return viewModel.propertyChanged(name, newValue, oldValue);
	      };
	    }
	
	    observer = observerLookup[name] = new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, name, selfSubscriber);
	
	    Object.defineProperty(viewModel, name, {
	      configurable: true,
	      enumerable: true,
	      get: observer.getValue.bind(observer),
	      set: observer.setValue.bind(observer)
	    });
	
	    if (behaviorHandlesBind) {
	      observer.selfSubscriber = null;
	    }
	
	    if (typeof attribute === 'string') {
	      viewModel[name] = attribute;
	      observer.call();
	    } else if (attribute) {
	      info = { observer: observer, binding: attribute.createBinding(viewModel) };
	      boundProperties.push(info);
	    }
	
	    observer.publishing = true;
	    observer.selfSubscriber = selfSubscriber;
	  };
	
	  return BindableProperty;
	}();
	
	var contentSelectorViewCreateInstruction = { enhance: false };
	var lastProviderId = 0;
	
	function nextProviderId() {
	  return ++lastProviderId;
	}
	
	function doProcessContent() {
	  return true;
	}
	function doProcessAttributes() {}
	
	var HtmlBehaviorResource = exports.HtmlBehaviorResource = function () {
	  function HtmlBehaviorResource() {
	    _classCallCheck(this, HtmlBehaviorResource);
	
	    this.elementName = null;
	    this.attributeName = null;
	    this.attributeDefaultBindingMode = undefined;
	    this.liftsContent = false;
	    this.targetShadowDOM = false;
	    this.processAttributes = doProcessAttributes;
	    this.processContent = doProcessContent;
	    this.usesShadowDOM = false;
	    this.childBindings = null;
	    this.hasDynamicOptions = false;
	    this.containerless = false;
	    this.properties = [];
	    this.attributes = {};
	    this.isInitialized = false;
	  }
	
	  HtmlBehaviorResource.convention = function convention(name, existing) {
	    var behavior = void 0;
	
	    if (name.endsWith('CustomAttribute')) {
	      behavior = existing || new HtmlBehaviorResource();
	      behavior.attributeName = _hyphenate(name.substring(0, name.length - 15));
	    }
	
	    if (name.endsWith('CustomElement')) {
	      behavior = existing || new HtmlBehaviorResource();
	      behavior.elementName = _hyphenate(name.substring(0, name.length - 13));
	    }
	
	    return behavior;
	  };
	
	  HtmlBehaviorResource.prototype.addChildBinding = function addChildBinding(behavior) {
	    if (this.childBindings === null) {
	      this.childBindings = [];
	    }
	
	    this.childBindings.push(behavior);
	  };
	
	  HtmlBehaviorResource.prototype.initialize = function initialize(container, target) {
	    var proto = target.prototype;
	    var properties = this.properties;
	    var attributeName = this.attributeName;
	    var attributeDefaultBindingMode = this.attributeDefaultBindingMode;
	    var i = void 0;
	    var ii = void 0;
	    var current = void 0;
	
	    if (this.isInitialized) {
	      return;
	    }
	
	    this.isInitialized = true;
	    target.__providerId__ = nextProviderId();
	
	    this.observerLocator = container.get(_aureliaBinding.ObserverLocator);
	    this.taskQueue = container.get(_aureliaTaskQueue.TaskQueue);
	
	    this.target = target;
	    this.usesShadowDOM = this.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
	    this.handlesCreated = 'created' in proto;
	    this.handlesBind = 'bind' in proto;
	    this.handlesUnbind = 'unbind' in proto;
	    this.handlesAttached = 'attached' in proto;
	    this.handlesDetached = 'detached' in proto;
	    this.htmlName = this.elementName || this.attributeName;
	
	    if (attributeName !== null) {
	      if (properties.length === 0) {
	        new BindableProperty({
	          name: 'value',
	          changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
	          attribute: attributeName,
	          defaultBindingMode: attributeDefaultBindingMode
	        }).registerWith(target, this);
	      }
	
	      current = properties[0];
	
	      if (properties.length === 1 && current.name === 'value') {
	        current.isDynamic = current.hasOptions = this.hasDynamicOptions;
	        current.defineOn(target, this);
	      } else {
	        for (i = 0, ii = properties.length; i < ii; ++i) {
	          properties[i].defineOn(target, this);
	        }
	
	        current = new BindableProperty({
	          name: 'value',
	          changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
	          attribute: attributeName,
	          defaultBindingMode: attributeDefaultBindingMode
	        });
	
	        current.hasOptions = true;
	        current.registerWith(target, this);
	      }
	    } else {
	      for (i = 0, ii = properties.length; i < ii; ++i) {
	        properties[i].defineOn(target, this);
	      }
	    }
	  };
	
	  HtmlBehaviorResource.prototype.register = function register(registry, name) {
	    if (this.attributeName !== null) {
	      registry.registerAttribute(name || this.attributeName, this, this.attributeName);
	    }
	
	    if (this.elementName !== null) {
	      registry.registerElement(name || this.elementName, this);
	    }
	  };
	
	  HtmlBehaviorResource.prototype.load = function load(container, target, loadContext, viewStrategy, transientView) {
	    var _this11 = this;
	
	    var options = void 0;
	
	    if (this.elementName !== null) {
	      viewStrategy = container.get(ViewLocator).getViewStrategy(viewStrategy || this.viewStrategy || target);
	      options = new ViewCompileInstruction(this.targetShadowDOM, true);
	
	      if (!viewStrategy.moduleId) {
	        viewStrategy.moduleId = _aureliaMetadata.Origin.get(target).moduleId;
	      }
	
	      return viewStrategy.loadViewFactory(container.get(ViewEngine), options, loadContext).then(function (viewFactory) {
	        if (!transientView || !_this11.viewFactory) {
	          _this11.viewFactory = viewFactory;
	        }
	
	        return viewFactory;
	      });
	    }
	
	    return Promise.resolve(this);
	  };
	
	  HtmlBehaviorResource.prototype.compile = function compile(compiler, resources, node, instruction, parentNode) {
	    if (this.liftsContent) {
	      if (!instruction.viewFactory) {
	        var template = _aureliaPal.DOM.createElement('template');
	        var fragment = _aureliaPal.DOM.createDocumentFragment();
	        var cacheSize = node.getAttribute('view-cache');
	        var part = node.getAttribute('part');
	
	        node.removeAttribute(instruction.originalAttrName);
	        _aureliaPal.DOM.replaceNode(template, node, parentNode);
	        fragment.appendChild(node);
	        instruction.viewFactory = compiler.compile(fragment, resources);
	
	        if (part) {
	          instruction.viewFactory.part = part;
	          node.removeAttribute('part');
	        }
	
	        if (cacheSize) {
	          instruction.viewFactory.setCacheSize(cacheSize);
	          node.removeAttribute('view-cache');
	        }
	
	        node = template;
	      }
	    } else if (this.elementName !== null) {
	      var _partReplacements2 = {};
	
	      if (this.processContent(compiler, resources, node, instruction) && node.hasChildNodes()) {
	        if (this.usesShadowDOM) {
	          var currentChild = node.firstChild;
	          var nextSibling = void 0;
	          var toReplace = void 0;
	
	          while (currentChild) {
	            nextSibling = currentChild.nextSibling;
	
	            if (currentChild.tagName === 'TEMPLATE' && (toReplace = currentChild.getAttribute('replace-part'))) {
	              _partReplacements2[toReplace] = compiler.compile(currentChild, resources);
	              _aureliaPal.DOM.removeNode(currentChild, parentNode);
	              instruction.partReplacements = _partReplacements2;
	            }
	
	            currentChild = nextSibling;
	          }
	
	          instruction.skipContentProcessing = false;
	        } else {
	          var _fragment = _aureliaPal.DOM.createDocumentFragment();
	          var _currentChild = node.firstChild;
	          var _nextSibling = void 0;
	          var _toReplace = void 0;
	
	          while (_currentChild) {
	            _nextSibling = _currentChild.nextSibling;
	
	            if (_currentChild.tagName === 'TEMPLATE' && (_toReplace = _currentChild.getAttribute('replace-part'))) {
	              _partReplacements2[_toReplace] = compiler.compile(_currentChild, resources);
	              _aureliaPal.DOM.removeNode(_currentChild, parentNode);
	              instruction.partReplacements = _partReplacements2;
	            } else {
	              _fragment.appendChild(_currentChild);
	            }
	
	            _currentChild = _nextSibling;
	          }
	
	          instruction.contentFactory = compiler.compile(_fragment, resources);
	          instruction.skipContentProcessing = true;
	        }
	      } else {
	        instruction.skipContentProcessing = true;
	      }
	    }
	
	    return node;
	  };
	
	  HtmlBehaviorResource.prototype.create = function create(container, instruction, element, bindings) {
	    var host = void 0;
	    var au = null;
	
	    instruction = instruction || BehaviorInstruction.normal;
	    element = element || null;
	    bindings = bindings || null;
	
	    if (this.elementName !== null && element) {
	      if (this.usesShadowDOM) {
	        host = element.createShadowRoot();
	        container.registerInstance(_aureliaPal.DOM.boundary, host);
	      } else {
	        host = element;
	
	        if (this.targetShadowDOM) {
	          container.registerInstance(_aureliaPal.DOM.boundary, host);
	        }
	      }
	    }
	
	    if (element !== null) {
	      element.au = au = element.au || {};
	    }
	
	    var viewModel = instruction.viewModel || container.get(this.target);
	    var controller = new Controller(this, instruction, viewModel, container.elementEvents);
	    var childBindings = this.childBindings;
	    var viewFactory = void 0;
	
	    if (this.liftsContent) {
	      au.controller = controller;
	    } else if (this.elementName !== null) {
	      viewFactory = instruction.viewFactory || this.viewFactory;
	      container.viewModel = viewModel;
	
	      if (viewFactory) {
	        controller.view = viewFactory.create(container, instruction, element);
	      }
	
	      if (element !== null) {
	        au.controller = controller;
	
	        if (controller.view) {
	          if (!this.usesShadowDOM) {
	            if (instruction.contentFactory) {
	              var contentView = instruction.contentFactory.create(container, contentSelectorViewCreateInstruction);
	
	              _ContentSelector.applySelectors(contentView, controller.view.contentSelectors, function (contentSelector, group) {
	                return contentSelector.add(group);
	              });
	
	              controller.contentView = contentView;
	            }
	          }
	
	          if (instruction.anchorIsContainer) {
	            if (childBindings !== null) {
	              for (var i = 0, ii = childBindings.length; i < ii; ++i) {
	                controller.view.addBinding(childBindings[i].create(element, viewModel));
	              }
	            }
	
	            controller.view.appendNodesTo(host);
	          } else {
	            controller.view.insertNodesBefore(host);
	          }
	        } else if (childBindings !== null) {
	          for (var _i2 = 0, _ii2 = childBindings.length; _i2 < _ii2; ++_i2) {
	            bindings.push(childBindings[_i2].create(element, viewModel));
	          }
	        }
	      } else if (controller.view) {
	        controller.view.controller = controller;
	
	        if (childBindings !== null) {
	          for (var _i3 = 0, _ii3 = childBindings.length; _i3 < _ii3; ++_i3) {
	            controller.view.addBinding(childBindings[_i3].create(instruction.host, viewModel));
	          }
	        }
	      } else if (childBindings !== null) {
	        for (var _i4 = 0, _ii4 = childBindings.length; _i4 < _ii4; ++_i4) {
	          bindings.push(childBindings[_i4].create(instruction.host, viewModel));
	        }
	      }
	    } else if (childBindings !== null) {
	      for (var _i5 = 0, _ii5 = childBindings.length; _i5 < _ii5; ++_i5) {
	        bindings.push(childBindings[_i5].create(element, viewModel));
	      }
	    }
	
	    if (au !== null) {
	      au[this.htmlName] = controller;
	    }
	
	    if (instruction.initiatedByBehavior && viewFactory) {
	      controller.view.created();
	    }
	
	    return controller;
	  };
	
	  HtmlBehaviorResource.prototype._ensurePropertiesDefined = function _ensurePropertiesDefined(instance, lookup) {
	    var properties = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var observer = void 0;
	
	    if ('__propertiesDefined__' in lookup) {
	      return;
	    }
	
	    lookup.__propertiesDefined__ = true;
	    properties = this.properties;
	
	    for (i = 0, ii = properties.length; i < ii; ++i) {
	      observer = properties[i].createObserver(instance);
	
	      if (observer !== undefined) {
	        lookup[observer.propertyName] = observer;
	      }
	    }
	  };
	
	  return HtmlBehaviorResource;
	}();
	
	function createChildObserverDecorator(selectorOrConfig, all) {
	  return function (target, key, descriptor) {
	    var actualTarget = typeof key === 'string' ? target.constructor : target;
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);
	
	    if (typeof selectorOrConfig === 'string') {
	      selectorOrConfig = {
	        selector: selectorOrConfig,
	        name: key
	      };
	    }
	
	    if (descriptor) {
	      descriptor.writable = true;
	    }
	
	    selectorOrConfig.all = all;
	    r.addChildBinding(new ChildObserver(selectorOrConfig));
	  };
	}
	
	function children(selectorOrConfig) {
	  return createChildObserverDecorator(selectorOrConfig, true);
	}
	
	function child(selectorOrConfig) {
	  return createChildObserverDecorator(selectorOrConfig, false);
	}
	
	var ChildObserver = function () {
	  function ChildObserver(config) {
	    _classCallCheck(this, ChildObserver);
	
	    this.name = config.name;
	    this.changeHandler = config.changeHandler || this.name + 'Changed';
	    this.selector = config.selector;
	    this.all = config.all;
	  }
	
	  ChildObserver.prototype.create = function create(target, viewModel) {
	    return new ChildObserverBinder(this.selector, target, this.name, viewModel, this.changeHandler, this.all);
	  };
	
	  return ChildObserver;
	}();
	
	var noMutations = [];
	
	function trackMutation(groupedMutations, binder, record) {
	  var mutations = groupedMutations.get(binder);
	
	  if (!mutations) {
	    mutations = [];
	    groupedMutations.set(binder, mutations);
	  }
	
	  mutations.push(record);
	}
	
	function onChildChange(mutations, observer) {
	  var binders = observer.binders;
	  var bindersLength = binders.length;
	  var groupedMutations = new Map();
	
	  for (var i = 0, ii = mutations.length; i < ii; ++i) {
	    var record = mutations[i];
	    var added = record.addedNodes;
	    var removed = record.removedNodes;
	
	    for (var j = 0, jj = removed.length; j < jj; ++j) {
	      var node = removed[j];
	      if (node.nodeType === 1) {
	        for (var k = 0; k < bindersLength; ++k) {
	          var binder = binders[k];
	          if (binder.onRemove(node)) {
	            trackMutation(groupedMutations, binder, record);
	          }
	        }
	      }
	    }
	
	    for (var _j = 0, _jj = added.length; _j < _jj; ++_j) {
	      var _node = added[_j];
	      if (_node.nodeType === 1) {
	        for (var _k = 0; _k < bindersLength; ++_k) {
	          var _binder = binders[_k];
	          if (_binder.onAdd(_node)) {
	            trackMutation(groupedMutations, _binder, record);
	          }
	        }
	      }
	    }
	  }
	
	  groupedMutations.forEach(function (value, key) {
	    if (key.changeHandler !== null) {
	      key.viewModel[key.changeHandler](value);
	    }
	  });
	}
	
	var ChildObserverBinder = function () {
	  function ChildObserverBinder(selector, target, property, viewModel, changeHandler, all) {
	    _classCallCheck(this, ChildObserverBinder);
	
	    this.selector = selector;
	    this.target = target;
	    this.property = property;
	    this.viewModel = viewModel;
	    this.changeHandler = changeHandler in viewModel ? changeHandler : null;
	    this.all = all;
	  }
	
	  ChildObserverBinder.prototype.bind = function bind(source) {
	    var target = this.target;
	    var viewModel = this.viewModel;
	    var selector = this.selector;
	    var current = target.firstElementChild;
	    var observer = target.__childObserver__;
	
	    if (!observer) {
	      observer = target.__childObserver__ = _aureliaPal.DOM.createMutationObserver(onChildChange);
	      observer.observe(target, { childList: true });
	      observer.binders = [];
	    }
	
	    observer.binders.push(this);
	
	    if (this.all) {
	      var items = viewModel[this.property];
	      if (!items) {
	        items = viewModel[this.property] = [];
	      } else {
	        items.length = 0;
	      }
	
	      while (current) {
	        if (current.matches(selector)) {
	          items.push(current.au && current.au.controller ? current.au.controller.viewModel : current);
	        }
	
	        current = current.nextElementSibling;
	      }
	
	      if (this.changeHandler !== null) {
	        this.viewModel[this.changeHandler](noMutations);
	      }
	    } else {
	      while (current) {
	        if (current.matches(selector)) {
	          var value = current.au && current.au.controller ? current.au.controller.viewModel : current;
	          this.viewModel[this.property] = value;
	
	          if (this.changeHandler !== null) {
	            this.viewModel[this.changeHandler](value);
	          }
	
	          break;
	        }
	
	        current = current.nextElementSibling;
	      }
	    }
	  };
	
	  ChildObserverBinder.prototype.onRemove = function onRemove(element) {
	    if (element.matches(this.selector)) {
	      var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
	
	      if (this.all) {
	        var items = this.viewModel[this.property];
	        var index = items.indexOf(value);
	
	        if (index !== -1) {
	          items.splice(index, 1);
	        }
	
	        return true;
	      }
	
	      return false;
	    }
	  };
	
	  ChildObserverBinder.prototype.onAdd = function onAdd(element) {
	    var selector = this.selector;
	
	    if (element.matches(selector)) {
	      var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
	
	      if (this.all) {
	        var items = this.viewModel[this.property];
	        var index = 0;
	        var prev = element.previousElementSibling;
	
	        while (prev) {
	          if (prev.matches(selector)) {
	            index++;
	          }
	
	          prev = prev.previousElementSibling;
	        }
	
	        items.splice(index, 0, value);
	        return true;
	      }
	
	      this.viewModel[this.property] = value;
	
	      if (this.changeHandler !== null) {
	        this.viewModel[this.changeHandler](value);
	      }
	    }
	
	    return false;
	  };
	
	  ChildObserverBinder.prototype.unbind = function unbind() {
	    if (this.target.__childObserver__) {
	      this.target.__childObserver__.disconnect();
	      this.target.__childObserver__ = null;
	    }
	  };
	
	  return ChildObserverBinder;
	}();
	
	function tryActivateViewModel(context) {
	  if (context.skipActivation || typeof context.viewModel.activate !== 'function') {
	    return Promise.resolve();
	  }
	
	  return context.viewModel.activate(context.model) || Promise.resolve();
	}
	
	var CompositionEngine = exports.CompositionEngine = (_dec9 = (0, _aureliaDependencyInjection.inject)(ViewEngine, ViewLocator), _dec9(_class17 = function () {
	  function CompositionEngine(viewEngine, viewLocator) {
	    _classCallCheck(this, CompositionEngine);
	
	    this.viewEngine = viewEngine;
	    this.viewLocator = viewLocator;
	  }
	
	  CompositionEngine.prototype._createControllerAndSwap = function _createControllerAndSwap(context) {
	    function swap(controller) {
	      return Promise.resolve(context.viewSlot.removeAll(true)).then(function () {
	        if (context.currentController) {
	          context.currentController.unbind();
	        }
	
	        context.viewSlot.add(controller.view);
	
	        if (context.compositionTransactionNotifier) {
	          context.compositionTransactionNotifier.done();
	        }
	
	        return controller;
	      });
	    }
	
	    return this.createController(context).then(function (controller) {
	      controller.automate(context.overrideContext, context.owningView);
	
	      if (context.compositionTransactionOwnershipToken) {
	        return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function () {
	          return swap(controller);
	        });
	      }
	
	      return swap(controller);
	    });
	  };
	
	  CompositionEngine.prototype.createController = function createController(context) {
	    var _this12 = this;
	
	    var childContainer = void 0;
	    var viewModel = void 0;
	    var viewModelResource = void 0;
	    var m = void 0;
	
	    return this.ensureViewModel(context).then(tryActivateViewModel).then(function () {
	      childContainer = context.childContainer;
	      viewModel = context.viewModel;
	      viewModelResource = context.viewModelResource;
	      m = viewModelResource.metadata;
	
	      var viewStrategy = _this12.viewLocator.getViewStrategy(context.view || viewModel);
	
	      if (context.viewResources) {
	        viewStrategy.makeRelativeTo(context.viewResources.viewUrl);
	      }
	
	      return m.load(childContainer, viewModelResource.value, null, viewStrategy, true);
	    }).then(function (viewFactory) {
	      return m.create(childContainer, BehaviorInstruction.dynamic(context.host, viewModel, viewFactory));
	    });
	  };
	
	  CompositionEngine.prototype.ensureViewModel = function ensureViewModel(context) {
	    var childContainer = context.childContainer = context.childContainer || context.container.createChild();
	
	    if (typeof context.viewModel === 'string') {
	      context.viewModel = context.viewResources ? context.viewResources.relativeToView(context.viewModel) : context.viewModel;
	
	      return this.viewEngine.importViewModelResource(context.viewModel).then(function (viewModelResource) {
	        childContainer.autoRegister(viewModelResource.value);
	
	        if (context.host) {
	          childContainer.registerInstance(_aureliaPal.DOM.Element, context.host);
	        }
	
	        context.viewModel = childContainer.viewModel = childContainer.get(viewModelResource.value);
	        context.viewModelResource = viewModelResource;
	        return context;
	      });
	    }
	
	    var m = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, context.viewModel.constructor);
	    m.elementName = m.elementName || 'dynamic-element';
	    m.initialize(context.container || childContainer, context.viewModel.constructor);
	    context.viewModelResource = { metadata: m, value: context.viewModel.constructor };
	    childContainer.viewModel = context.viewModel;
	    return Promise.resolve(context);
	  };
	
	  CompositionEngine.prototype.compose = function compose(context) {
	    context.childContainer = context.childContainer || context.container.createChild();
	    context.view = this.viewLocator.getViewStrategy(context.view);
	
	    var transaction = context.childContainer.get(CompositionTransaction);
	    var compositionTransactionOwnershipToken = transaction.tryCapture();
	
	    if (compositionTransactionOwnershipToken) {
	      context.compositionTransactionOwnershipToken = compositionTransactionOwnershipToken;
	    } else {
	      context.compositionTransactionNotifier = transaction.enlist();
	    }
	
	    if (context.viewModel) {
	      return this._createControllerAndSwap(context);
	    } else if (context.view) {
	      if (context.viewResources) {
	        context.view.makeRelativeTo(context.viewResources.viewUrl);
	      }
	
	      return context.view.loadViewFactory(this.viewEngine, new ViewCompileInstruction()).then(function (viewFactory) {
	        var result = viewFactory.create(context.childContainer);
	        result.bind(context.bindingContext, context.overrideContext);
	
	        var work = function work() {
	          return Promise.resolve(context.viewSlot.removeAll(true)).then(function () {
	            context.viewSlot.add(result);
	
	            if (context.compositionTransactionNotifier) {
	              context.compositionTransactionNotifier.done();
	            }
	
	            return result;
	          });
	        };
	
	        if (context.compositionTransactionOwnershipToken) {
	          return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(work);
	        }
	
	        return work();
	      });
	    } else if (context.viewSlot) {
	      context.viewSlot.removeAll();
	
	      if (context.compositionTransactionNotifier) {
	        context.compositionTransactionNotifier.done();
	      }
	
	      return Promise.resolve(null);
	    }
	  };
	
	  return CompositionEngine;
	}()) || _class17);
	
	var ElementConfigResource = exports.ElementConfigResource = function () {
	  function ElementConfigResource() {
	    _classCallCheck(this, ElementConfigResource);
	  }
	
	  ElementConfigResource.prototype.initialize = function initialize(container, target) {};
	
	  ElementConfigResource.prototype.register = function register(registry, name) {};
	
	  ElementConfigResource.prototype.load = function load(container, target) {
	    var config = new target();
	    var eventManager = container.get(_aureliaBinding.EventManager);
	    eventManager.registerElementConfig(config);
	  };
	
	  return ElementConfigResource;
	}();
	
	function validateBehaviorName(name, type) {
	  if (/[A-Z]/.test(name)) {
	    var newName = _hyphenate(name);
	    LogManager.getLogger('templating').warn('\'' + name + '\' is not a valid ' + type + ' name and has been converted to \'' + newName + '\'. Upper-case letters are not allowed because the DOM is not case-sensitive.');
	    return newName;
	  }
	  return name;
	}
	
	function resource(instance) {
	  return function (target) {
	    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, instance, target);
	  };
	}
	
	function behavior(override) {
	  return function (target) {
	    if (override instanceof HtmlBehaviorResource) {
	      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, override, target);
	    } else {
	      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
	      Object.assign(r, override);
	    }
	  };
	}
	
	function customElement(name) {
	  return function (target) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
	    r.elementName = validateBehaviorName(name, 'custom element');
	  };
	}
	
	function customAttribute(name, defaultBindingMode) {
	  return function (target) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
	    r.attributeName = validateBehaviorName(name, 'custom attribute');
	    r.attributeDefaultBindingMode = defaultBindingMode;
	  };
	}
	
	function templateController(target) {
	  var deco = function deco(t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.liftsContent = true;
	  };
	
	  return target ? deco(target) : deco;
	}
	
	function bindable(nameOrConfigOrTarget, key, descriptor) {
	  var deco = function deco(target, key2, descriptor2) {
	    var actualTarget = key2 ? target.constructor : target;
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);
	    var prop = void 0;
	
	    if (key2) {
	      nameOrConfigOrTarget = nameOrConfigOrTarget || {};
	      nameOrConfigOrTarget.name = key2;
	    }
	
	    prop = new BindableProperty(nameOrConfigOrTarget);
	    return prop.registerWith(actualTarget, r, descriptor2);
	  };
	
	  if (!nameOrConfigOrTarget) {
	    return deco;
	  }
	
	  if (key) {
	    var target = nameOrConfigOrTarget;
	    nameOrConfigOrTarget = null;
	    return deco(target, key, descriptor);
	  }
	
	  return deco;
	}
	
	function dynamicOptions(target) {
	  var deco = function deco(t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.hasDynamicOptions = true;
	  };
	
	  return target ? deco(target) : deco;
	}
	
	function useShadowDOM(target) {
	  var deco = function deco(t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.targetShadowDOM = true;
	  };
	
	  return target ? deco(target) : deco;
	}
	
	function processAttributes(processor) {
	  return function (t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.processAttributes = processor;
	  };
	}
	
	function doNotProcessContent() {
	  return false;
	}
	
	function processContent(processor) {
	  return function (t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.processContent = processor || doNotProcessContent;
	  };
	}
	
	function containerless(target) {
	  var deco = function deco(t) {
	    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
	    r.containerless = true;
	  };
	
	  return target ? deco(target) : deco;
	}
	
	function useViewStrategy(strategy) {
	  return function (target) {
	    _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, strategy, target);
	  };
	}
	
	function useView(path) {
	  return useViewStrategy(new RelativeViewStrategy(path));
	}
	
	function inlineView(markup, dependencies, dependencyBaseUrl) {
	  return useViewStrategy(new InlineViewStrategy(markup, dependencies, dependencyBaseUrl));
	}
	
	function noView(target) {
	  var deco = function deco(t) {
	    _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, new NoViewStrategy(), t);
	  };
	
	  return target ? deco(target) : deco;
	}
	
	function elementConfig(target) {
	  var deco = function deco(t) {
	    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ElementConfigResource(), t);
	  };
	
	  return target ? deco(target) : deco;
	}
	
	var TemplatingEngine = exports.TemplatingEngine = (_dec10 = (0, _aureliaDependencyInjection.inject)(_aureliaDependencyInjection.Container, ModuleAnalyzer, ViewCompiler, CompositionEngine), _dec10(_class18 = function () {
	  function TemplatingEngine(container, moduleAnalyzer, viewCompiler, compositionEngine) {
	    _classCallCheck(this, TemplatingEngine);
	
	    this._container = container;
	    this._moduleAnalyzer = moduleAnalyzer;
	    this._viewCompiler = viewCompiler;
	    this._compositionEngine = compositionEngine;
	    container.registerInstance(Animator, Animator.instance = new Animator());
	  }
	
	  TemplatingEngine.prototype.configureAnimator = function configureAnimator(animator) {
	    this._container.unregister(Animator);
	    this._container.registerInstance(Animator, Animator.instance = animator);
	  };
	
	  TemplatingEngine.prototype.compose = function compose(context) {
	    return this._compositionEngine.compose(context);
	  };
	
	  TemplatingEngine.prototype.enhance = function enhance(instruction) {
	    if (instruction instanceof _aureliaPal.DOM.Element) {
	      instruction = { element: instruction };
	    }
	
	    var compilerInstructions = {};
	    var resources = instruction.resources || this._container.get(ViewResources);
	
	    this._viewCompiler._compileNode(instruction.element, resources, compilerInstructions, instruction.element.parentNode, 'root', true);
	
	    var factory = new ViewFactory(instruction.element, compilerInstructions, resources);
	    var container = instruction.container || this._container.createChild();
	    var view = factory.create(container, BehaviorInstruction.enhance());
	
	    view.bind(instruction.bindingContext || {}, instruction.overrideContext);
	
	    return view;
	  };
	
	  TemplatingEngine.prototype.createControllerForUnitTest = function createControllerForUnitTest(viewModelType, attributesFromHTML) {
	    var _moduleAnalyzer$analy;
	
	    var exportName = viewModelType.name;
	    var resourceModule = this._moduleAnalyzer.analyze('test-module', (_moduleAnalyzer$analy = {}, _moduleAnalyzer$analy[exportName] = viewModelType, _moduleAnalyzer$analy), exportName);
	    var description = resourceModule.mainResource;
	
	    description.initialize(this._container);
	
	    var viewModel = this._container.get(viewModelType);
	    var instruction = BehaviorInstruction.unitTest(description, attributesFromHTML);
	
	    return new Controller(description.metadata, instruction, viewModel);
	  };
	
	  TemplatingEngine.prototype.createViewModelForUnitTest = function createViewModelForUnitTest(viewModelType, attributesFromHTML, bindingContext) {
	    var controller = this.createControllerForUnitTest(viewModelType, attributesFromHTML);
	    controller.bind((0, _aureliaBinding.createScopeForTest)(bindingContext));
	    return controller.viewModel;
	  };
	
	  return TemplatingEngine;
	}()) || _class18);

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EventAggregator = undefined;
	exports.includeEventsIn = includeEventsIn;
	exports.configure = configure;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var logger = LogManager.getLogger('event-aggregator');
	
	var Handler = function () {
	  function Handler(messageType, callback) {
	    _classCallCheck(this, Handler);
	
	    this.messageType = messageType;
	    this.callback = callback;
	  }
	
	  Handler.prototype.handle = function handle(message) {
	    if (message instanceof this.messageType) {
	      this.callback.call(null, message);
	    }
	  };
	
	  return Handler;
	}();
	
	var EventAggregator = exports.EventAggregator = function () {
	  function EventAggregator() {
	    _classCallCheck(this, EventAggregator);
	
	    this.eventLookup = {};
	    this.messageHandlers = [];
	  }
	
	  EventAggregator.prototype.publish = function publish(event, data) {
	    var subscribers = void 0;
	    var i = void 0;
	
	    if (!event) {
	      throw new Error('Event was invalid.');
	    }
	
	    if (typeof event === 'string') {
	      subscribers = this.eventLookup[event];
	      if (subscribers) {
	        subscribers = subscribers.slice();
	        i = subscribers.length;
	
	        try {
	          while (i--) {
	            subscribers[i](data, event);
	          }
	        } catch (e) {
	          logger.error(e);
	        }
	      }
	    } else {
	      subscribers = this.messageHandlers.slice();
	      i = subscribers.length;
	
	      try {
	        while (i--) {
	          subscribers[i].handle(event);
	        }
	      } catch (e) {
	        logger.error(e);
	      }
	    }
	  };
	
	  EventAggregator.prototype.subscribe = function subscribe(event, callback) {
	    var handler = void 0;
	    var subscribers = void 0;
	
	    if (!event) {
	      throw new Error('Event channel/type was invalid.');
	    }
	
	    if (typeof event === 'string') {
	      handler = callback;
	      subscribers = this.eventLookup[event] || (this.eventLookup[event] = []);
	    } else {
	      handler = new Handler(event, callback);
	      subscribers = this.messageHandlers;
	    }
	
	    subscribers.push(handler);
	
	    return {
	      dispose: function dispose() {
	        var idx = subscribers.indexOf(handler);
	        if (idx !== -1) {
	          subscribers.splice(idx, 1);
	        }
	      }
	    };
	  };
	
	  EventAggregator.prototype.subscribeOnce = function subscribeOnce(event, callback) {
	    var sub = this.subscribe(event, function (a, b) {
	      sub.dispose();
	      return callback(a, b);
	    });
	
	    return sub;
	  };
	
	  return EventAggregator;
	}();
	
	function includeEventsIn(obj) {
	  var ea = new EventAggregator();
	
	  obj.subscribeOnce = function (event, callback) {
	    return ea.subscribeOnce(event, callback);
	  };
	
	  obj.subscribe = function (event, callback) {
	    return ea.subscribe(event, callback);
	  };
	
	  obj.publish = function (event, data) {
	    ea.publish(event, data);
	  };
	
	  return ea;
	}
	
	function configure(config) {
	  config.instance(EventAggregator, includeEventsIn(config.aurelia));
	}

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.configure = exports.SailsSocketClient = exports.RequestBuilder = exports.SocketRequestMessage = exports.RequestMessageProcessor = exports.SocketResponseMessage = exports.Headers = exports.LoggerInterceptor = exports.CSRFInterceptor = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.createSocketRequestMessageProcessor = createSocketRequestMessageProcessor;
	exports.configure = configure;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaPath = __webpack_require__(9);
	
	var _aureliaPal = __webpack_require__(4);
	
	__webpack_require__(27);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var logger = LogManager.getLogger('sails');
	
	var CSRFInterceptor = exports.CSRFInterceptor = function () {
	  function CSRFInterceptor(url, client, token) {
	    _classCallCheck(this, CSRFInterceptor);
	
	    this.url = url;
	    this.client = client;
	    this.token = token;
	  }
	
	  CSRFInterceptor.prototype.request = function request(message) {
	    var _this = this;
	
	    if (message.method === 'get' || message.url === this.url) {
	      return message;
	    }
	
	    if (this.token) {
	      this.setCsrfTokenHeader(message);
	      return message;
	    }
	
	    return new Promise(function (resolve, reject) {
	      var promise = void 0;
	      if (_this._fetching) {
	        promise = _this._fetching;
	      } else {
	        promise = _this._fetching = _this.client.get(_this.url);
	      }
	      promise.then(function (response) {
	        _this.token = response.content._csrf;
	        _this.setCsrfTokenHeader(message);
	        resolve(message);
	      }).catch(reject);
	    });
	  };
	
	  CSRFInterceptor.prototype.setCsrfTokenHeader = function setCsrfTokenHeader(message) {
	    message.headers.add('X-Csrf-Token', this.token);
	    return message;
	  };
	
	  return CSRFInterceptor;
	}();
	
	var LoggerInterceptor = function () {
	  function LoggerInterceptor() {
	    _classCallCheck(this, LoggerInterceptor);
	  }
	
	  LoggerInterceptor.prototype.request = function request(message) {
	    logger.debug('Sending message to sails', message);
	    return message;
	  };
	
	  LoggerInterceptor.prototype.response = function response(_response) {
	    logger.debug('Receiving response from sails', _response);
	    return _response;
	  };
	
	  LoggerInterceptor.prototype.responseError = function responseError(response) {
	    logger.error('There was an error during sails request', response);
	    throw response;
	  };
	
	  return LoggerInterceptor;
	}();
	
	exports.LoggerInterceptor = LoggerInterceptor;
	
	var Headers = exports.Headers = function () {
	  function Headers() {
	    var headers = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, Headers);
	
	    this.headers = headers;
	  }
	
	  Headers.prototype.add = function add(key, value) {
	    this.headers[key] = value;
	  };
	
	  Headers.prototype.get = function get(key) {
	    return this.headers[key];
	  };
	
	  Headers.prototype.clear = function clear() {
	    this.headers = {};
	  };
	
	  return Headers;
	}();
	
	var SocketResponseMessage = exports.SocketResponseMessage = function () {
	  function SocketResponseMessage(requestMessage, body, JWR) {
	    _classCallCheck(this, SocketResponseMessage);
	
	    this.requestMessage = requestMessage;
	    this.statusCode = JWR.statusCode;
	    this.body = body;
	
	    this.isSuccess = this.statusCode >= 200 && this.statusCode < 400;
	    this.headers = new Headers(JWR.headers);
	  }
	
	  _createClass(SocketResponseMessage, [{
	    key: 'content',
	    get: function get() {
	      return this.body;
	    }
	  }]);
	
	  return SocketResponseMessage;
	}();
	
	var RequestMessageProcessor = exports.RequestMessageProcessor = function () {
	  function RequestMessageProcessor(transformers) {
	    _classCallCheck(this, RequestMessageProcessor);
	
	    this.transformers = transformers;
	  }
	
	  RequestMessageProcessor.prototype.abort = function abort() {
	    throw new Error('Cannot abort socket request');
	  };
	
	  RequestMessageProcessor.prototype.process = function process(client, requestMessage) {
	    var _this2 = this;
	
	    return new Promise(function (resolve, reject) {
	      var transformers = _this2.transformers;
	      var promises = [];
	      var i = void 0;
	      var ii = void 0;
	
	      for (i = 0, ii = transformers.length; i < ii; ++i) {
	        promises.push(transformers[i](client, _this2, requestMessage));
	      }
	
	      return Promise.all(promises).then(function () {
	        return resolve(requestMessage);
	      }).catch(reject);
	    }).then(function (message) {
	      var processRequest = function processRequest(currentMessage) {
	        return new Promise(function (resolve, reject) {
	          client.socket.request(currentMessage.options, function (data, jwr) {
	            var response = new SocketResponseMessage(currentMessage, data, jwr);
	            if (response.isSuccess) {
	              resolve(response);
	            } else {
	              reject(response);
	            }
	          });
	        });
	      };
	
	      var chain = [[processRequest, undefined]];
	
	      var interceptors = message.interceptors || [];
	      interceptors.forEach(function (interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift([interceptor.request ? interceptor.request.bind(interceptor) : undefined, interceptor.requestError ? interceptor.requestError.bind(interceptor) : undefined]);
	        }
	
	        if (interceptor.response || interceptor.responseError) {
	          chain.push([interceptor.response ? interceptor.response.bind(interceptor) : undefined, interceptor.responseError ? interceptor.responseError.bind(interceptor) : undefined]);
	        }
	      });
	
	      var interceptorsPromise = Promise.resolve(message);
	
	      while (chain.length) {
	        var _interceptorsPromise;
	
	        interceptorsPromise = (_interceptorsPromise = interceptorsPromise).then.apply(_interceptorsPromise, chain.shift());
	      }
	
	      return interceptorsPromise;
	    });
	  };
	
	  return RequestMessageProcessor;
	}();
	
	function buildFullUrl(message) {
	  var url = void 0;
	  var qs = void 0;
	
	  if (message.url && message.url[0] === '/') {
	    url = message.url;
	  } else {
	    url = (0, _aureliaPath.join)(message.baseUrl, message.url);
	  }
	
	  if (message.params) {
	    qs = (0, _aureliaPath.buildQueryString)(message.params);
	    url = qs ? url + '?' + qs : url;
	  }
	
	  return url;
	}
	
	var SocketRequestMessage = exports.SocketRequestMessage = function () {
	  function SocketRequestMessage(method, url, content, headers) {
	    _classCallCheck(this, SocketRequestMessage);
	
	    this.method = method;
	    this.url = url;
	    this.content = content;
	    this.headers = headers || new Headers();
	  }
	
	  _createClass(SocketRequestMessage, [{
	    key: 'options',
	    get: function get() {
	      return {
	        method: this.method,
	        url: buildFullUrl(this),
	        params: this.content,
	        headers: this.headers.headers
	      };
	    }
	  }]);
	
	  return SocketRequestMessage;
	}();
	
	function createSocketRequestMessageProcessor() {
	  return new RequestMessageProcessor([]);
	}
	
	var RequestBuilder = exports.RequestBuilder = function () {
	  function RequestBuilder(client) {
	    _classCallCheck(this, RequestBuilder);
	
	    this.client = client;
	    this.transformers = client.requestTransformers.slice(0);
	  }
	
	  RequestBuilder.addHelper = function addHelper(name, fn) {
	    RequestBuilder.prototype[name] = function () {
	      this.transformers.push(fn.apply(this, arguments));
	      return this;
	    };
	  };
	
	  RequestBuilder.prototype.send = function send() {
	    var message = new SocketRequestMessage();
	    return this.client.send(message, this.transformers);
	  };
	
	  return RequestBuilder;
	}();
	
	RequestBuilder.addHelper('asDelete', function () {
	  return function (client, processor, message) {
	    message.method = 'delete';
	  };
	});
	
	RequestBuilder.addHelper('asGet', function () {
	  return function (client, processor, message) {
	    message.method = 'get';
	  };
	});
	
	RequestBuilder.addHelper('asHead', function () {
	  return function (client, processor, message) {
	    message.method = 'head';
	  };
	});
	
	RequestBuilder.addHelper('asOptions', function () {
	  return function (client, processor, message) {
	    message.method = 'options';
	  };
	});
	
	RequestBuilder.addHelper('asPatch', function () {
	  return function (client, processor, message) {
	    message.method = 'patch';
	  };
	});
	
	RequestBuilder.addHelper('asPost', function () {
	  return function (client, processor, message) {
	    message.method = 'post';
	  };
	});
	
	RequestBuilder.addHelper('asPut', function () {
	  return function (client, processor, message) {
	    message.method = 'put';
	  };
	});
	
	RequestBuilder.addHelper('withUrl', function (url) {
	  return function (client, processor, message) {
	    message.url = url;
	  };
	});
	
	RequestBuilder.addHelper('withContent', function (content) {
	  return function (client, processor, message) {
	    message.content = content;
	  };
	});
	
	RequestBuilder.addHelper('withBaseUrl', function (baseUrl) {
	  return function (client, processor, message) {
	    message.baseUrl = baseUrl;
	  };
	});
	
	RequestBuilder.addHelper('withParams', function (params) {
	  return function (client, processor, message) {
	    message.params = params;
	  };
	});
	
	RequestBuilder.addHelper('withHeader', function (key, value) {
	  return function (client, processor, message) {
	    message.headers.add(key, value);
	  };
	});
	
	RequestBuilder.addHelper('withCredentials', function (value) {
	  return function (client, processor, message) {
	    message.withCredentials = value;
	  };
	});
	
	RequestBuilder.addHelper('withInterceptor', function (interceptor) {
	  return function (client, processor, message) {
	    message.interceptors = message.interceptors || [];
	    message.interceptors.unshift(interceptor);
	  };
	});
	
	function trackRequestStart(client, processor) {
	  client.pendingRequests.push(processor);
	  client.isRequesting = true;
	}
	
	function trackRequestEnd(client, processor) {
	  var index = client.pendingRequests.indexOf(processor);
	
	  client.pendingRequests.splice(index, 1);
	  client.isRequesting = client.pendingRequests.length > 0;
	
	  if (!client.isRequesting) {
	    (function () {
	      var evt = _aureliaPal.DOM.createCustomEvent('aurelia-sails-socket-client-requests-drained', { bubbles: true, cancelable: true });
	      setTimeout(function () {
	        return _aureliaPal.DOM.dispatchEvent(evt);
	      }, 1);
	    })();
	  }
	}
	
	var SailsSocketClient = exports.SailsSocketClient = function () {
	  function SailsSocketClient(socket) {
	    _classCallCheck(this, SailsSocketClient);
	
	    this.socket = socket;
	
	    this.requestTransformers = [];
	
	    this.interceptors = [];
	
	    this.pendingRequests = [];
	    this.isRequesting = false;
	  }
	
	  SailsSocketClient.prototype.setSocket = function setSocket(socket) {
	    this.socket = socket;
	    return this;
	  };
	
	  SailsSocketClient.prototype.addInterceptor = function addInterceptor(interceptor) {
	    this.interceptors.unshift(interceptor);
	    return this;
	  };
	
	  SailsSocketClient.prototype.configure = function configure(fn) {
	    var builder = new RequestBuilder(this);
	    fn(builder);
	    this.requestTransformers = builder.transformers;
	    return this;
	  };
	
	  SailsSocketClient.prototype.createRequest = function createRequest(url) {
	    var builder = new RequestBuilder(this);
	
	    if (url) {
	      builder.withUrl(url);
	    }
	
	    return builder;
	  };
	
	  SailsSocketClient.prototype.send = function send(requestMessage, transformers) {
	    var _this3 = this;
	
	    var processor = void 0;
	    var promise = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var transformPromises = [];
	
	    processor = createSocketRequestMessageProcessor();
	    trackRequestStart(this, processor);
	
	    transformers = transformers || this.requestTransformers;
	
	    promise = Promise.resolve(requestMessage).then(function (message) {
	      for (i = 0, ii = transformers.length; i < ii; ++i) {
	        transformPromises.push(transformers[i](_this3, processor, message));
	      }
	
	      return processor.process(_this3, message).then(function (response) {
	        trackRequestEnd(_this3, processor);
	        return response;
	      }).catch(function (response) {
	        trackRequestEnd(_this3, processor);
	        throw response;
	      });
	    });
	
	    promise.abort = promise.cancel = function () {
	      processor.abort();
	    };
	
	    return promise;
	  };
	
	  SailsSocketClient.prototype.delete = function _delete(url, content) {
	    return this.createRequest(url).asDelete().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.get = function get(url, content) {
	    return this.createRequest(url).asGet().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.head = function head(url, content) {
	    return this.createRequest(url).asHead().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.options = function options(url, content) {
	    return this.createRequest(url).asOptions().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.put = function put(url, content) {
	    return this.createRequest(url).asPut().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.patch = function patch(url, content) {
	    return this.createRequest(url).asPatch().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.post = function post(url, content) {
	    return this.createRequest(url).asPost().withContent(content).send();
	  };
	
	  SailsSocketClient.prototype.on = function on(eventName, fn) {
	    this.socket.on(eventName, fn);
	    return this;
	  };
	
	  SailsSocketClient.prototype.off = function off(eventName, fn) {
	    this.socket.off(eventName, fn);
	    return this;
	  };
	
	  return SailsSocketClient;
	}();
	
	var io = _aureliaPal.PLATFORM.global.io;
	
	if (io) {
	  io.sails.autoConnect = false;
	}
	
	function configure(config, configCallback) {
	  var sails = new SailsSocketClient();
	
	  if (configCallback !== undefined && typeof configCallback === 'function') {
	    configCallback(sails, io);
	  }
	
	  sails.setSocket(io.sails.connect());
	
	  config.instance(SailsSocketClient, sails);
	}
	
	exports.configure = configure;
	exports.SailsSocketClient = SailsSocketClient;
	exports.CSRFInterceptor = CSRFInterceptor;
	exports.LoggerInterceptor = LoggerInterceptor;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//////////////////////////////////////////////////////////////////////////////////////
	 //                                                                                //
	 //  ███████╗ █████╗ ██╗██╗     ███████╗   ██╗ ██████╗         ██╗███████╗         //
	 //  ██╔════╝██╔══██╗██║██║     ██╔════╝   ██║██╔═══██╗        ██║██╔════╝         //
	 //  ███████╗███████║██║██║     ███████╗   ██║██║   ██║        ██║███████╗         //
	 //  ╚════██║██╔══██║██║██║     ╚════██║   ██║██║   ██║   ██   ██║╚════██║         //
	 //  ███████║██║  ██║██║███████╗███████║██╗██║╚██████╔╝██╗╚█████╔╝███████║         //
	 //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═╝╚═╝ ╚═════╝ ╚═╝ ╚════╝ ╚══════╝         //
	 //                                                                                //
	 //   ╦╔═╗╦  ╦╔═╗╔═╗╔═╗╦═╗╦╔═╗╔╦╗  ╔═╗╦  ╦╔═╗╔╗╔╔╦╗  ╔═╗╔╦╗╦╔═                     //
	 //   ║╠═╣╚╗╔╝╠═╣╚═╗║  ╠╦╝║╠═╝ ║   ║  ║  ║║╣ ║║║ ║   ╚═╗ ║║╠╩╗                     //
	 //  ╚╝╩ ╩ ╚╝ ╩ ╩╚═╝╚═╝╩╚═╩╩   ╩   ╚═╝╩═╝╩╚═╝╝╚╝ ╩   ╚═╝═╩╝╩ ╩                     //
	 //  ┌─┐┌─┐┬─┐  ┌┐┌┌─┐┌┬┐┌─┐  ┬┌─┐  ┌─┐┌┐┌┌┬┐  ┌┬┐┬ ┬┌─┐  ┌┐ ┬─┐┌─┐┬ ┬┌─┐┌─┐┬─┐    //
	 //  ├┤ │ │├┬┘  ││││ │ ││├┤   │└─┐  ├─┤│││ ││   │ ├─┤├┤   ├┴┐├┬┘│ ││││└─┐├┤ ├┬┘    //
	 //  └  └─┘┴└─  ┘└┘└─┘─┴┘└─┘o└┘└─┘  ┴ ┴┘└┘─┴┘   ┴ ┴ ┴└─┘  └─┘┴└─└─┘└┴┘└─┘└─┘┴└─    //
	 //                                                                                //
	//////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * sails.io.js
	 * ------------------------------------------------------------------------
	 * JavaScript Client (SDK) for communicating with Sails.
	 *
	 * Note that this script is completely optional, but it is handy if you're
	 * using WebSockets from the browser to talk to your Sails server.
	 *
	 * For tips and documentation, visit:
	 * http://sailsjs.org/#!documentation/reference/BrowserSDK/BrowserSDK.html
	 * ------------------------------------------------------------------------
	 *
	 * This file allows you to send and receive socket.io messages to & from Sails
	 * by simulating a REST client interface on top of socket.io. It models its API
	 * after the $.ajax pattern from jQuery you might already be familiar with.
	 *
	 * So if you're switching from using AJAX to sockets, instead of:
	 *    `$.post( url, [data], [cb] )`
	 *
	 * You would use:
	 *    `socket.post( url, [data], [cb] )`
	 */
	
	
	(function() {
	
	
	  //   ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗
	  //  ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝
	  //  ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗
	  //  ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║
	  //  ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║
	  //   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝
	  //
	
	
	  /**
	   * Constant containing the names of all available options
	   * for individual sockets.
	   *
	   * @type {Array}
	   */
	  var SOCKET_OPTIONS = [
	    'useCORSRouteToGetCookie',
	    'url',
	    'multiplex',
	    'transports',
	    'query',
	    'path',
	    'headers',
	    'initialConnectionHeaders',
	    'reconnection',
	    'reconnectionAttempts',
	    'reconnectionDelay',
	    'reconnectionDelayMax',
	    'rejectUnauthorized',
	    'randomizationFactor',
	    'timeout'
	  ];
	
	
	  /**
	   * Constant containing the names of properties on `io.sails` which
	   * may be configured using HTML attributes on the script tag which
	   * loaded this file.
	   *
	   * @type {Array}
	   *
	   * (this is unused if loading from node.js)
	   */
	  var CONFIGURABLE_VIA_HTML_ATTR = [
	    'autoConnect',
	    'environment',
	    'headers',
	    'url',
	    'transports',
	    'path'
	  ];
	
	
	
	
	  /**
	   * Constant containing the names of querystring
	   * parameters sent when connecting any SailsSocket.
	   *
	   * @type {Dictionary}
	   */
	  var CONNECTION_METADATA_PARAMS = {
	    version: '__sails_io_sdk_version',
	    platform: '__sails_io_sdk_platform',
	    language: '__sails_io_sdk_language'
	  };
	
	
	  /**
	   * Constant containing metadata about the platform, language, and
	   * current version of this SDK.
	   *
	   * @type {Dictionary}
	   */
	  var SDK_INFO = {
	    version: '0.13.8', // <-- pulled automatically from package.json, do not change!
	    language: 'javascript',
	    platform: (function (){
	      if (typeof module === 'object' && typeof module.exports !== 'undefined') {
	        return 'node';
	      }
	      else {
	        return 'browser';
	      }
	    })()
	  };
	
	  // Build `versionString` (a querystring snippet) by
	  // combining SDK_INFO and CONNECTION_METADATA_PARAMS.
	  SDK_INFO.versionString =
	    CONNECTION_METADATA_PARAMS.version + '=' + SDK_INFO.version + '&' +
	    CONNECTION_METADATA_PARAMS.platform + '=' + SDK_INFO.platform + '&' +
	    CONNECTION_METADATA_PARAMS.language + '=' + SDK_INFO.language;
	
	
	
	
	  //   █████╗ ██████╗ ███████╗ ██████╗ ██████╗ ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗
	  //  ██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║
	  //  ███████║██████╔╝███████╗██║   ██║██████╔╝██████╔╝    ███████║   ██║   ██╔████╔██║██║
	  //  ██╔══██║██╔══██╗╚════██║██║   ██║██╔══██╗██╔══██╗    ██╔══██║   ██║   ██║╚██╔╝██║██║
	  //  ██║  ██║██████╔╝███████║╚██████╔╝██║  ██║██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗
	  //  ╚═╝  ╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝
	  //
	  //   █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗
	  //  ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝
	  //  ███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗
	  //  ██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║
	  //  ██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║
	  //  ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝
	  //
	  //  ███████╗██████╗  ██████╗ ███╗   ███╗      ██╗███████╗ ██████╗██████╗ ██╗██████╗ ████████╗██╗
	  //  ██╔════╝██╔══██╗██╔═══██╗████╗ ████║     ██╔╝██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗
	  //  █████╗  ██████╔╝██║   ██║██╔████╔██║    ██╔╝ ███████╗██║     ██████╔╝██║██████╔╝   ██║    ╚██╗
	  //  ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║    ╚██╗ ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║    ██╔╝
	  //  ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║     ╚██╗███████║╚██████╗██║  ██║██║██║        ██║   ██╔╝
	  //  ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝      ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚═╝
	  //
	  //
	  // If available, grab the DOM element for the script tag which imported this file.
	  // (skip this if this SDK is being used outside of the DOM, i.e. in a Node process)
	  //
	  // This is used below to parse client-side sails.io.js configuration encoded as
	  // HTML attributes, as well as grabbing hold of the URL from whence the SDK was fetched.
	  var thisScriptTag = (function() {
	    if (
	      typeof window !== 'object' ||
	      typeof window.document !== 'object' ||
	      typeof window.document.getElementsByTagName !== 'function'
	    ) {
	      return null;
	    }
	
	    // Return the URL of the last script loaded (i.e. this one)
	    // (this must run before nextTick; see http://stackoverflow.com/a/2976714/486547)
	    var allScriptsCurrentlyInDOM = window.document.getElementsByTagName('script');
	    return allScriptsCurrentlyInDOM[allScriptsCurrentlyInDOM.length - 1];
	  })();
	
	
	  // Variables to contain src URL and other script tag config (for use below).
	  var urlThisScriptWasFetchedFrom = '';
	  var scriptTagConfig = {};
	
	
	  if (thisScriptTag) {
	    // Save the URL that this script was fetched from.
	    urlThisScriptWasFetchedFrom = thisScriptTag.src;
	
	    // Now parse the most common client-side configuration settings
	    // from the script tag where they may be encoded as HTML attributes.
	    //
	    // Any configuration which may be provided as an HTML attribute may
	    // also be provided prefixed with `data-`.  This is for folks who
	    // need to support browsers that have issues with nonstandard
	    // HTML attributes (or if the idea of using nonstandard HTML attributes
	    // just creeps you out)
	    //
	    // If a `data-` prefixed attr is provided, it takes precedence.
	    // (this is so that if you are already using one of these HTML
	    //  attrs for some reason, you can keep it as-is and override
	    //  it using `data-`. If you are using the `data-` prefixed version
	    //  for some other purpose... well, in that case you'll just have to
	    //  configure programmatically using `io.sails` instead.)
	    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){
	
	      scriptTagConfig[configKey] = (function (){
	
	        // Support 'data-' prefixed or normal attributes.
	        // (prefixed versions take precedence if provided)
	        var htmlAttrVal = thisScriptTag.getAttribute( 'data-'+configKey );
	        if (!htmlAttrVal) {
	          htmlAttrVal = thisScriptTag.getAttribute( configKey );
	        }
	
	        // The HTML attribute value should always be a string or `null`.
	        // We'll try to parse it as JSON and use that, but worst case fall back
	        // to the default situation of it being a string.
	        if (typeof htmlAttrVal === 'string') {
	          try { return JSON.parse(htmlAttrVal); } catch (e) { return htmlAttrVal; }
	        }
	        // If `null` was returned from getAttribute(), it means that the HTML attribute
	        // was not specified, so we treat it as undefined (which will cause the property
	        // to be removed below)
	        else if (htmlAttrVal === null) {
	          return undefined;
	        }
	        // Any other contingency shouldn't be possible:
	        // - if no quotes are used in the HTML attribute, it still comes in as a string.
	        // - if no RHS is provided for the attribute, it still comes in as "" (empty string)
	        // (but we still handle this with an explicit error just in case--for debugging and support purposes)
	        else throw new Error('sails.io.js :: Unexpected/invalid script tag configuration for `'+configKey+'`: `'+htmlAttrVal+'` (a `'+typeof htmlAttrVal+'`). Should be a string.');
	      })();
	
	      if (scriptTagConfig[configKey] === undefined){
	        delete scriptTagConfig[configKey];
	      }
	    });
	
	
	
	    // Now that they've been parsed, do an extremely lean version of
	    // logical type validation/coercion of provided values.
	    //////////////////////////////////////////////////////////////////
	
	    // `autoConnect`
	    if (typeof scriptTagConfig.autoConnect !== 'undefined') {
	      if (scriptTagConfig.autoConnect === '') {
	        // Special case for empty string.  It means `true` (see above).
	        scriptTagConfig.autoConnect = true;
	      }
	      else if (typeof scriptTagConfig.autoConnect !== 'boolean') {
	        throw new Error('sails.io.js :: Unexpected/invalid configuration for `autoConnect` provided in script tag: `'+scriptTagConfig.autoConnect+'` (a `'+typeof scriptTagConfig.autoConnect+'`). Should be a boolean.');
	      }
	    }
	
	
	    // `environment`
	    if (typeof scriptTagConfig.environment !== 'undefined') {
	      if (typeof scriptTagConfig.environment !== 'string') {
	        throw new Error('sails.io.js :: Unexpected/invalid configuration for `environment` provided in script tag: `'+scriptTagConfig.environment+'` (a `'+typeof scriptTagConfig.environment+'`). Should be a string.');
	      }
	    }
	
	
	    // `headers`
	    if (typeof scriptTagConfig.headers !== 'undefined') {
	      if (typeof scriptTagConfig.headers !== 'object' || Array.isArray(scriptTagConfig.headers)) {
	        throw new Error('sails.io.js :: Unexpected/invalid configuration for `headers` provided in script tag: `'+scriptTagConfig.headers+'` (a `'+typeof scriptTagConfig.headers+'`). Should be a JSON-compatible dictionary (i.e. `{}`).  Don\'t forget those double quotes (""), even on key names!  Use single quotes (\'\') to wrap the HTML attribute value; e.g. `headers=\'{"X-Auth": "foo"}\'`');
	      }
	    }
	
	
	    // `url`
	    if (typeof scriptTagConfig.url !== 'undefined') {
	      if (typeof scriptTagConfig.url !== 'string') {
	        throw new Error('sails.io.js :: Unexpected/invalid configuration for `url` provided in script tag: `'+scriptTagConfig.url+'` (a `'+typeof scriptTagConfig.url+'`). Should be a string.');
	      }
	    }
	
	    // OTHER `io.sails` options are NOT CURRENTLY SUPPORTED VIA HTML ATTRIBUTES.
	  }
	
	
	
	
	  // Grab a reference to the global socket.io client (if one is available).
	  // This is used via closure below to determine which `io` to use when the
	  // socket.io client instance (`io`) is augmented to become the Sails client
	  // SDK instance (still `io`).
	  var _existingGlobalSocketIO = (typeof io !== 'undefined') ? io : undefined;
	
	
	
	
	  //////////////////////////////////////////////////////////////
	  /////
	  ///// NOW FOR BUNCHES OF:
	  /////  - PRIVATE FUNCTION DEFINITIONS
	  /////  - CONSTRUCTORS
	  /////  - AND METHODS
	  /////
	  //////////////////////////////////////////////////////////////
	  //
	
	
	
	  //  ███████╗ █████╗ ██╗██╗     ███████╗      ██╗ ██████╗        ██████╗██╗     ██╗███████╗███╗   ██╗████████╗
	  //  ██╔════╝██╔══██╗██║██║     ██╔════╝      ██║██╔═══██╗      ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝
	  //  ███████╗███████║██║██║     ███████╗█████╗██║██║   ██║█████╗██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║
	  //  ╚════██║██╔══██║██║██║     ╚════██║╚════╝██║██║   ██║╚════╝██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║
	  //  ███████║██║  ██║██║███████╗███████║      ██║╚██████╔╝      ╚██████╗███████╗██║███████╗██║ ╚████║   ██║
	  //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝      ╚═╝ ╚═════╝        ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝
	  //
	
	  /**
	   * SailsIOClient()
	   *
	   * Augment the provided Socket.io client object (`io`) with methods for
	   * talking and listening to one or more Sails backend(s).  If no `io` was
	   * provided (i.e. in a browser setting), then attempt to use the global.
	   *
	   * This absorbs implicit `io.sails` configuration, sets a timer for
	   * automatically connecting a socket (if `io.sails.autoConnect` is enabled)
	   * and returns the augmented `io`.
	   *
	   * Note:
	   * The automatically-connected socket is exposed as `io.socket`.  If this
	   * socket attempts to bind event listeners or send requests before it is
	   * connected, it will be queued up and replayed when the connection is
	   * successfully opened.
	   *
	   * @param {SocketIO} io
	   * @returns {SailsIOClient} [also called `io`]
	   */
	
	  function SailsIOClient(_providedSocketIO) {
	
	    // First, determine which `io` we're augmenting.
	    //
	    // Prefer the passed-in `io` instance, but fall back to the
	    // global one if we've got it.
	    var io;
	    if (_providedSocketIO) {
	      io = _providedSocketIO;
	    }
	    else {
	      io = _existingGlobalSocketIO;
	    }
	    // (note that for readability, we deliberately do not short circuit or use the tertiary operator above)
	
	
	    // If a socket.io client (`io`) is not available, none of this will work.
	    if (!io) {
	      // If node:
	      if (SDK_INFO.platform === 'node') {
	        throw new Error('No socket.io client available.  When requiring `sails.io.js` from Node.js, a socket.io client (`io`) must be passed in; e.g.:\n```\nvar io = require(\'sails.io.js\')( require(\'socket.io-client\') )\n```\n(see https://github.com/balderdashy/sails.io.js/tree/master/test for more examples)');
	      }
	      // Otherwise, this is a web browser:
	      else {
	        throw new Error('The Sails socket SDK depends on the socket.io client, but the socket.io global (`io`) was not available when `sails.io.js` loaded.  Normally, the socket.io client code is bundled with sails.io.js, so something is a little off.  Please check to be sure this version of `sails.io.js` has the minified Socket.io client at the top of the file.');
	      }
	    }
	
	    // If the chosen socket.io client (`io`) has ALREADY BEEN AUGMENTED by this SDK,
	    // (i.e. if it already has a `.sails` property) then throw an error.
	    if (io.sails) {
	      // If node:
	      if (SDK_INFO.platform === 'node') {
	        throw new Error('The provided socket.io client (`io`) has already been augmented into a Sails socket SDK instance (it has `io.sails`).');
	      }
	      // Otherwise, this is a web browser:
	      else {
	        throw new Error('The socket.io client (`io`) has already been augmented into a Sails socket SDK instance.  Usually, this means you are bringing `sails.io.js` onto the page more than once.');
	      }
	    }
	
	
	    /**
	     * A little logger for this library to use internally.
	     * Basically just a wrapper around `console.log` with
	     * support for feature-detection.
	     *
	     * @api private
	     * @factory
	     */
	    function LoggerFactory(options) {
	      options = options || {
	        prefix: true
	      };
	
	      // If `console.log` is not accessible, `log` is a noop.
	      if (
	        typeof console !== 'object' ||
	        typeof console.log !== 'function' ||
	        typeof console.log.bind !== 'function'
	      ) {
	        return function noop() {};
	      }
	
	      return function log() {
	        var args = Array.prototype.slice.call(arguments);
	
	        // All logs are disabled when `io.sails.environment = 'production'`.
	        if (io.sails.environment === 'production') return;
	
	        // Add prefix to log messages (unless disabled)
	        var PREFIX = '';
	        if (options.prefix) {
	          args.unshift(PREFIX);
	        }
	
	        // Call wrapped logger
	        console.log
	          .bind(console)
	          .apply(this, args);
	      };
	    }//</LoggerFactory>
	
	    // Create a private logger instance
	    var consolog = LoggerFactory();
	    consolog.noPrefix = LoggerFactory({
	      prefix: false
	    });
	
	
	
	    /**
	     * What is the `requestQueue`?
	     *
	     * The request queue is used to simplify app-level connection logic--
	     * i.e. so you don't have to wait for the socket to be connected
	     * to start trying to  synchronize data.
	     *
	     * @api private
	     * @param  {SailsSocket}  socket
	     */
	
	    function runRequestQueue (socket) {
	      var queue = socket.requestQueue;
	
	      if (!queue) return;
	      for (var i in queue) {
	
	        // Double-check that `queue[i]` will not
	        // inadvertently discover extra properties attached to the Object
	        // and/or Array prototype by other libraries/frameworks/tools.
	        // (e.g. Ember does this. See https://github.com/balderdashy/sails.io.js/pull/5)
	        var isSafeToDereference = ({}).hasOwnProperty.call(queue, i);
	        if (isSafeToDereference) {
	          // Get the arguments that were originally made to the "request" method
	          var requestArgs = queue[i];
	          // Call the request method again in the context of the socket, with the original args
	          socket.request.apply(socket, requestArgs);
	        }
	      }
	
	      // Now empty the queue to remove it as a source of additional complexity.
	      socket.requestQueue = null;
	    }
	
	
	
	    /**
	     * Send a JSONP request.
	     *
	     * @param  {Object}   opts [optional]
	     * @param  {Function} cb
	     * @return {XMLHttpRequest}
	     */
	
	    function jsonp(opts, cb) {
	      opts = opts || {};
	
	      if (typeof window === 'undefined') {
	        // TODO: refactor node usage to live in here
	        return cb();
	      }
	
	      var scriptEl = document.createElement('script');
	      window._sailsIoJSConnect = function(response) {
	        // In rare circumstances our script may have been vaporised.
	        // Remove it, but only if it still exists
	        // https://github.com/balderdashy/sails.io.js/issues/92
	        if (scriptEl && scriptEl.parentNode) {
	            scriptEl.parentNode.removeChild(scriptEl);
	        }
	
	        cb(response);
	      };
	      scriptEl.src = opts.url;
	      document.getElementsByTagName('head')[0].appendChild(scriptEl);
	
	    }
	
	
	
	
	    //       ██╗███████╗ ██████╗ ███╗   ██╗      ██╗    ██╗███████╗██████╗ ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗
	    //       ██║██╔════╝██╔═══██╗████╗  ██║      ██║    ██║██╔════╝██╔══██╗██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝
	    //       ██║███████╗██║   ██║██╔██╗ ██║█████╗██║ █╗ ██║█████╗  ██████╔╝███████╗██║   ██║██║     █████╔╝ █████╗     ██║
	    //  ██   ██║╚════██║██║   ██║██║╚██╗██║╚════╝██║███╗██║██╔══╝  ██╔══██╗╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║
	    //  ╚█████╔╝███████║╚██████╔╝██║ ╚████║      ╚███╔███╔╝███████╗██████╔╝███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║
	    //   ╚════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝       ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝
	    //
	    //  ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗     ██╗     ██╗██╗    ██╗██████╗ ██╗
	    //  ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝    ██╔╝     ██║██║    ██║██╔══██╗╚██╗
	    //  ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗      ██║      ██║██║ █╗ ██║██████╔╝ ██║
	    //  ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝      ██║ ██   ██║██║███╗██║██╔══██╗ ██║
	    //  ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗    ╚██╗╚█████╔╝╚███╔███╔╝██║  ██║██╔╝
	    //  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝     ╚═╝ ╚════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝
	    //
	
	    /**
	     * The JWR (JSON WebSocket Response) received from a Sails server.
	     *
	     * @api public
	     * @param  {Object}  responseCtx
	     *         => :body
	     *         => :statusCode
	     *         => :headers
	     *
	     * @constructor
	     */
	
	    function JWR(responseCtx) {
	      this.body = responseCtx.body || {};
	      this.headers = responseCtx.headers || {};
	      this.statusCode = responseCtx.statusCode || 200;
	      if (this.statusCode < 200 || this.statusCode >= 400) {
	        this.error = this.body || this.statusCode;
	      }
	    }
	    JWR.prototype.toString = function() {
	      return '[ResponseFromSails]' + '  -- ' +
	        'Status: ' + this.statusCode + '  -- ' +
	        'Headers: ' + this.headers + '  -- ' +
	        'Body: ' + this.body;
	    };
	    JWR.prototype.toPOJO = function() {
	      return {
	        body: this.body,
	        headers: this.headers,
	        statusCode: this.statusCode
	      };
	    };
	    JWR.prototype.pipe = function() {
	      // TODO: look at substack's stuff
	      return new Error('Client-side streaming support not implemented yet.');
	    };
	
	
	
	
	    //          ███████╗███╗   ███╗██╗████████╗███████╗██████╗  ██████╗ ███╗   ███╗ ██╗██╗
	    //          ██╔════╝████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗██╔═══██╗████╗ ████║██╔╝╚██╗
	    //          █████╗  ██╔████╔██║██║   ██║   █████╗  ██████╔╝██║   ██║██╔████╔██║██║  ██║
	    //          ██╔══╝  ██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║██║  ██║
	    //  ███████╗███████╗██║ ╚═╝ ██║██║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║╚██╗██╔╝
	    //  ╚══════╝╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═╝╚═╝
	    //
	
	    /**
	     * @api private
	     * @param  {SailsSocket} socket  [description]
	     * @param  {Object} requestCtx [description]
	     */
	
	    function _emitFrom(socket, requestCtx) {
	
	      if (!socket._raw) {
	        throw new Error('Failed to emit from socket- raw SIO socket is missing.');
	      }
	
	      // Since callback is embedded in requestCtx,
	      // retrieve it and delete the key before continuing.
	      var cb = requestCtx.cb;
	      delete requestCtx.cb;
	
	      // Name of the appropriate socket.io listener on the server
	      // ( === the request method or "verb", e.g. 'get', 'post', 'put', etc. )
	      var sailsEndpoint = requestCtx.method;
	
	      socket._raw.emit(sailsEndpoint, requestCtx, function serverResponded(responseCtx) {
	
	        // Send back (emulatedHTTPBody, jsonWebSocketResponse)
	        if (cb) {
	          cb(responseCtx.body, new JWR(responseCtx));
	        }
	      });
	    }
	
	
	
	
	
	
	
	    //  ███████╗ █████╗ ██╗██╗     ███████╗███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗
	    //  ██╔════╝██╔══██╗██║██║     ██╔════╝██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝
	    //  ███████╗███████║██║██║     ███████╗███████╗██║   ██║██║     █████╔╝ █████╗     ██║
	    //  ╚════██║██╔══██║██║██║     ╚════██║╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║
	    //  ███████║██║  ██║██║███████╗███████║███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║
	    //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝
	    //
	
	    /**
	     * SailsSocket
	     *
	     * A wrapper for an underlying Socket instance that communicates directly
	     * to the Socket.io server running inside of Sails.
	     *
	     * If no `socket` option is provied, SailsSocket will function as a mock. It will queue socket
	     * requests and event handler bindings, replaying them when the raw underlying socket actually
	     * connects. This is handy when we don't necessarily have the valid configuration to know
	     * WHICH SERVER to talk to yet, etc.  It is also used by `io.socket` for your convenience.
	     *
	     * @constructor
	     * @api private
	     *
	     * ----------------------------------------------------------------------
	     * Note: This constructor should not be used directly. To obtain a `SailsSocket`
	     * instance of your very own, run:
	     * ```
	     * var mySocket = io.sails.connect();
	     * ```
	     * ----------------------------------------------------------------------
	     */
	    function SailsSocket (opts){
	      var self = this;
	      opts = opts||{};
	
	      // Set up connection options so that they can only be changed when socket is disconnected.
	      var _opts = {};
	      SOCKET_OPTIONS.forEach(function(option) {
	        // Okay to change global headers while socket is connected
	        if (option == 'headers') {return;}
	        Object.defineProperty(self, option, {
	          get: function() {
	            if (option == 'url') {
	              return _opts[option] || (self._raw && self._raw.io && self._raw.io.uri);
	            }
	            return _opts[option];
	          },
	          set: function(value) {
	            // Don't allow value to be changed while socket is connected
	            if (self.isConnected() && io.sails.strict !== false && value != _opts[option]) {
	              throw new Error('Cannot change value of `' + option + '` while socket is connected.');
	            }
	            // If socket is attempting to reconnect, stop it.
	            if (self._raw && self._raw.io && self._raw.io.reconnecting && !self._raw.io.skipReconnect) {
	              self._raw.io.skipReconnect = true;
	              consolog('Stopping reconnect; use .reconnect() to connect socket after changing options.');
	            }
	            _opts[option] = value;
	          }
	        });
	      });
	
	      // Absorb opts into SailsSocket instance
	      // See https://sailsjs.org/reference/websockets/sails.io.js/SailsSocket/properties.md
	      // for description of options
	      SOCKET_OPTIONS.forEach(function(option) {
	        self[option] = opts[option];
	      });
	
	      // Set up "eventQueue" to hold event handlers which have not been set on the actual raw socket yet.
	      self.eventQueue = {};
	
	      // Listen for special `parseError` event sent from sockets hook on the backend
	      // if an error occurs but a valid callback was not received from the client
	      // (i.e. so the server had no other way to send back the error information)
	      self.on('sails:parseError', function (err){
	        consolog('Sails encountered an error parsing a socket message sent from this client, and did not have access to a callback function to respond with.');
	        consolog('Error details:',err);
	      });
	
	      // TODO:
	      // Listen for a special private message on any connected that allows the server
	      // to set the environment (giving us 100% certainty that we guessed right)
	      // However, note that the `console.log`s called before and after connection
	      // are still forced to rely on our existing heuristics (to disable, tack #production
	      // onto the URL used to fetch this file.)
	    }//</SailsSocket>
	
	
	    /**
	     * `SailsSocket.prototype._connect()`
	     *
	     * Begin connecting this socket to the server.
	     *
	     * @api private
	     */
	    SailsSocket.prototype._connect = function (){
	      var self = this;
	
	      self.isConnecting = true;
	
	      // Apply `io.sails` config as defaults
	      // (now that at least one tick has elapsed)
	      // See https://sailsjs.org/reference/websockets/sails.io.js/SailsSocket/properties.md
	      // for description of options and default values
	      SOCKET_OPTIONS.forEach(function(option) {
	        if ('undefined' == typeof self[option]) {
	          self[option] = io.sails[option];
	        }
	      });
	
	      // Headers that will be sent with the initial request to /socket.io (Node.js only)
	      self.extraHeaders = self.initialConnectionHeaders || {};
	
	      // Log a warning if non-Node.js platform attempts to use `initialConnectionHeaders`
	      if (self.initialConnectionHeaders && SDK_INFO.platform !== 'node') {
	        if (typeof console === 'object' && typeof console.warn === 'function') {
	          console.warn('initialConnectionHeaders option available in Node.js only!');
	        }
	      }
	
	      // Ensure URL has no trailing slash
	      self.url = self.url ? self.url.replace(/(\/)$/, '') : undefined;
	
	      // Mix the current SDK version into the query string in
	      // the connection request to the server:
	      if (typeof self.query !== 'string') self.query = SDK_INFO.versionString;
	      else self.query += '&' + SDK_INFO.versionString;
	
	      // Determine whether this is a cross-origin socket by examining the
	      // hostname and port on the `window.location` object.  If it's cross-origin,
	      // we'll attempt to get a cookie for the domain so that a Sails session can
	      // be established.
	      var isXOrigin = (function (){
	
	        // If `window` doesn't exist (i.e. being used from Node.js), then
	        // we won't bother attempting to get a cookie.  If you're using sockets
	        // from Node.js and find you need to share a session between multiple
	        // socket connections, you'll need to make an HTTP request to the /__getcookie
	        // endpoint of the Sails server (or any endpoint that returns a set-cookie header)
	        // and then use the cookie value in the `initialConnectionHeaders` option to
	        // io.sails.connect()
	        if (typeof window === 'undefined' || typeof window.location === 'undefined') {
	          return false;
	        }
	
	        // If `self.url` (aka "target") is falsy, then we don't need to worry about it.
	        if (typeof self.url !== 'string') { return false; }
	
	        // Get information about the "target" (`self.url`)
	        var targetProtocol = (function (){
	          try {
	            targetProtocol = self.url.match(/^([a-z]+:\/\/)/i)[1].toLowerCase();
	          }
	          catch (e) {}
	          targetProtocol = targetProtocol || 'http://';
	          return targetProtocol;
	        })();
	        var isTargetSSL = !!self.url.match('^https');
	        var targetPort = (function (){
	          try {
	            return self.url.match(/^[a-z]+:\/\/[^:]*:([0-9]*)/i)[1];
	          }
	          catch (e){}
	          return isTargetSSL ? '443' : '80';
	        })();
	        var targetAfterProtocol = self.url.replace(/^([a-z]+:\/\/)/i, '');
	
	
	        // If target protocol is different than the actual protocol,
	        // then we'll consider this cross-origin.
	        if (targetProtocol.replace(/[:\/]/g, '') !== window.location.protocol.replace(/[:\/]/g,'')) {
	          return true;
	        }
	
	
	        // If target hostname is different than actual hostname, we'll consider this cross-origin.
	        var hasSameHostname = targetAfterProtocol.search(window.location.hostname) === 0;
	        if (!hasSameHostname) {
	          return true;
	        }
	
	        // If no actual port is explicitly set on the `window.location` object,
	        // we'll assume either 80 or 443.
	        var isLocationSSL = window.location.protocol.match(/https/i);
	        var locationPort = (window.location.port+'') || (isLocationSSL ? '443' : '80');
	
	        // Finally, if ports don't match, we'll consider this cross-origin.
	        if (targetPort !== locationPort) {
	          return true;
	        }
	
	        // Otherwise, it's the same origin.
	        return false;
	
	      })();
	
	
	      // Prepare to start connecting the socket
	      (function selfInvoking (cb){
	
	        // If this is an attempt at a cross-origin or cross-port
	        // socket connection via a browswe, send a JSONP request
	        // first to ensure that a valid cookie is available.
	        // This can be disabled by setting `io.sails.useCORSRouteToGetCookie`
	        // to false.
	        //
	        // Otherwise, skip the stuff below.
	        //
	        if (!(self.useCORSRouteToGetCookie && isXOrigin)) {
	          return cb();
	        }
	
	        // Figure out the x-origin CORS route
	        // (Sails provides a default)
	        var xOriginCookieURL = self.url;
	        if (typeof self.useCORSRouteToGetCookie === 'string') {
	          xOriginCookieURL += self.useCORSRouteToGetCookie;
	        }
	        else {
	          xOriginCookieURL += '/__getcookie';
	        }
	
	        // Make the AJAX request (CORS)
	        jsonp({
	          url: xOriginCookieURL,
	          method: 'GET'
	        }, cb);
	
	      })(function goAheadAndActuallyConnect() {
	
	        // Now that we're ready to connect, create a raw underlying Socket
	        // using Socket.io and save it as `_raw` (this will start it connecting)
	        self._raw = io(self.url, self);
	
	        // Replay event bindings from the eager socket
	        self.replay();
	
	
	        /**
	         * 'connect' event is triggered when the socket establishes a connection
	         *  successfully.
	         */
	        self.on('connect', function socketConnected() {
	          self.isConnecting = false;
	          consolog.noPrefix(
	            '\n' +
	            '\n' +
	            // '    |>    ' + '\n' +
	            // '  \\___/  '+️
	            // '\n'+
	             '  |>    Now connected to Sails.' + '\n' +
	            '\\___/   For help, see: http://bit.ly/1DmTvgK' + '\n' +
	             '        (using sails.io.js '+io.sails.sdk.platform+' SDK @v'+io.sails.sdk.version+')'+ '\n' +
	            '\n'+
	            '\n'+
	            // '\n'+
	            ''
	            // ' ⚓︎ (development mode)'
	            // 'e.g. to send a GET request to Sails via WebSockets, run:'+ '\n' +
	            // '`io.socket.get("/foo", function serverRespondedWith (body, jwr) { console.log(body); })`'+ '\n' +
	          );
	        });
	
	        self.on('disconnect', function() {
	          self.connectionLostTimestamp = (new Date()).getTime();
	          consolog('====================================');
	          consolog('Socket was disconnected from Sails.');
	          consolog('Usually, this is due to one of the following reasons:' + '\n' +
	            ' -> the server ' + (self.url ? self.url + ' ' : '') + 'was taken down' + '\n' +
	            ' -> your browser lost internet connectivity');
	          consolog('====================================');
	        });
	
	        self.on('reconnecting', function(numAttempts) {
	          consolog(
	            '\n'+
	            '        Socket is trying to reconnect to Sails...\n'+
	            '_-|>_-  (attempt #' + numAttempts + ')'+'\n'+
	            '\n'
	          );
	        });
	
	        self.on('reconnect', function(transport, numAttempts) {
	          if (!self.isConnecting) {
	            self.on('connect', runRequestQueue.bind(self, self));
	          }
	          var msSinceConnectionLost = ((new Date()).getTime() - self.connectionLostTimestamp);
	          var numSecsOffline = (msSinceConnectionLost / 1000);
	          consolog(
	            '\n'+
	             '  |>    Socket reconnected successfully after'+'\n'+
	            '\\___/   being offline for ~' + numSecsOffline + ' seconds.'+'\n'+
	            '\n'
	          );
	        });
	
	        // 'error' event is triggered if connection can not be established.
	        // (usually because of a failed authorization, which is in turn
	        // usually due to a missing or invalid cookie)
	        self.on('error', function failedToConnect(err) {
	          self.isConnecting = false;
	          ////////////////////////////////////////////////////////////////////////////////////
	          // Note:
	          // In the future, we could provide a separate event for when a socket cannot connect
	          // due to a failed `beforeConnect` (aka "authorization" if you're old school).
	          // this could probably be implemented by emitting a special event from the server.
	          ////////////////////////////////////////////////////////////////////////////////////
	
	          consolog(
	            'Failed to connect socket (possibly due to failed `beforeConnect` on server)',
	            'Error:', err
	          );
	        });
	      });
	
	    };
	
	    /**
	     * Reconnect the underlying socket.
	     *
	     * @api public
	     */
	    SailsSocket.prototype.reconnect = function (){
	      if (this.isConnecting) {
	        throw new Error('Cannot connect- socket is already connecting');
	      }
	      if (this.isConnected()) {
	        throw new Error('Cannot connect- socket is already connected');
	      }
	      return this._connect();
	    };
	
	    /**
	     * Disconnect the underlying socket.
	     *
	     * @api public
	     */
	    SailsSocket.prototype.disconnect = function (){
	      this.isConnecting = false;
	      if (!this.isConnected()) {
	        throw new Error('Cannot disconnect- socket is already disconnected');
	      }
	      return this._raw.disconnect();
	    };
	
	
	
	    /**
	     * isConnected
	     *
	     * @api private
	     * @return {Boolean} whether the socket is connected and able to
	     *                           communicate w/ the server.
	     */
	
	    SailsSocket.prototype.isConnected = function () {
	      if (!this._raw) {
	        return false;
	      }
	
	      return !!this._raw.connected;
	    };
	
	
	
	    /**
	     * [replay description]
	     * @return {[type]} [description]
	     */
	    SailsSocket.prototype.replay = function (){
	      var self = this;
	
	      // Pass events and a reference to the request queue
	      // off to the self._raw for consumption
	      for (var evName in self.eventQueue) {
	        for (var i in self.eventQueue[evName]) {
	          self._raw.on(evName, self.eventQueue[evName][i]);
	        }
	      }
	
	      // Bind a one-time function to run the request queue
	      // when the self._raw connects.
	      if ( !self.isConnected() ) {
	        self._raw.once('connect', runRequestQueue.bind(self, self));
	      }
	      // Or run it immediately if self._raw is already connected
	      else {
	        runRequestQueue(self);
	      }
	
	      return self;
	    };
	
	
	    /**
	     * Chainable method to bind an event to the socket.
	     *
	     * @param  {String}   evName [event name]
	     * @param  {Function} fn     [event handler function]
	     * @return {SailsSocket}
	     */
	    SailsSocket.prototype.on = function (evName, fn){
	
	      // Bind the event to the raw underlying socket if possible.
	      if (this._raw) {
	        this._raw.on(evName, fn);
	        return this;
	      }
	
	      // Otherwise queue the event binding.
	      if (!this.eventQueue[evName]) {
	        this.eventQueue[evName] = [fn];
	      }
	      else {
	        this.eventQueue[evName].push(fn);
	      }
	
	      return this;
	    };
	
	    /**
	     * Chainable method to unbind an event from the socket.
	     *
	     * @param  {String}   evName [event name]
	     * @param  {Function} fn     [event handler function]
	     * @return {SailsSocket}
	     */
	    SailsSocket.prototype.off = function (evName, fn){
	
	      // Bind the event to the raw underlying socket if possible.
	      if (this._raw) {
	        this._raw.off(evName, fn);
	        return this;
	      }
	
	      // Otherwise queue the event binding.
	      if (this.eventQueue[evName] && this.eventQueue[evName].indexOf(fn) > -1) {
	        this.eventQueue[evName].splice(this.eventQueue[evName].indexOf(fn), 1);
	      }
	
	      return this;
	    };
	
	
	    /**
	     * Chainable method to unbind all events from the socket.
	     *
	     * @return {SailsSocket}
	     */
	    SailsSocket.prototype.removeAllListeners = function (){
	
	      // Bind the event to the raw underlying socket if possible.
	      if (this._raw) {
	        this._raw.removeAllListeners();
	        return this;
	      }
	
	      // Otherwise queue the event binding.
	      this.eventQueue = {};
	
	      return this;
	    };
	
	    /**
	     * Simulate a GET request to sails
	     * e.g.
	     *    `socket.get('/user/3', Stats.populate)`
	     *
	     * @api public
	     * @param {String} url    ::    destination URL
	     * @param {Object} data   ::    parameters to send with the request [optional]
	     * @param {Function} cb   ::    callback function to call when finished [optional]
	     */
	
	    SailsSocket.prototype.get = function(url, data, cb) {
	
	      // `data` is optional
	      if (typeof data === 'function') {
	        cb = data;
	        data = {};
	      }
	
	      return this.request({
	        method: 'get',
	        params: data,
	        url: url
	      }, cb);
	    };
	
	
	
	    /**
	     * Simulate a POST request to sails
	     * e.g.
	     *    `socket.post('/event', newMeeting, $spinner.hide)`
	     *
	     * @api public
	     * @param {String} url    ::    destination URL
	     * @param {Object} data   ::    parameters to send with the request [optional]
	     * @param {Function} cb   ::    callback function to call when finished [optional]
	     */
	
	    SailsSocket.prototype.post = function(url, data, cb) {
	
	      // `data` is optional
	      if (typeof data === 'function') {
	        cb = data;
	        data = {};
	      }
	
	      return this.request({
	        method: 'post',
	        data: data,
	        url: url
	      }, cb);
	    };
	
	
	
	    /**
	     * Simulate a PUT request to sails
	     * e.g.
	     *    `socket.post('/event/3', changedFields, $spinner.hide)`
	     *
	     * @api public
	     * @param {String} url    ::    destination URL
	     * @param {Object} data   ::    parameters to send with the request [optional]
	     * @param {Function} cb   ::    callback function to call when finished [optional]
	     */
	
	    SailsSocket.prototype.put = function(url, data, cb) {
	
	      // `data` is optional
	      if (typeof data === 'function') {
	        cb = data;
	        data = {};
	      }
	
	      return this.request({
	        method: 'put',
	        params: data,
	        url: url
	      }, cb);
	    };
	
	
	
	    /**
	     * Simulate a DELETE request to sails
	     * e.g.
	     *    `socket.delete('/event', $spinner.hide)`
	     *
	     * @api public
	     * @param {String} url    ::    destination URL
	     * @param {Object} data   ::    parameters to send with the request [optional]
	     * @param {Function} cb   ::    callback function to call when finished [optional]
	     */
	
	    SailsSocket.prototype['delete'] = function(url, data, cb) {
	
	      // `data` is optional
	      if (typeof data === 'function') {
	        cb = data;
	        data = {};
	      }
	
	      return this.request({
	        method: 'delete',
	        params: data,
	        url: url
	      }, cb);
	    };
	
	
	
	    /**
	     * Simulate an HTTP request to sails
	     * e.g.
	     * ```
	     * socket.request({
	     *   url:'/user',
	     *   params: {},
	     *   method: 'POST',
	     *   headers: {}
	     * }, function (responseBody, JWR) {
	     *   // ...
	     * });
	     * ```
	     *
	     * @api public
	     * @option {String} url    ::    destination URL
	     * @option {Object} params ::    parameters to send with the request [optional]
	     * @option {Object} headers::    headers to send with the request [optional]
	     * @option {Function} cb   ::    callback function to call when finished [optional]
	     * @option {String} method ::    HTTP request method [optional]
	     */
	
	    SailsSocket.prototype.request = function(options, cb) {
	
	      var usage =
	      'Usage:\n'+
	      'socket.request( options, [fnToCallWhenComplete] )\n\n'+
	      'options.url :: e.g. "/foo/bar"'+'\n'+
	      'options.method :: e.g. "get", "post", "put", or "delete", etc.'+'\n'+
	      'options.params :: e.g. { emailAddress: "mike@sailsjs.org" }'+'\n'+
	      'options.headers :: e.g. { "x-my-custom-header": "some string" }';
	      // Old usage:
	      // var usage = 'Usage:\n socket.'+(options.method||'request')+'('+
	      //   ' destinationURL, [dataToSend], [fnToCallWhenComplete] )';
	
	
	      // Validate options and callback
	      if (typeof options !== 'object' || typeof options.url !== 'string') {
	        throw new Error('Invalid or missing URL!\n' + usage);
	      }
	      if (options.method && typeof options.method !== 'string') {
	        throw new Error('Invalid `method` provided (should be a string like "post" or "put")\n' + usage);
	      }
	      if (options.headers && typeof options.headers !== 'object') {
	        throw new Error('Invalid `headers` provided (should be a dictionary with string values)\n' + usage);
	      }
	      if (options.params && typeof options.params !== 'object') {
	        throw new Error('Invalid `params` provided (should be a dictionary with JSON-serializable values)\n' + usage);
	      }
	      if (options.data && typeof options.data !== 'object') {
	        throw new Error('Invalid `data` provided (should be a dictionary with JSON-serializable values)\n' + usage);
	      }
	      if (cb && typeof cb !== 'function') {
	        throw new Error('Invalid callback function!\n' + usage);
	      }
	
	      // Accept either `params` or `data` for backwards compatibility (but not both!)
	      if (options.data && options.params) {
	        throw new Error('Cannot specify both `params` and `data`!  They are aliases of each other.\n' + usage);
	      }
	      else if (options.data) {
	        options.params = options.data;
	        delete options.data;
	      }
	
	
	      // If this socket is not connected yet, queue up this request
	      // instead of sending it.
	      // (so it can be replayed when the socket comes online.)
	      if ( ! this.isConnected() ) {
	
	        // If no queue array exists for this socket yet, create it.
	        this.requestQueue = this.requestQueue || [];
	        this.requestQueue.push([options, cb]);
	        return;
	      }
	
	      // Otherwise, our socket is connected, so continue prepping
	      // the request.
	
	      // Default headers to an empty object
	      options.headers = options.headers || {};
	
	      // Build a simulated request object
	      // (and sanitize/marshal options along the way)
	      var requestCtx = {
	
	        method: options.method.toLowerCase() || 'get',
	
	        headers: options.headers,
	
	        data: options.params || options.data || {},
	
	        // Remove trailing slashes and spaces to make packets smaller.
	        url: options.url.replace(/^(.+)\/*\s*$/, '$1'),
	
	        cb: cb
	      };
	
	      // Merge global headers in
	      if (this.headers && 'object' == typeof this.headers) {
	        for (var header in this.headers) {
	          if (!options.headers.hasOwnProperty(header)) {
	            options.headers[header] = this.headers[header];
	          }
	        }
	      }
	
	      // Send the request.
	      _emitFrom(this, requestCtx);
	    };
	
	
	
	    /**
	     * Socket.prototype._request
	     *
	     * Simulate HTTP over Socket.io.
	     *
	     * @api private
	     * @param  {[type]}   options [description]
	     * @param  {Function} cb      [description]
	     */
	    SailsSocket.prototype._request = function(options, cb) {
	      throw new Error('`_request()` was a private API deprecated as of v0.11 of the sails.io.js client. Use `.request()` instead.');
	    };
	
	
	
	
	
	
	
	    //  ██╗ ██████╗    ███████╗ █████╗ ██╗██╗     ███████╗
	    //  ██║██╔═══██╗   ██╔════╝██╔══██╗██║██║     ██╔════╝
	    //  ██║██║   ██║   ███████╗███████║██║██║     ███████╗
	    //  ██║██║   ██║   ╚════██║██╔══██║██║██║     ╚════██║
	    //  ██║╚██████╔╝██╗███████║██║  ██║██║███████╗███████║
	    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝
	    //
	    // Set an `io.sails` object that may be used for configuration before the
	    // first socket connects (i.e. to allow auto-connect behavior to be
	    // prevented by setting `io.sails.autoConnect` in an inline script
	    // directly after the script tag which loaded this file).
	
	
	    //  ┌─┐┌─┐┌┬┐  ┬ ┬┌─┐  ╔╦╗╔═╗╔═╗╔═╗╦ ╦╦ ╔╦╗╔═╗  ┌─┐┌─┐┬─┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐
	    //  └─┐├┤  │   │ │├─┘   ║║║╣ ╠╣ ╠═╣║ ║║  ║ ╚═╗  ├┤ │ │├┬┘  ││ │ └─┐├─┤││  └─┐
	    //  └─┘└─┘ ┴   └─┘┴    ═╩╝╚═╝╚  ╩ ╩╚═╝╩═╝╩ ╚═╝  └  └─┘┴└─  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘
	    io.sails = {
	
	      // Whether to automatically connect a socket and save it as `io.socket`.
	      autoConnect: true,
	
	      // The route (path) to hit to get a x-origin (CORS) cookie
	      // (or true to use the default: '/__getcookie')
	      useCORSRouteToGetCookie: true,
	
	      // The environment we're running in.
	      // (logs are not displayed when this is set to 'production')
	      //
	      // Defaults to development unless this script was fetched from a URL
	      // that ends in `*.min.js` or '#production' (may also be manually overridden.)
	      //
	      environment: urlThisScriptWasFetchedFrom.match(/(\#production|\.min\.js)/g) ? 'production' : 'development',
	
	      // The version of this sails.io.js client SDK
	      sdk: SDK_INFO,
	
	      // Transports to use when communicating with the server, in the order they will be tried
	      transports: ['polling', 'websocket']
	    };
	
	
	
	    //  ┌─┐─┐ ┬┌┬┐┌─┐┌┐┌┌┬┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐  ┌┬┐┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐┌─┐
	    //  ├┤ ┌┴┬┘ │ ├┤ │││ ││  ││ │ └─┐├─┤││  └─┐   ││├┤ ├┤ ├─┤│ ││  │ └─┐
	    //  └─┘┴ └─ ┴ └─┘┘└┘─┴┘  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘  ─┴┘└─┘└  ┴ ┴└─┘┴─┘┴ └─┘
	    //  ┬ ┬┬┌┬┐┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦╔╦╗╔╦╗╦    ╔═╗╔╦╗╔╦╗╦═╗╦╔╗ ╦ ╦╔╦╗╔═╗╔═╗
	    //  ││││ │ ├─┤   │ ├─┤├┤   ╠═╣ ║ ║║║║    ╠═╣ ║  ║ ╠╦╝║╠╩╗║ ║ ║ ║╣ ╚═╗
	    //  └┴┘┴ ┴ ┴ ┴   ┴ ┴ ┴└─┘  ╩ ╩ ╩ ╩ ╩╩═╝  ╩ ╩ ╩  ╩ ╩╚═╩╚═╝╚═╝ ╩ ╚═╝╚═╝
	    //  ┌─┐┬─┐┌─┐┌┬┐  ┌┬┐┬ ┬┌─┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┌┬┐┌─┐┌─┐
	    //  ├┤ ├┬┘│ ││││   │ ├─┤├┤   └─┐│  ├┬┘│├─┘ │    │ ├─┤│ ┬
	    //  └  ┴└─└─┘┴ ┴   ┴ ┴ ┴└─┘  └─┘└─┘┴└─┴┴   ┴    ┴ ┴ ┴└─┘
	    //
	    // Now fold in config provided as HTML attributes on the script tag:
	    // (note that if `io.sails.*` is changed after this script, those changes
	    //  will still take precedence)
	    CONFIGURABLE_VIA_HTML_ATTR.forEach(function (configKey){
	      if (typeof scriptTagConfig[configKey] !== 'undefined') {
	        io.sails[configKey] = scriptTagConfig[configKey];
	      }
	    });
	    //////////////////////////////////////////////////////////////////////////////
	    // Note that the new HTML attribute configuration style may eventually
	    // completely replace the original approach of setting `io.sails` properties,
	    // since the new strategy is easier to reason about.  Also, it would allow us
	    // to remove the timeout below someday.
	    //////////////////////////////////////////////////////////////////////////////
	
	
	
	
	    //  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐ ╔═╗╔═╗╔╗╔╔╗╔╔═╗╔═╗╔╦╗  /  \
	    //  ││ │ └─┐├─┤││  └─┐ ║  ║ ║║║║║║║║╣ ║   ║  /   /
	    //  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘o╚═╝╚═╝╝╚╝╝╚╝╚═╝╚═╝ ╩  \  /
	
	    /**
	     * Add `io.sails.connect` function as a wrapper for the built-in `io()` aka `io.connect()`
	     * method, returning a SailsSocket. This special function respects the configured io.sails
	     * connection URL, as well as sending other identifying information (most importantly, the
	     * current version of this SDK).
	     *
	     * @param  {String} url  [optional]
	     * @param  {Object} opts [optional]
	     * @return {Socket}
	     */
	    io.sails.connect = function(url, opts) {
	
	      // Make URL optional
	      if ('object' === typeof url) {
	        opts = url;
	        url = null;
	      }
	
	      // Default opts to empty object
	      opts = opts || {};
	
	      // If explicit connection url is specified, save it to options
	      opts.url = url || opts.url || undefined;
	
	      // Instantiate and return a new SailsSocket- and try to connect immediately.
	      var socket = new SailsSocket(opts);
	      socket._connect();
	      return socket;
	    };
	
	
	
	
	
	
	    //  ██╗ ██████╗    ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗
	    //  ██║██╔═══██╗   ██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝
	    //  ██║██║   ██║   ███████╗██║   ██║██║     █████╔╝ █████╗     ██║
	    //  ██║██║   ██║   ╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║
	    //  ██║╚██████╔╝██╗███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║
	    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝
	    //
	    // io.socket
	    //
	    // The eager instance of Socket which will automatically try to connect
	    // using the host that this js file was served from.
	    //
	    // This can be disabled or configured by setting properties on `io.sails.*` within the
	    // first cycle of the event loop.
	    //
	
	
	    // Build `io.socket` so it exists
	    // (note that this DOES NOT start the connection process)
	    io.socket = new SailsSocket();
	    //
	    // This socket is not connected yet, and has not even _started_ connecting.
	    //
	    // But in the mean time, this eager socket will be queue events bound by the user
	    // before the first cycle of the event loop (using `.on()`), which will later
	    // be rebound on the raw underlying socket.
	
	
	    //  ┌─┐┌─┐┌┬┐  ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┌─┐┌┐┌┌┐┌┌─┐┌─┐┌┬┐  ┌┬┐┬┌┬┐┌─┐┬─┐
	    //  └─┐├┤  │   ├─┤│ │ │ │ │───│  │ │││││││├┤ │   │    │ ││││├┤ ├┬┘
	    //  └─┘└─┘ ┴   ┴ ┴└─┘ ┴ └─┘   └─┘└─┘┘└┘┘└┘└─┘└─┘ ┴    ┴ ┴┴ ┴└─┘┴└─
	    // If configured to do so, start auto-connecting after the first cycle of the event loop
	    // has completed (to allow time for this behavior to be configured/disabled
	    // by specifying properties on `io.sails`)
	    setTimeout(function() {
	
	      // If autoConnect is disabled, delete the eager socket (io.socket) and bail out.
	      if (io.sails.autoConnect === false || io.sails.autoconnect === false) {
	        delete io.socket;
	        return;
	      }
	
	      // consolog('Eagerly auto-connecting socket to Sails... (requests will be queued in the mean-time)');
	      io.socket._connect();
	
	
	    }, 0); // </setTimeout>
	
	
	    // Return the `io` object.
	    return io;
	  } //</SailsIOClient>
	
	  //
	  /////////////////////////////////////////////////////////////////////////////////
	  ///// </bunches of private function definitions, constructors, and methods>
	  /////////////////////////////////////////////////////////////////////////////////
	
	
	
	
	  //  ███████╗██╗  ██╗██████╗  ██████╗ ███████╗███████╗    ███████╗██████╗ ██╗  ██╗
	  //  ██╔════╝╚██╗██╔╝██╔══██╗██╔═══██╗██╔════╝██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝
	  //  █████╗   ╚███╔╝ ██████╔╝██║   ██║███████╗█████╗      ███████╗██║  ██║█████╔╝
	  //  ██╔══╝   ██╔██╗ ██╔═══╝ ██║   ██║╚════██║██╔══╝      ╚════██║██║  ██║██╔═██╗
	  //  ███████╗██╔╝ ██╗██║     ╚██████╔╝███████║███████╗    ███████║██████╔╝██║  ██╗
	  //  ╚══════╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝    ╚══════╝╚═════╝ ╚═╝  ╚═╝
	  //
	
	
	  // Add CommonJS support to allow this client SDK to be used from Node.js.
	  if (SDK_INFO.platform === 'node') {
	    module.exports = SailsIOClient;
	  }
	  // Add AMD support, registering this client SDK as an anonymous module.
	  else if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return SailsIOClient;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  else {
	    // Otherwise, try to instantiate the client using the global `io`:
	    SailsIOClient();
	
	    // Note:
	    // If you are modifying this file manually to wrap an existing socket.io client
	    // (e.g. to prevent pollution of the global namespace), you can replace the global
	    // `io` with your own `io` instance above.
	  }
	
	})();


/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <!-- Responsive sidebar menu -->\n  <div class=\"ui sidebar inverted vertical menu\">\n    <a class=\"item\" click.delegate=\"logout()\">\n      <h4 class=\"ui grey header\">${user.username}</h4>\n      <p>Sign Out</p>\n    </a>\n    <a repeat.for=\"row of router.navigation\" href.bind=\"row.href\"\n       class=\"item ${row.isActive ? 'active' : ''}\">\n      <i class=\"ui icon ${row.settings.icon}\"></i>${row.title}\n    </a>\n  </div>\n\n  <div class=\"pusher\">\n    <div class=\"ui active inverted dimmer\" if.bind=\"router.isNavigating\">\n      <div class=\"ui large text loader\">Loading</div>\n    </div>\n    <p></p>\n    <p></p>\n    <p></p>\n    <div class=\"ui container\">\n      <div class=\"ui left fixed vertical inverted menu\">\n        <a class=\"item\" click.delegate=\"logout()\">\n          <h4 class=\"ui grey header\">${user.username}</h4>\n          <p>Sign Out</p>\n        </a>\n        <a repeat.for=\"row of router.navigation\" href.bind=\"row.href\"\n           class=\"ui item ${row.isActive ? 'active' : ''}\">\n          <i class=\"ui icon ${row.settings.icon}\"></i>${row.title}\n        </a>\n      </div>\n      <div class=\"ui main grid\" id=\"mainView\">\n        <!-- Responsive top menu -->\n        <div class=\"ui fixed inverted main menu\">\n          <div class=\"ui container\">\n            <a class=\"launch icon item sidebar-toggle\">\n              <i class=\"sidebar icon\"></i>\n            </a>\n          </div>\n        </div>\n        <router-view class=\"sixteen wide column\"></router-view>\n      </div>\n    </div>\n  </div>\n</template>\n";

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CssAnimator = undefined;
	exports.configure = configure;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CssAnimator = exports.CssAnimator = function () {
	  function CssAnimator() {
	    _classCallCheck(this, CssAnimator);
	
	    this.useAnimationDoneClasses = false;
	    this.animationEnteredClass = 'au-entered';
	    this.animationLeftClass = 'au-left';
	    this.isAnimating = false;
	
	    this.verifyKeyframesExist = true;
	  }
	
	  CssAnimator.prototype._addMultipleEventListener = function _addMultipleEventListener(el, s, fn) {
	    var evts = s.split(' ');
	    for (var i = 0, ii = evts.length; i < ii; ++i) {
	      el.addEventListener(evts[i], fn, false);
	    }
	  };
	
	  CssAnimator.prototype._getElementAnimationDelay = function _getElementAnimationDelay(element) {
	    var styl = _aureliaPal.DOM.getComputedStyle(element);
	    var prop = void 0;
	    var delay = void 0;
	
	    if (styl.getPropertyValue('animation-delay')) {
	      prop = 'animation-delay';
	    } else if (styl.getPropertyValue('-webkit-animation-delay')) {
	      prop = '-webkit-animation-delay';
	    } else if (styl.getPropertyValue('-moz-animation-delay')) {
	      prop = '-moz-animation-delay';
	    } else {
	      return 0;
	    }
	
	    delay = styl.getPropertyValue(prop);
	    delay = Number(delay.replace(/[^\d\.]/g, ''));
	
	    return delay * 1000;
	  };
	
	  CssAnimator.prototype._getElementAnimationNames = function _getElementAnimationNames(element) {
	    var styl = _aureliaPal.DOM.getComputedStyle(element);
	    var prefix = void 0;
	
	    if (styl.getPropertyValue('animation-name')) {
	      prefix = '';
	    } else if (styl.getPropertyValue('-webkit-animation-name')) {
	      prefix = '-webkit-';
	    } else if (styl.getPropertyValue('-moz-animation-name')) {
	      prefix = '-moz-';
	    } else {
	      return [];
	    }
	
	    var animationNames = styl.getPropertyValue(prefix + 'animation-name');
	    return animationNames ? animationNames.split(' ') : [];
	  };
	
	  CssAnimator.prototype._performSingleAnimate = function _performSingleAnimate(element, className) {
	    var _this = this;
	
	    this._triggerDOMEvent(_aureliaTemplating.animationEvent.animateBegin, element);
	
	    return this.addClass(element, className, true).then(function (result) {
	      _this._triggerDOMEvent(_aureliaTemplating.animationEvent.animateActive, element);
	
	      if (result !== false) {
	        return _this.removeClass(element, className, true).then(function () {
	          _this._triggerDOMEvent(_aureliaTemplating.animationEvent.animateDone, element);
	        });
	      }
	
	      return false;
	    }).catch(function () {
	      _this._triggerDOMEvent(_aureliaTemplating.animationEvent.animateTimeout, element);
	    });
	  };
	
	  CssAnimator.prototype._triggerDOMEvent = function _triggerDOMEvent(eventType, element) {
	    var evt = _aureliaPal.DOM.createCustomEvent(eventType, { bubbles: true, cancelable: true, detail: element });
	    _aureliaPal.DOM.dispatchEvent(evt);
	  };
	
	  CssAnimator.prototype._animationChangeWithValidKeyframe = function _animationChangeWithValidKeyframe(animationNames, prevAnimationNames) {
	    var newAnimationNames = animationNames.filter(function (name) {
	      return prevAnimationNames.indexOf(name) === -1;
	    });
	
	    if (newAnimationNames.length === 0) {
	      return false;
	    }
	
	    if (!this.verifyKeyframesExist) {
	      return true;
	    }
	
	    var keyframesRuleType = window.CSSRule.KEYFRAMES_RULE || window.CSSRule.MOZ_KEYFRAMES_RULE || window.CSSRule.WEBKIT_KEYFRAMES_RULE;
	
	    var styleSheets = document.styleSheets;
	
	    try {
	      for (var i = 0; i < styleSheets.length; ++i) {
	        var cssRules = styleSheets[i].cssRules;
	
	        if (!cssRules) {
	          continue;
	        }
	
	        for (var j = 0; j < cssRules.length; ++j) {
	          var cssRule = cssRules[j];
	
	          if (cssRule.type === keyframesRuleType) {
	            if (newAnimationNames.indexOf(cssRule.name) !== -1) {
	              return true;
	            }
	          }
	        }
	      }
	    } catch (e) {}
	
	    return false;
	  };
	
	  CssAnimator.prototype.animate = function animate(element, className) {
	    var _this2 = this;
	
	    if (Array.isArray(element)) {
	      return Promise.all(element.map(function (el) {
	        return _this2._performSingleAnimate(el, className);
	      }));
	    }
	
	    return this._performSingleAnimate(element, className);
	  };
	
	  CssAnimator.prototype.runSequence = function runSequence(animations) {
	    var _this3 = this;
	
	    this._triggerDOMEvent(_aureliaTemplating.animationEvent.sequenceBegin, null);
	
	    return animations.reduce(function (p, anim) {
	      return p.then(function () {
	        return _this3.animate(anim.element, anim.className);
	      });
	    }, Promise.resolve(true)).then(function () {
	      _this3._triggerDOMEvent(_aureliaTemplating.animationEvent.sequenceDone, null);
	    });
	  };
	
	  CssAnimator.prototype.enter = function enter(element) {
	    var _this4 = this;
	
	    return new Promise(function (resolve, reject) {
	      var classList = element.classList;
	
	      _this4._triggerDOMEvent(_aureliaTemplating.animationEvent.enterBegin, element);
	
	      if (_this4.useAnimationDoneClasses) {
	        classList.remove(_this4.animationEnteredClass);
	        classList.remove(_this4.animationLeftClass);
	      }
	
	      classList.add('au-enter');
	      var prevAnimationNames = _this4._getElementAnimationNames(element);
	
	      var _animStart = void 0;
	      var animHasStarted = false;
	      _this4._addMultipleEventListener(element, 'webkitAnimationStart animationstart', _animStart = function animStart(evAnimStart) {
	        animHasStarted = true;
	        _this4.isAnimating = true;
	
	        _this4._triggerDOMEvent(_aureliaTemplating.animationEvent.enterActive, element);
	
	        evAnimStart.stopPropagation();
	
	        evAnimStart.target.removeEventListener(evAnimStart.type, _animStart);
	      }, false);
	
	      var _animEnd = void 0;
	      _this4._addMultipleEventListener(element, 'webkitAnimationEnd animationend', _animEnd = function animEnd(evAnimEnd) {
	        if (!animHasStarted) {
	          return;
	        }
	
	        evAnimEnd.stopPropagation();
	
	        classList.remove('au-enter-active');
	        classList.remove('au-enter');
	
	        evAnimEnd.target.removeEventListener(evAnimEnd.type, _animEnd);
	
	        if (_this4.useAnimationDoneClasses && _this4.animationEnteredClass !== undefined && _this4.animationEnteredClass !== null) {
	          classList.add(_this4.animationEnteredClass);
	        }
	
	        _this4.isAnimating = false;
	        _this4._triggerDOMEvent(_aureliaTemplating.animationEvent.enterDone, element);
	
	        resolve(true);
	      }, false);
	
	      var parent = element.parentElement;
	      var delay = 0;
	
	      var cleanupAnimation = function cleanupAnimation() {
	        var animationNames = _this4._getElementAnimationNames(element);
	        if (!_this4._animationChangeWithValidKeyframe(animationNames, prevAnimationNames)) {
	          classList.remove('au-enter-active');
	          classList.remove('au-enter');
	          _this4._triggerDOMEvent(_aureliaTemplating.animationEvent.enterTimeout, element);
	          resolve(false);
	        }
	      };
	
	      if (parent !== null && parent !== undefined && (parent.classList.contains('au-stagger') || parent.classList.contains('au-stagger-enter'))) {
	        var elemPos = Array.prototype.indexOf.call(parent.children, element);
	        delay = _this4._getElementAnimationDelay(parent) * elemPos;
	
	        _this4._triggerDOMEvent(_aureliaTemplating.animationEvent.staggerNext, element);
	
	        setTimeout(function () {
	          classList.add('au-enter-active');
	          cleanupAnimation();
	        }, delay);
	      } else {
	        classList.add('au-enter-active');
	        cleanupAnimation();
	      }
	    });
	  };
	
	  CssAnimator.prototype.leave = function leave(element) {
	    var _this5 = this;
	
	    return new Promise(function (resolve, reject) {
	      var classList = element.classList;
	
	      _this5._triggerDOMEvent(_aureliaTemplating.animationEvent.leaveBegin, element);
	
	      if (_this5.useAnimationDoneClasses) {
	        classList.remove(_this5.animationEnteredClass);
	        classList.remove(_this5.animationLeftClass);
	      }
	
	      classList.add('au-leave');
	      var prevAnimationNames = _this5._getElementAnimationNames(element);
	
	      var _animStart2 = void 0;
	      var animHasStarted = false;
	      _this5._addMultipleEventListener(element, 'webkitAnimationStart animationstart', _animStart2 = function animStart(evAnimStart) {
	        animHasStarted = true;
	        _this5.isAnimating = true;
	
	        _this5._triggerDOMEvent(_aureliaTemplating.animationEvent.leaveActive, element);
	
	        evAnimStart.stopPropagation();
	
	        evAnimStart.target.removeEventListener(evAnimStart.type, _animStart2);
	      }, false);
	
	      var _animEnd2 = void 0;
	      _this5._addMultipleEventListener(element, 'webkitAnimationEnd animationend', _animEnd2 = function animEnd(evAnimEnd) {
	        if (!animHasStarted) {
	          return;
	        }
	
	        evAnimEnd.stopPropagation();
	
	        classList.remove('au-leave-active');
	        classList.remove('au-leave');
	
	        evAnimEnd.target.removeEventListener(evAnimEnd.type, _animEnd2);
	
	        if (_this5.useAnimationDoneClasses && _this5.animationLeftClass !== undefined && _this5.animationLeftClass !== null) {
	          classList.add(_this5.animationLeftClass);
	        }
	
	        _this5.isAnimating = false;
	        _this5._triggerDOMEvent(_aureliaTemplating.animationEvent.leaveDone, element);
	
	        resolve(true);
	      }, false);
	
	      var parent = element.parentElement;
	      var delay = 0;
	
	      var cleanupAnimation = function cleanupAnimation() {
	        var animationNames = _this5._getElementAnimationNames(element);
	        if (!_this5._animationChangeWithValidKeyframe(animationNames, prevAnimationNames)) {
	          classList.remove('au-leave-active');
	          classList.remove('au-leave');
	          _this5._triggerDOMEvent(_aureliaTemplating.animationEvent.leaveTimeout, element);
	          resolve(false);
	        }
	      };
	
	      if (parent !== null && parent !== undefined && (parent.classList.contains('au-stagger') || parent.classList.contains('au-stagger-leave'))) {
	        var elemPos = Array.prototype.indexOf.call(parent.children, element);
	        delay = _this5._getElementAnimationDelay(parent) * elemPos;
	
	        _this5._triggerDOMEvent(_aureliaTemplating.animationEvent.staggerNext, element);
	
	        setTimeout(function () {
	          classList.add('au-leave-active');
	          cleanupAnimation();
	        }, delay);
	      } else {
	        classList.add('au-leave-active');
	        cleanupAnimation();
	      }
	    });
	  };
	
	  CssAnimator.prototype.removeClass = function removeClass(element, className) {
	    var _this6 = this;
	
	    var suppressEvents = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    return new Promise(function (resolve, reject) {
	      var classList = element.classList;
	
	      if (!classList.contains(className) && !classList.contains(className + '-add')) {
	        resolve(false);
	        return;
	      }
	
	      if (suppressEvents !== true) {
	        _this6._triggerDOMEvent(_aureliaTemplating.animationEvent.removeClassBegin, element);
	      }
	
	      classList.remove(className);
	      var prevAnimationNames = _this6._getElementAnimationNames(element);
	
	      var _animStart3 = void 0;
	      var animHasStarted = false;
	      _this6._addMultipleEventListener(element, 'webkitAnimationStart animationstart', _animStart3 = function animStart(evAnimStart) {
	        animHasStarted = true;
	        _this6.isAnimating = true;
	
	        if (suppressEvents !== true) {
	          _this6._triggerDOMEvent(_aureliaTemplating.animationEvent.removeClassActive, element);
	        }
	
	        evAnimStart.stopPropagation();
	
	        evAnimStart.target.removeEventListener(evAnimStart.type, _animStart3);
	      }, false);
	
	      var _animEnd3 = void 0;
	      _this6._addMultipleEventListener(element, 'webkitAnimationEnd animationend', _animEnd3 = function animEnd(evAnimEnd) {
	        if (!animHasStarted) {
	          return;
	        }
	
	        evAnimEnd.stopPropagation();
	
	        classList.remove(className + '-remove');
	
	        evAnimEnd.target.removeEventListener(evAnimEnd.type, _animEnd3);
	
	        _this6.isAnimating = false;
	
	        if (suppressEvents !== true) {
	          _this6._triggerDOMEvent(_aureliaTemplating.animationEvent.removeClassDone, element);
	        }
	
	        resolve(true);
	      }, false);
	
	      classList.add(className + '-remove');
	
	      var animationNames = _this6._getElementAnimationNames(element);
	      if (!_this6._animationChangeWithValidKeyframe(animationNames, prevAnimationNames)) {
	        classList.remove(className + '-remove');
	        classList.remove(className);
	
	        if (suppressEvents !== true) {
	          _this6._triggerDOMEvent(_aureliaTemplating.animationEvent.removeClassTimeout, element);
	        }
	
	        resolve(false);
	      }
	    });
	  };
	
	  CssAnimator.prototype.addClass = function addClass(element, className) {
	    var _this7 = this;
	
	    var suppressEvents = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    return new Promise(function (resolve, reject) {
	      var classList = element.classList;
	
	      if (suppressEvents !== true) {
	        _this7._triggerDOMEvent(_aureliaTemplating.animationEvent.addClassBegin, element);
	      }
	
	      var _animStart4 = void 0;
	      var animHasStarted = false;
	      _this7._addMultipleEventListener(element, 'webkitAnimationStart animationstart', _animStart4 = function animStart(evAnimStart) {
	        animHasStarted = true;
	        _this7.isAnimating = true;
	
	        if (suppressEvents !== true) {
	          _this7._triggerDOMEvent(_aureliaTemplating.animationEvent.addClassActive, element);
	        }
	
	        evAnimStart.stopPropagation();
	
	        evAnimStart.target.removeEventListener(evAnimStart.type, _animStart4);
	      }, false);
	
	      var _animEnd4 = void 0;
	      _this7._addMultipleEventListener(element, 'webkitAnimationEnd animationend', _animEnd4 = function animEnd(evAnimEnd) {
	        if (!animHasStarted) {
	          return;
	        }
	
	        evAnimEnd.stopPropagation();
	
	        classList.add(className);
	
	        classList.remove(className + '-add');
	
	        evAnimEnd.target.removeEventListener(evAnimEnd.type, _animEnd4);
	
	        _this7.isAnimating = false;
	
	        if (suppressEvents !== true) {
	          _this7._triggerDOMEvent(_aureliaTemplating.animationEvent.addClassDone, element);
	        }
	
	        resolve(true);
	      }, false);
	
	      var prevAnimationNames = _this7._getElementAnimationNames(element);
	
	      classList.add(className + '-add');
	
	      var animationNames = _this7._getElementAnimationNames(element);
	      if (!_this7._animationChangeWithValidKeyframe(animationNames, prevAnimationNames)) {
	        classList.remove(className + '-add');
	        classList.add(className);
	
	        if (suppressEvents !== true) {
	          _this7._triggerDOMEvent(_aureliaTemplating.animationEvent.addClassTimeout, element);
	        }
	
	        resolve(false);
	      }
	    });
	  };
	
	  return CssAnimator;
	}();
	
	function configure(config, callback) {
	  var animator = config.container.get(CssAnimator);
	  config.container.get(_aureliaTemplating.TemplatingEngine).configureAnimator(animator);
	  if (typeof callback === 'function') {
	    callback(animator);
	  }
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BrowserHistory = exports.DefaultLinkHandler = exports.LinkHandler = undefined;
	
	var _class, _temp;
	
	exports.configure = configure;
	
	var _aureliaPal = __webpack_require__(4);
	
	var _aureliaHistory = __webpack_require__(31);
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LinkHandler = exports.LinkHandler = function () {
	  function LinkHandler() {
	    _classCallCheck(this, LinkHandler);
	  }
	
	  LinkHandler.prototype.activate = function activate(history) {};
	
	  LinkHandler.prototype.deactivate = function deactivate() {};
	
	  return LinkHandler;
	}();
	
	var DefaultLinkHandler = exports.DefaultLinkHandler = function (_LinkHandler) {
	  _inherits(DefaultLinkHandler, _LinkHandler);
	
	  function DefaultLinkHandler() {
	    _classCallCheck(this, DefaultLinkHandler);
	
	    var _this = _possibleConstructorReturn(this, _LinkHandler.call(this));
	
	    _this.handler = function (e) {
	      var _DefaultLinkHandler$g = DefaultLinkHandler.getEventInfo(e);
	
	      var shouldHandleEvent = _DefaultLinkHandler$g.shouldHandleEvent;
	      var href = _DefaultLinkHandler$g.href;
	
	
	      if (shouldHandleEvent) {
	        e.preventDefault();
	        _this.history.navigate(href);
	      }
	    };
	    return _this;
	  }
	
	  DefaultLinkHandler.prototype.activate = function activate(history) {
	    if (history._hasPushState) {
	      this.history = history;
	      _aureliaPal.DOM.addEventListener('click', this.handler, true);
	    }
	  };
	
	  DefaultLinkHandler.prototype.deactivate = function deactivate() {
	    _aureliaPal.DOM.removeEventListener('click', this.handler);
	  };
	
	  DefaultLinkHandler.getEventInfo = function getEventInfo(event) {
	    var info = {
	      shouldHandleEvent: false,
	      href: null,
	      anchor: null
	    };
	
	    var target = DefaultLinkHandler.findClosestAnchor(event.target);
	    if (!target || !DefaultLinkHandler.targetIsThisWindow(target)) {
	      return info;
	    }
	
	    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
	      return info;
	    }
	
	    var href = target.getAttribute('href');
	    info.anchor = target;
	    info.href = href;
	
	    var leftButtonClicked = event.which === 1;
	    var isRelative = href && !(href.charAt(0) === '#' || /^[a-z]+:/i.test(href));
	
	    info.shouldHandleEvent = leftButtonClicked && isRelative;
	    return info;
	  };
	
	  DefaultLinkHandler.findClosestAnchor = function findClosestAnchor(el) {
	    while (el) {
	      if (el.tagName === 'A') {
	        return el;
	      }
	
	      el = el.parentNode;
	    }
	  };
	
	  DefaultLinkHandler.targetIsThisWindow = function targetIsThisWindow(target) {
	    var targetWindow = target.getAttribute('target');
	    var win = _aureliaPal.PLATFORM.global;
	
	    return !targetWindow || targetWindow === win.name || targetWindow === '_self' || targetWindow === 'top' && win === win.top;
	  };
	
	  return DefaultLinkHandler;
	}(LinkHandler);
	
	function configure(config) {
	  config.singleton(_aureliaHistory.History, BrowserHistory);
	  config.transient(LinkHandler, DefaultLinkHandler);
	}
	
	var BrowserHistory = exports.BrowserHistory = (_temp = _class = function (_History) {
	  _inherits(BrowserHistory, _History);
	
	  function BrowserHistory(linkHandler) {
	    _classCallCheck(this, BrowserHistory);
	
	    var _this2 = _possibleConstructorReturn(this, _History.call(this));
	
	    _this2._isActive = false;
	    _this2._checkUrlCallback = _this2._checkUrl.bind(_this2);
	
	    _this2.location = _aureliaPal.PLATFORM.location;
	    _this2.history = _aureliaPal.PLATFORM.history;
	    _this2.linkHandler = linkHandler;
	    return _this2;
	  }
	
	  BrowserHistory.prototype.activate = function activate(options) {
	    if (this._isActive) {
	      throw new Error('History has already been activated.');
	    }
	
	    var wantsPushState = !!options.pushState;
	
	    this._isActive = true;
	    this.options = Object.assign({}, { root: '/' }, this.options, options);
	
	    this.root = ('/' + this.options.root + '/').replace(rootStripper, '/');
	
	    this._wantsHashChange = this.options.hashChange !== false;
	    this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
	
	    var eventName = void 0;
	    if (this._hasPushState) {
	      eventName = 'popstate';
	    } else if (this._wantsHashChange) {
	      eventName = 'hashchange';
	    }
	
	    _aureliaPal.PLATFORM.addEventListener(eventName, this._checkUrlCallback);
	
	    if (this._wantsHashChange && wantsPushState) {
	      var loc = this.location;
	      var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;
	
	      if (!this._hasPushState && !atRoot) {
	        this.fragment = this._getFragment(null, true);
	        this.location.replace(this.root + this.location.search + '#' + this.fragment);
	
	        return true;
	      } else if (this._hasPushState && atRoot && loc.hash) {
	          this.fragment = this._getHash().replace(routeStripper, '');
	          this.history.replaceState({}, _aureliaPal.DOM.title, this.root + this.fragment + loc.search);
	        }
	    }
	
	    if (!this.fragment) {
	      this.fragment = this._getFragment();
	    }
	
	    this.linkHandler.activate(this);
	
	    if (!this.options.silent) {
	      return this._loadUrl();
	    }
	  };
	
	  BrowserHistory.prototype.deactivate = function deactivate() {
	    _aureliaPal.PLATFORM.removeEventListener('popstate', this._checkUrlCallback);
	    _aureliaPal.PLATFORM.removeEventListener('hashchange', this._checkUrlCallback);
	    this._isActive = false;
	    this.linkHandler.deactivate();
	  };
	
	  BrowserHistory.prototype.getAbsoluteRoot = function getAbsoluteRoot() {
	    var origin = createOrigin(this.location.protocol, this.location.hostname, this.location.port);
	    return '' + origin + this.root;
	  };
	
	  BrowserHistory.prototype.navigate = function navigate(fragment) {
	    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var _ref$trigger = _ref.trigger;
	    var trigger = _ref$trigger === undefined ? true : _ref$trigger;
	    var _ref$replace = _ref.replace;
	    var replace = _ref$replace === undefined ? false : _ref$replace;
	
	    if (fragment && absoluteUrl.test(fragment)) {
	      this.location.href = fragment;
	      return true;
	    }
	
	    if (!this._isActive) {
	      return false;
	    }
	
	    fragment = this._getFragment(fragment || '');
	
	    if (this.fragment === fragment && !replace) {
	      return false;
	    }
	
	    this.fragment = fragment;
	
	    var url = this.root + fragment;
	
	    if (fragment === '' && url !== '/') {
	      url = url.slice(0, -1);
	    }
	
	    if (this._hasPushState) {
	      url = url.replace('//', '/');
	      this.history[replace ? 'replaceState' : 'pushState']({}, _aureliaPal.DOM.title, url);
	    } else if (this._wantsHashChange) {
	      updateHash(this.location, fragment, replace);
	    } else {
	      return this.location.assign(url);
	    }
	
	    if (trigger) {
	      return this._loadUrl(fragment);
	    }
	  };
	
	  BrowserHistory.prototype.navigateBack = function navigateBack() {
	    this.history.back();
	  };
	
	  BrowserHistory.prototype.setTitle = function setTitle(title) {
	    _aureliaPal.DOM.title = title;
	  };
	
	  BrowserHistory.prototype._getHash = function _getHash() {
	    return this.location.hash.substr(1);
	  };
	
	  BrowserHistory.prototype._getFragment = function _getFragment(fragment, forcePushState) {
	    var root = void 0;
	
	    if (!fragment) {
	      if (this._hasPushState || !this._wantsHashChange || forcePushState) {
	        fragment = this.location.pathname + this.location.search;
	        root = this.root.replace(trailingSlash, '');
	        if (!fragment.indexOf(root)) {
	          fragment = fragment.substr(root.length);
	        }
	      } else {
	        fragment = this._getHash();
	      }
	    }
	
	    return '/' + fragment.replace(routeStripper, '');
	  };
	
	  BrowserHistory.prototype._checkUrl = function _checkUrl() {
	    var current = this._getFragment();
	    if (current !== this.fragment) {
	      this._loadUrl();
	    }
	  };
	
	  BrowserHistory.prototype._loadUrl = function _loadUrl(fragmentOverride) {
	    var fragment = this.fragment = this._getFragment(fragmentOverride);
	
	    return this.options.routeHandler ? this.options.routeHandler(fragment) : false;
	  };
	
	  return BrowserHistory;
	}(_aureliaHistory.History), _class.inject = [LinkHandler], _temp);
	
	var routeStripper = /^#?\/*|\s+$/g;
	
	var rootStripper = /^\/+|\/+$/g;
	
	var trailingSlash = /\/$/;
	
	var absoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
	
	function updateHash(location, fragment, replace) {
	  if (replace) {
	    var _href = location.href.replace(/(javascript:|#).*$/, '');
	    location.replace(_href + '#' + fragment);
	  } else {
	    location.hash = '#' + fragment;
	  }
	}
	
	function createOrigin(protocol, hostname, port) {
	  return protocol + '//' + hostname + (port ? ':' + port : '');
	}

/***/ },
/* 31 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function mi(name) {
	  throw new Error('History must implement ' + name + '().');
	}
	
	var History = exports.History = function () {
	  function History() {
	    _classCallCheck(this, History);
	  }
	
	  History.prototype.activate = function activate(options) {
	    mi('activate');
	  };
	
	  History.prototype.deactivate = function deactivate() {
	    mi('deactivate');
	  };
	
	  History.prototype.getAbsoluteRoot = function getAbsoluteRoot() {
	    mi('getAbsoluteRoot');
	  };
	
	  History.prototype.navigate = function navigate(fragment, options) {
	    mi('navigate');
	  };
	
	  History.prototype.navigateBack = function navigateBack() {
	    mi('navigateBack');
	  };
	
	  History.prototype.setTitle = function setTitle(title) {
	    mi('setTitle');
	  };
	
	  return History;
	}();

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ConsoleAppender = undefined;
	
	var _aureliaLogging = __webpack_require__(14);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ConsoleAppender = exports.ConsoleAppender = function () {
	  function ConsoleAppender() {
	    _classCallCheck(this, ConsoleAppender);
	  }
	
	  ConsoleAppender.prototype.debug = function debug(logger) {
	    var _console;
	
	    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      rest[_key - 1] = arguments[_key];
	    }
	
	    (_console = console).debug.apply(_console, ['DEBUG [' + logger.id + ']'].concat(rest));
	  };
	
	  ConsoleAppender.prototype.info = function info(logger) {
	    var _console2;
	
	    for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      rest[_key2 - 1] = arguments[_key2];
	    }
	
	    (_console2 = console).info.apply(_console2, ['INFO [' + logger.id + ']'].concat(rest));
	  };
	
	  ConsoleAppender.prototype.warn = function warn(logger) {
	    var _console3;
	
	    for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	      rest[_key3 - 1] = arguments[_key3];
	    }
	
	    (_console3 = console).warn.apply(_console3, ['WARN [' + logger.id + ']'].concat(rest));
	  };
	
	  ConsoleAppender.prototype.error = function error(logger) {
	    var _console4;
	
	    for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	      rest[_key4 - 1] = arguments[_key4];
	    }
	
	    (_console4 = console).error.apply(_console4, ['ERROR [' + logger.id + ']'].concat(rest));
	  };
	
	  return ConsoleAppender;
	}();

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AppRouter = exports.PipelineProvider = exports.LoadRouteStep = exports.RouteLoader = exports.ActivateNextStep = exports.DeactivatePreviousStep = exports.CanActivateNextStep = exports.CanDeactivatePreviousStep = exports.Router = exports.BuildNavigationPlanStep = exports.activationStrategy = exports.RouterConfiguration = exports.RedirectToRoute = exports.Redirect = exports.NavModel = exports.NavigationInstruction = exports.CommitChangesStep = exports.Pipeline = exports.pipelineStatus = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports._normalizeAbsolutePath = _normalizeAbsolutePath;
	exports._createRootedPath = _createRootedPath;
	exports._resolveUrl = _resolveUrl;
	exports.isNavigationCommand = isNavigationCommand;
	exports._buildNavigationPlan = _buildNavigationPlan;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaRouteRecognizer = __webpack_require__(34);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaHistory = __webpack_require__(31);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _normalizeAbsolutePath(path, hasPushState) {
	  var absolute = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	  if (!hasPushState && path[0] !== '#') {
	    path = '#' + path;
	  }
	
	  if (hasPushState && absolute) {
	    path = path.substring(1, path.length);
	  }
	
	  return path;
	}
	
	function _createRootedPath(fragment, baseUrl, hasPushState, absolute) {
	  if (isAbsoluteUrl.test(fragment)) {
	    return fragment;
	  }
	
	  var path = '';
	
	  if (baseUrl.length && baseUrl[0] !== '/') {
	    path += '/';
	  }
	
	  path += baseUrl;
	
	  if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {
	    path += '/';
	  }
	
	  if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {
	    path = path.substring(0, path.length - 1);
	  }
	
	  return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);
	}
	
	function _resolveUrl(fragment, baseUrl, hasPushState) {
	  if (isRootedPath.test(fragment)) {
	    return _normalizeAbsolutePath(fragment, hasPushState);
	  }
	
	  return _createRootedPath(fragment, baseUrl, hasPushState);
	}
	
	var isRootedPath = /^#?\//;
	var isAbsoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
	
	var pipelineStatus = exports.pipelineStatus = {
	  completed: 'completed',
	  canceled: 'canceled',
	  rejected: 'rejected',
	  running: 'running'
	};
	
	var Pipeline = exports.Pipeline = function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);
	
	    this.steps = [];
	  }
	
	  Pipeline.prototype.addStep = function addStep(step) {
	    var run = void 0;
	
	    if (typeof step === 'function') {
	      run = step;
	    } else if (typeof step.getSteps === 'function') {
	      var steps = step.getSteps();
	      for (var i = 0, l = steps.length; i < l; i++) {
	        this.addStep(steps[i]);
	      }
	
	      return this;
	    } else {
	      run = step.run.bind(step);
	    }
	
	    this.steps.push(run);
	
	    return this;
	  };
	
	  Pipeline.prototype.run = function run(instruction) {
	    var index = -1;
	    var steps = this.steps;
	
	    function next() {
	      index++;
	
	      if (index < steps.length) {
	        var currentStep = steps[index];
	
	        try {
	          return currentStep(instruction, next);
	        } catch (e) {
	          return next.reject(e);
	        }
	      } else {
	        return next.complete();
	      }
	    }
	
	    next.complete = createCompletionHandler(next, pipelineStatus.completed);
	    next.cancel = createCompletionHandler(next, pipelineStatus.canceled);
	    next.reject = createCompletionHandler(next, pipelineStatus.rejected);
	
	    return next();
	  };
	
	  return Pipeline;
	}();
	
	function createCompletionHandler(next, status) {
	  return function (output) {
	    return Promise.resolve({ status: status, output: output, completed: status === pipelineStatus.completed });
	  };
	}
	
	var CommitChangesStep = exports.CommitChangesStep = function () {
	  function CommitChangesStep() {
	    _classCallCheck(this, CommitChangesStep);
	  }
	
	  CommitChangesStep.prototype.run = function run(navigationInstruction, next) {
	    return navigationInstruction._commitChanges(true).then(function () {
	      navigationInstruction._updateTitle();
	      return next();
	    });
	  };
	
	  return CommitChangesStep;
	}();
	
	var NavigationInstruction = exports.NavigationInstruction = function () {
	  function NavigationInstruction(init) {
	    _classCallCheck(this, NavigationInstruction);
	
	    this.plan = null;
	    this.options = {};
	
	    Object.assign(this, init);
	
	    this.params = this.params || {};
	    this.viewPortInstructions = {};
	
	    var ancestorParams = [];
	    var current = this;
	    do {
	      var currentParams = Object.assign({}, current.params);
	      if (current.config && current.config.hasChildRouter) {
	        delete currentParams[current.getWildCardName()];
	      }
	
	      ancestorParams.unshift(currentParams);
	      current = current.parentInstruction;
	    } while (current);
	
	    var allParams = Object.assign.apply(Object, [{}, this.queryParams].concat(ancestorParams));
	    this.lifecycleArgs = [allParams, this.config, this];
	  }
	
	  NavigationInstruction.prototype.getAllInstructions = function getAllInstructions() {
	    var instructions = [this];
	    for (var key in this.viewPortInstructions) {
	      var childInstruction = this.viewPortInstructions[key].childNavigationInstruction;
	      if (childInstruction) {
	        instructions.push.apply(instructions, childInstruction.getAllInstructions());
	      }
	    }
	
	    return instructions;
	  };
	
	  NavigationInstruction.prototype.getAllPreviousInstructions = function getAllPreviousInstructions() {
	    return this.getAllInstructions().map(function (c) {
	      return c.previousInstruction;
	    }).filter(function (c) {
	      return c;
	    });
	  };
	
	  NavigationInstruction.prototype.addViewPortInstruction = function addViewPortInstruction(viewPortName, strategy, moduleId, component) {
	    var viewportInstruction = this.viewPortInstructions[viewPortName] = {
	      name: viewPortName,
	      strategy: strategy,
	      moduleId: moduleId,
	      component: component,
	      childRouter: component.childRouter,
	      lifecycleArgs: this.lifecycleArgs.slice()
	    };
	
	    return viewportInstruction;
	  };
	
	  NavigationInstruction.prototype.getWildCardName = function getWildCardName() {
	    var wildcardIndex = this.config.route.lastIndexOf('*');
	    return this.config.route.substr(wildcardIndex + 1);
	  };
	
	  NavigationInstruction.prototype.getWildcardPath = function getWildcardPath() {
	    var wildcardName = this.getWildCardName();
	    var path = this.params[wildcardName] || '';
	
	    if (this.queryString) {
	      path += '?' + this.queryString;
	    }
	
	    return path;
	  };
	
	  NavigationInstruction.prototype.getBaseUrl = function getBaseUrl() {
	    if (!this.params) {
	      return this.fragment;
	    }
	
	    var wildcardName = this.getWildCardName();
	    var path = this.params[wildcardName] || '';
	
	    if (!path) {
	      return this.fragment;
	    }
	
	    return this.fragment.substr(0, this.fragment.lastIndexOf(path));
	  };
	
	  NavigationInstruction.prototype._commitChanges = function _commitChanges(waitToSwap) {
	    var _this = this;
	
	    var router = this.router;
	    router.currentInstruction = this;
	
	    if (this.previousInstruction) {
	      this.previousInstruction.config.navModel.isActive = false;
	    }
	
	    this.config.navModel.isActive = true;
	
	    router._refreshBaseUrl();
	    router.refreshNavigation();
	
	    var loads = [];
	    var delaySwaps = [];
	
	    var _loop = function _loop(viewPortName) {
	      var viewPortInstruction = _this.viewPortInstructions[viewPortName];
	      var viewPort = router.viewPorts[viewPortName];
	
	      if (!viewPort) {
	        throw new Error('There was no router-view found in the view for ' + viewPortInstruction.moduleId + '.');
	      }
	
	      if (viewPortInstruction.strategy === activationStrategy.replace) {
	        if (waitToSwap) {
	          delaySwaps.push({ viewPort: viewPort, viewPortInstruction: viewPortInstruction });
	        }
	
	        loads.push(viewPort.process(viewPortInstruction, waitToSwap).then(function (x) {
	          if (viewPortInstruction.childNavigationInstruction) {
	            return viewPortInstruction.childNavigationInstruction._commitChanges();
	          }
	        }));
	      } else {
	        if (viewPortInstruction.childNavigationInstruction) {
	          loads.push(viewPortInstruction.childNavigationInstruction._commitChanges(waitToSwap));
	        }
	      }
	    };
	
	    for (var viewPortName in this.viewPortInstructions) {
	      _loop(viewPortName);
	    }
	
	    return Promise.all(loads).then(function () {
	      delaySwaps.forEach(function (x) {
	        return x.viewPort.swap(x.viewPortInstruction);
	      });
	      return null;
	    }).then(function () {
	      return prune(_this);
	    });
	  };
	
	  NavigationInstruction.prototype._updateTitle = function _updateTitle() {
	    var title = this._buildTitle();
	    if (title) {
	      this.router.history.setTitle(title);
	    }
	  };
	
	  NavigationInstruction.prototype._buildTitle = function _buildTitle() {
	    var separator = arguments.length <= 0 || arguments[0] === undefined ? ' | ' : arguments[0];
	
	    var title = this.config.navModel.title || '';
	    var childTitles = [];
	
	    for (var viewPortName in this.viewPortInstructions) {
	      var _viewPortInstruction = this.viewPortInstructions[viewPortName];
	
	      if (_viewPortInstruction.childNavigationInstruction) {
	        var childTitle = _viewPortInstruction.childNavigationInstruction._buildTitle(separator);
	        if (childTitle) {
	          childTitles.push(childTitle);
	        }
	      }
	    }
	
	    if (childTitles.length) {
	      title = childTitles.join(separator) + (title ? separator : '') + title;
	    }
	
	    if (this.router.title) {
	      title += (title ? separator : '') + this.router.title;
	    }
	
	    return title;
	  };
	
	  return NavigationInstruction;
	}();
	
	function prune(instruction) {
	  instruction.previousInstruction = null;
	  instruction.plan = null;
	}
	
	var NavModel = exports.NavModel = function () {
	  function NavModel(router, relativeHref) {
	    _classCallCheck(this, NavModel);
	
	    this.isActive = false;
	    this.title = null;
	    this.href = null;
	    this.relativeHref = null;
	    this.settings = {};
	    this.config = null;
	
	    this.router = router;
	    this.relativeHref = relativeHref;
	  }
	
	  NavModel.prototype.setTitle = function setTitle(title) {
	    this.title = title;
	
	    if (this.isActive) {
	      this.router.updateTitle();
	    }
	  };
	
	  return NavModel;
	}();
	
	function isNavigationCommand(obj) {
	  return obj && typeof obj.navigate === 'function';
	}
	
	var Redirect = exports.Redirect = function () {
	  function Redirect(url) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, Redirect);
	
	    this.url = url;
	    this.options = Object.assign({ trigger: true, replace: true }, options);
	    this.shouldContinueProcessing = false;
	  }
	
	  Redirect.prototype.setRouter = function setRouter(router) {
	    this.router = router;
	  };
	
	  Redirect.prototype.navigate = function navigate(appRouter) {
	    var navigatingRouter = this.options.useAppRouter ? appRouter : this.router || appRouter;
	    navigatingRouter.navigate(this.url, this.options);
	  };
	
	  return Redirect;
	}();
	
	var RedirectToRoute = exports.RedirectToRoute = function () {
	  function RedirectToRoute(route) {
	    var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    _classCallCheck(this, RedirectToRoute);
	
	    this.route = route;
	    this.params = params;
	    this.options = Object.assign({ trigger: true, replace: true }, options);
	    this.shouldContinueProcessing = false;
	  }
	
	  RedirectToRoute.prototype.setRouter = function setRouter(router) {
	    this.router = router;
	  };
	
	  RedirectToRoute.prototype.navigate = function navigate(appRouter) {
	    var navigatingRouter = this.options.useAppRouter ? appRouter : this.router || appRouter;
	    navigatingRouter.navigateToRoute(this.route, this.params, this.options);
	  };
	
	  return RedirectToRoute;
	}();
	
	var RouterConfiguration = exports.RouterConfiguration = function () {
	  function RouterConfiguration() {
	    _classCallCheck(this, RouterConfiguration);
	
	    this.instructions = [];
	    this.options = {};
	    this.pipelineSteps = [];
	  }
	
	  RouterConfiguration.prototype.addPipelineStep = function addPipelineStep(name, step) {
	    this.pipelineSteps.push({ name: name, step: step });
	    return this;
	  };
	
	  RouterConfiguration.prototype.addAuthorizeStep = function addAuthorizeStep(step) {
	    return this.addPipelineStep('authorize', step);
	  };
	
	  RouterConfiguration.prototype.addPreActivateStep = function addPreActivateStep(step) {
	    return this.addPipelineStep('preActivate', step);
	  };
	
	  RouterConfiguration.prototype.addPreRenderStep = function addPreRenderStep(step) {
	    return this.addPipelineStep('preRender', step);
	  };
	
	  RouterConfiguration.prototype.addPostRenderStep = function addPostRenderStep(step) {
	    return this.addPipelineStep('postRender', step);
	  };
	
	  RouterConfiguration.prototype.map = function map(route) {
	    if (Array.isArray(route)) {
	      route.forEach(this.map.bind(this));
	      return this;
	    }
	
	    return this.mapRoute(route);
	  };
	
	  RouterConfiguration.prototype.mapRoute = function mapRoute(config) {
	    this.instructions.push(function (router) {
	      var routeConfigs = [];
	
	      if (Array.isArray(config.route)) {
	        for (var i = 0, ii = config.route.length; i < ii; ++i) {
	          var _current = Object.assign({}, config);
	          _current.route = config.route[i];
	          routeConfigs.push(_current);
	        }
	      } else {
	        routeConfigs.push(Object.assign({}, config));
	      }
	
	      var navModel = void 0;
	      for (var _i = 0, _ii = routeConfigs.length; _i < _ii; ++_i) {
	        var routeConfig = routeConfigs[_i];
	        routeConfig.settings = routeConfig.settings || {};
	        if (!navModel) {
	          navModel = router.createNavModel(routeConfig);
	        }
	
	        router.addRoute(routeConfig, navModel);
	      }
	    });
	
	    return this;
	  };
	
	  RouterConfiguration.prototype.mapUnknownRoutes = function mapUnknownRoutes(config) {
	    this.unknownRouteConfig = config;
	    return this;
	  };
	
	  RouterConfiguration.prototype.exportToRouter = function exportToRouter(router) {
	    var instructions = this.instructions;
	    for (var i = 0, ii = instructions.length; i < ii; ++i) {
	      instructions[i](router);
	    }
	
	    if (this.title) {
	      router.title = this.title;
	    }
	
	    if (this.unknownRouteConfig) {
	      router.handleUnknownRoutes(this.unknownRouteConfig);
	    }
	
	    router.options = this.options;
	
	    var pipelineSteps = this.pipelineSteps;
	    if (pipelineSteps.length) {
	      if (!router.isRoot) {
	        throw new Error('Pipeline steps can only be added to the root router');
	      }
	
	      var pipelineProvider = router.pipelineProvider;
	      for (var _i2 = 0, _ii2 = pipelineSteps.length; _i2 < _ii2; ++_i2) {
	        var _pipelineSteps$_i = pipelineSteps[_i2];
	        var _name = _pipelineSteps$_i.name;
	        var step = _pipelineSteps$_i.step;
	
	        pipelineProvider.addStep(_name, step);
	      }
	    }
	  };
	
	  return RouterConfiguration;
	}();
	
	var activationStrategy = exports.activationStrategy = {
	  noChange: 'no-change',
	  invokeLifecycle: 'invoke-lifecycle',
	  replace: 'replace'
	};
	
	var BuildNavigationPlanStep = exports.BuildNavigationPlanStep = function () {
	  function BuildNavigationPlanStep() {
	    _classCallCheck(this, BuildNavigationPlanStep);
	  }
	
	  BuildNavigationPlanStep.prototype.run = function run(navigationInstruction, next) {
	    return _buildNavigationPlan(navigationInstruction).then(function (plan) {
	      navigationInstruction.plan = plan;
	      return next();
	    }).catch(next.cancel);
	  };
	
	  return BuildNavigationPlanStep;
	}();
	
	function _buildNavigationPlan(instruction, forceLifecycleMinimum) {
	  var prev = instruction.previousInstruction;
	  var config = instruction.config;
	  var plan = {};
	
	  if ('redirect' in config) {
	    var redirectLocation = _resolveUrl(config.redirect, getInstructionBaseUrl(instruction));
	    if (instruction.queryString) {
	      redirectLocation += '?' + instruction.queryString;
	    }
	
	    return Promise.reject(new Redirect(redirectLocation));
	  }
	
	  if (prev) {
	    var newParams = hasDifferentParameterValues(prev, instruction);
	    var pending = [];
	
	    var _loop2 = function _loop2(viewPortName) {
	      var prevViewPortInstruction = prev.viewPortInstructions[viewPortName];
	      var nextViewPortConfig = config.viewPorts[viewPortName];
	
	      if (!nextViewPortConfig) throw new Error('Invalid Route Config: Configuration for viewPort "' + viewPortName + '" was not found for route: "' + instruction.config.route + '."');
	
	      var viewPortPlan = plan[viewPortName] = {
	        name: viewPortName,
	        config: nextViewPortConfig,
	        prevComponent: prevViewPortInstruction.component,
	        prevModuleId: prevViewPortInstruction.moduleId
	      };
	
	      if (prevViewPortInstruction.moduleId !== nextViewPortConfig.moduleId) {
	        viewPortPlan.strategy = activationStrategy.replace;
	      } else if ('determineActivationStrategy' in prevViewPortInstruction.component.viewModel) {
	        var _prevViewPortInstruct;
	
	        viewPortPlan.strategy = (_prevViewPortInstruct = prevViewPortInstruction.component.viewModel).determineActivationStrategy.apply(_prevViewPortInstruct, instruction.lifecycleArgs);
	      } else if (config.activationStrategy) {
	        viewPortPlan.strategy = config.activationStrategy;
	      } else if (newParams || forceLifecycleMinimum) {
	        viewPortPlan.strategy = activationStrategy.invokeLifecycle;
	      } else {
	        viewPortPlan.strategy = activationStrategy.noChange;
	      }
	
	      if (viewPortPlan.strategy !== activationStrategy.replace && prevViewPortInstruction.childRouter) {
	        var path = instruction.getWildcardPath();
	        var task = prevViewPortInstruction.childRouter._createNavigationInstruction(path, instruction).then(function (childInstruction) {
	          viewPortPlan.childNavigationInstruction = childInstruction;
	
	          return _buildNavigationPlan(childInstruction, viewPortPlan.strategy === activationStrategy.invokeLifecycle).then(function (childPlan) {
	            childInstruction.plan = childPlan;
	          });
	        });
	
	        pending.push(task);
	      }
	    };
	
	    for (var viewPortName in prev.viewPortInstructions) {
	      _loop2(viewPortName);
	    }
	
	    return Promise.all(pending).then(function () {
	      return plan;
	    });
	  }
	
	  for (var _viewPortName in config.viewPorts) {
	    plan[_viewPortName] = {
	      name: _viewPortName,
	      strategy: activationStrategy.replace,
	      config: instruction.config.viewPorts[_viewPortName]
	    };
	  }
	
	  return Promise.resolve(plan);
	}
	
	function hasDifferentParameterValues(prev, next) {
	  var prevParams = prev.params;
	  var nextParams = next.params;
	  var nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;
	
	  for (var key in nextParams) {
	    if (key === nextWildCardName) {
	      continue;
	    }
	
	    if (prevParams[key] !== nextParams[key]) {
	      return true;
	    }
	  }
	
	  for (var _key in prevParams) {
	    if (_key === nextWildCardName) {
	      continue;
	    }
	
	    if (prevParams[_key] !== nextParams[_key]) {
	      return true;
	    }
	  }
	
	  if (!next.options.compareQueryParams) {
	    return false;
	  }
	
	  var prevQueryParams = prev.queryParams;
	  var nextQueryParams = next.queryParams;
	  for (var _key2 in nextQueryParams) {
	    if (prevQueryParams[_key2] !== nextQueryParams[_key2]) {
	      return true;
	    }
	  }
	
	  for (var _key3 in prevQueryParams) {
	    if (prevQueryParams[_key3] !== nextQueryParams[_key3]) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	function getInstructionBaseUrl(instruction) {
	  var instructionBaseUrlParts = [];
	  instruction = instruction.parentInstruction;
	
	  while (instruction) {
	    instructionBaseUrlParts.unshift(instruction.getBaseUrl());
	    instruction = instruction.parentInstruction;
	  }
	
	  instructionBaseUrlParts.unshift('/');
	  return instructionBaseUrlParts.join('');
	}
	
	var Router = exports.Router = function () {
	  function Router(container, history) {
	    _classCallCheck(this, Router);
	
	    this.parent = null;
	    this.options = {};
	
	    this.container = container;
	    this.history = history;
	    this.reset();
	  }
	
	  Router.prototype.reset = function reset() {
	    var _this2 = this;
	
	    this.viewPorts = {};
	    this.routes = [];
	    this.baseUrl = '';
	    this.isConfigured = false;
	    this.isNavigating = false;
	    this.navigation = [];
	    this.currentInstruction = null;
	    this._fallbackOrder = 100;
	    this._recognizer = new _aureliaRouteRecognizer.RouteRecognizer();
	    this._childRecognizer = new _aureliaRouteRecognizer.RouteRecognizer();
	    this._configuredPromise = new Promise(function (resolve) {
	      _this2._resolveConfiguredPromise = resolve;
	    });
	  };
	
	  Router.prototype.registerViewPort = function registerViewPort(viewPort, name) {
	    name = name || 'default';
	    this.viewPorts[name] = viewPort;
	  };
	
	  Router.prototype.ensureConfigured = function ensureConfigured() {
	    return this._configuredPromise;
	  };
	
	  Router.prototype.configure = function configure(callbackOrConfig) {
	    var _this3 = this;
	
	    this.isConfigured = true;
	
	    var result = callbackOrConfig;
	    var config = void 0;
	    if (typeof callbackOrConfig === 'function') {
	      config = new RouterConfiguration();
	      result = callbackOrConfig(config);
	    }
	
	    return Promise.resolve(result).then(function (c) {
	      if (c && c.exportToRouter) {
	        config = c;
	      }
	
	      config.exportToRouter(_this3);
	      _this3.isConfigured = true;
	      _this3._resolveConfiguredPromise();
	    });
	  };
	
	  Router.prototype.navigate = function navigate(fragment, options) {
	    if (!this.isConfigured && this.parent) {
	      return this.parent.navigate(fragment, options);
	    }
	
	    return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);
	  };
	
	  Router.prototype.navigateToRoute = function navigateToRoute(route, params, options) {
	    var path = this.generate(route, params);
	    return this.navigate(path, options);
	  };
	
	  Router.prototype.navigateBack = function navigateBack() {
	    this.history.navigateBack();
	  };
	
	  Router.prototype.createChild = function createChild(container) {
	    var childRouter = new Router(container || this.container.createChild(), this.history);
	    childRouter.parent = this;
	    return childRouter;
	  };
	
	  Router.prototype.generate = function generate(name, params) {
	    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    var hasRoute = this._recognizer.hasRoute(name);
	    if ((!this.isConfigured || !hasRoute) && this.parent) {
	      return this.parent.generate(name, params);
	    }
	
	    if (!hasRoute) {
	      throw new Error('A route with name \'' + name + '\' could not be found. Check that `name: \'' + name + '\'` was specified in the route\'s config.');
	    }
	
	    var path = this._recognizer.generate(name, params);
	    var rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);
	    return options.absolute ? '' + this.history.getAbsoluteRoot() + rootedPath : rootedPath;
	  };
	
	  Router.prototype.createNavModel = function createNavModel(config) {
	    var navModel = new NavModel(this, 'href' in config ? config.href : config.route);
	    navModel.title = config.title;
	    navModel.order = config.nav;
	    navModel.href = config.href;
	    navModel.settings = config.settings;
	    navModel.config = config;
	
	    return navModel;
	  };
	
	  Router.prototype.addRoute = function addRoute(config, navModel) {
	    validateRouteConfig(config);
	
	    if (!('viewPorts' in config) && !config.navigationStrategy) {
	      config.viewPorts = {
	        'default': {
	          moduleId: config.moduleId,
	          view: config.view
	        }
	      };
	    }
	
	    if (!navModel) {
	      navModel = this.createNavModel(config);
	    }
	
	    this.routes.push(config);
	
	    var path = config.route;
	    if (path.charAt(0) === '/') {
	      path = path.substr(1);
	    }
	    var caseSensitive = config.caseSensitive === true;
	    var state = this._recognizer.add({ path: path, handler: config, caseSensitive: caseSensitive });
	
	    if (path) {
	      var _settings = config.settings;
	      delete config.settings;
	      var withChild = JSON.parse(JSON.stringify(config));
	      config.settings = _settings;
	      withChild.route = path + '/*childRoute';
	      withChild.hasChildRouter = true;
	      this._childRecognizer.add({
	        path: withChild.route,
	        handler: withChild,
	        caseSensitive: caseSensitive
	      });
	
	      withChild.navModel = navModel;
	      withChild.settings = config.settings;
	    }
	
	    config.navModel = navModel;
	
	    if ((navModel.order || navModel.order === 0) && this.navigation.indexOf(navModel) === -1) {
	      if (!navModel.href && navModel.href !== '' && (state.types.dynamics || state.types.stars)) {
	        throw new Error('Invalid route config: dynamic routes must specify an href to be included in the navigation model.');
	      }
	
	      if (typeof navModel.order !== 'number') {
	        navModel.order = ++this._fallbackOrder;
	      }
	
	      this.navigation.push(navModel);
	      this.navigation = this.navigation.sort(function (a, b) {
	        return a.order - b.order;
	      });
	    }
	  };
	
	  Router.prototype.hasRoute = function hasRoute(name) {
	    return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));
	  };
	
	  Router.prototype.hasOwnRoute = function hasOwnRoute(name) {
	    return this._recognizer.hasRoute(name);
	  };
	
	  Router.prototype.handleUnknownRoutes = function handleUnknownRoutes(config) {
	    var _this4 = this;
	
	    if (!config) {
	      throw new Error('Invalid unknown route handler');
	    }
	
	    this.catchAllHandler = function (instruction) {
	      return _this4._createRouteConfig(config, instruction).then(function (c) {
	        instruction.config = c;
	        return instruction;
	      });
	    };
	  };
	
	  Router.prototype.updateTitle = function updateTitle() {
	    if (this.parent) {
	      return this.parent.updateTitle();
	    }
	
	    this.currentInstruction._updateTitle();
	  };
	
	  Router.prototype.refreshNavigation = function refreshNavigation() {
	    var nav = this.navigation;
	
	    for (var i = 0, length = nav.length; i < length; i++) {
	      var _current2 = nav[i];
	      if (!_current2.config.href) {
	        _current2.href = _createRootedPath(_current2.relativeHref, this.baseUrl, this.history._hasPushState);
	      }
	    }
	  };
	
	  Router.prototype._refreshBaseUrl = function _refreshBaseUrl() {
	    if (this.parent) {
	      var baseUrl = this.parent.currentInstruction.getBaseUrl();
	      this.baseUrl = this.parent.baseUrl + baseUrl;
	    }
	  };
	
	  Router.prototype._createNavigationInstruction = function _createNavigationInstruction() {
	    var url = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
	    var parentInstruction = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	
	    var fragment = url;
	    var queryString = '';
	
	    var queryIndex = url.indexOf('?');
	    if (queryIndex !== -1) {
	      fragment = url.substr(0, queryIndex);
	      queryString = url.substr(queryIndex + 1);
	    }
	
	    var results = this._recognizer.recognize(url);
	    if (!results || !results.length) {
	      results = this._childRecognizer.recognize(url);
	    }
	
	    var instructionInit = {
	      fragment: fragment,
	      queryString: queryString,
	      config: null,
	      parentInstruction: parentInstruction,
	      previousInstruction: this.currentInstruction,
	      router: this,
	      options: {
	        compareQueryParams: this.options.compareQueryParams
	      }
	    };
	
	    if (results && results.length) {
	      var first = results[0];
	      var _instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
	        params: first.params,
	        queryParams: first.queryParams || results.queryParams,
	        config: first.config || first.handler
	      }));
	
	      if (typeof first.handler === 'function') {
	        return evaluateNavigationStrategy(_instruction, first.handler, first);
	      } else if (first.handler && 'navigationStrategy' in first.handler) {
	        return evaluateNavigationStrategy(_instruction, first.handler.navigationStrategy, first.handler);
	      }
	
	      return Promise.resolve(_instruction);
	    } else if (this.catchAllHandler) {
	      var _instruction2 = new NavigationInstruction(Object.assign({}, instructionInit, {
	        params: { path: fragment },
	        queryParams: results && results.queryParams,
	        config: null }));
	
	      return evaluateNavigationStrategy(_instruction2, this.catchAllHandler);
	    }
	
	    return Promise.reject(new Error('Route not found: ' + url));
	  };
	
	  Router.prototype._createRouteConfig = function _createRouteConfig(config, instruction) {
	    var _this5 = this;
	
	    return Promise.resolve(config).then(function (c) {
	      if (typeof c === 'string') {
	        return { moduleId: c };
	      } else if (typeof c === 'function') {
	        return c(instruction);
	      }
	
	      return c;
	    }).then(function (c) {
	      return typeof c === 'string' ? { moduleId: c } : c;
	    }).then(function (c) {
	      c.route = instruction.params.path;
	      validateRouteConfig(c);
	
	      if (!c.navModel) {
	        c.navModel = _this5.createNavModel(c);
	      }
	
	      return c;
	    });
	  };
	
	  _createClass(Router, [{
	    key: 'isRoot',
	    get: function get() {
	      return !this.parent;
	    }
	  }]);
	
	  return Router;
	}();
	
	function validateRouteConfig(config) {
	  if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {
	    throw new Error('Invalid Route Config');
	  }
	
	  if (typeof config.route !== 'string') {
	    throw new Error('Invalid Route Config: You must specify a route pattern.');
	  }
	
	  if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {
	    throw new Error('Invalid Route Config: You must specify a moduleId, redirect, navigationStrategy, or viewPorts.');
	  }
	}
	
	function evaluateNavigationStrategy(instruction, evaluator, context) {
	  return Promise.resolve(evaluator.call(context, instruction)).then(function () {
	    if (!('viewPorts' in instruction.config)) {
	      instruction.config.viewPorts = {
	        'default': {
	          moduleId: instruction.config.moduleId
	        }
	      };
	    }
	
	    return instruction;
	  });
	}
	
	var CanDeactivatePreviousStep = exports.CanDeactivatePreviousStep = function () {
	  function CanDeactivatePreviousStep() {
	    _classCallCheck(this, CanDeactivatePreviousStep);
	  }
	
	  CanDeactivatePreviousStep.prototype.run = function run(navigationInstruction, next) {
	    return processDeactivatable(navigationInstruction.plan, 'canDeactivate', next);
	  };
	
	  return CanDeactivatePreviousStep;
	}();
	
	var CanActivateNextStep = exports.CanActivateNextStep = function () {
	  function CanActivateNextStep() {
	    _classCallCheck(this, CanActivateNextStep);
	  }
	
	  CanActivateNextStep.prototype.run = function run(navigationInstruction, next) {
	    return processActivatable(navigationInstruction, 'canActivate', next);
	  };
	
	  return CanActivateNextStep;
	}();
	
	var DeactivatePreviousStep = exports.DeactivatePreviousStep = function () {
	  function DeactivatePreviousStep() {
	    _classCallCheck(this, DeactivatePreviousStep);
	  }
	
	  DeactivatePreviousStep.prototype.run = function run(navigationInstruction, next) {
	    return processDeactivatable(navigationInstruction.plan, 'deactivate', next, true);
	  };
	
	  return DeactivatePreviousStep;
	}();
	
	var ActivateNextStep = exports.ActivateNextStep = function () {
	  function ActivateNextStep() {
	    _classCallCheck(this, ActivateNextStep);
	  }
	
	  ActivateNextStep.prototype.run = function run(navigationInstruction, next) {
	    return processActivatable(navigationInstruction, 'activate', next, true);
	  };
	
	  return ActivateNextStep;
	}();
	
	function processDeactivatable(plan, callbackName, next, ignoreResult) {
	  var infos = findDeactivatable(plan, callbackName);
	  var i = infos.length;
	
	  function inspect(val) {
	    if (ignoreResult || shouldContinue(val)) {
	      return iterate();
	    }
	
	    return next.cancel(val);
	  }
	
	  function iterate() {
	    if (i--) {
	      try {
	        var viewModel = infos[i];
	        var _result = viewModel[callbackName]();
	        return processPotential(_result, inspect, next.cancel);
	      } catch (error) {
	        return next.cancel(error);
	      }
	    }
	
	    return next();
	  }
	
	  return iterate();
	}
	
	function findDeactivatable(plan, callbackName) {
	  var list = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
	
	  for (var viewPortName in plan) {
	    var _viewPortPlan = plan[viewPortName];
	    var prevComponent = _viewPortPlan.prevComponent;
	
	    if ((_viewPortPlan.strategy === activationStrategy.invokeLifecycle || _viewPortPlan.strategy === activationStrategy.replace) && prevComponent) {
	      var viewModel = prevComponent.viewModel;
	
	      if (callbackName in viewModel) {
	        list.push(viewModel);
	      }
	    }
	
	    if (_viewPortPlan.childNavigationInstruction) {
	      findDeactivatable(_viewPortPlan.childNavigationInstruction.plan, callbackName, list);
	    } else if (prevComponent) {
	      addPreviousDeactivatable(prevComponent, callbackName, list);
	    }
	  }
	
	  return list;
	}
	
	function addPreviousDeactivatable(component, callbackName, list) {
	  var childRouter = component.childRouter;
	
	  if (childRouter && childRouter.currentInstruction) {
	    var viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;
	
	    for (var viewPortName in viewPortInstructions) {
	      var _viewPortInstruction2 = viewPortInstructions[viewPortName];
	      var prevComponent = _viewPortInstruction2.component;
	      var prevViewModel = prevComponent.viewModel;
	
	      if (callbackName in prevViewModel) {
	        list.push(prevViewModel);
	      }
	
	      addPreviousDeactivatable(prevComponent, callbackName, list);
	    }
	  }
	}
	
	function processActivatable(navigationInstruction, callbackName, next, ignoreResult) {
	  var infos = findActivatable(navigationInstruction, callbackName);
	  var length = infos.length;
	  var i = -1;
	
	  function inspect(val, router) {
	    if (ignoreResult || shouldContinue(val, router)) {
	      return iterate();
	    }
	
	    return next.cancel(val);
	  }
	
	  function iterate() {
	    i++;
	
	    if (i < length) {
	      try {
	        var _ret3 = function () {
	          var _current$viewModel;
	
	          var current = infos[i];
	          var result = (_current$viewModel = current.viewModel)[callbackName].apply(_current$viewModel, current.lifecycleArgs);
	          return {
	            v: processPotential(result, function (val) {
	              return inspect(val, current.router);
	            }, next.cancel)
	          };
	        }();
	
	        if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
	      } catch (error) {
	        return next.cancel(error);
	      }
	    }
	
	    return next();
	  }
	
	  return iterate();
	}
	
	function findActivatable(navigationInstruction, callbackName) {
	  var list = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
	  var router = arguments[3];
	
	  var plan = navigationInstruction.plan;
	
	  Object.keys(plan).filter(function (viewPortName) {
	    var viewPortPlan = plan[viewPortName];
	    var viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName];
	    var viewModel = viewPortInstruction.component.viewModel;
	
	    if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace) && callbackName in viewModel) {
	      list.push({
	        viewModel: viewModel,
	        lifecycleArgs: viewPortInstruction.lifecycleArgs,
	        router: router
	      });
	    }
	
	    if (viewPortPlan.childNavigationInstruction) {
	      findActivatable(viewPortPlan.childNavigationInstruction, callbackName, list, viewPortInstruction.component.childRouter || router);
	    }
	  });
	
	  return list;
	}
	
	function shouldContinue(output, router) {
	  if (output instanceof Error) {
	    return false;
	  }
	
	  if (isNavigationCommand(output)) {
	    if (typeof output.setRouter === 'function') {
	      output.setRouter(router);
	    }
	
	    return !!output.shouldContinueProcessing;
	  }
	
	  if (output === undefined) {
	    return true;
	  }
	
	  return output;
	}
	
	var SafeSubscription = function () {
	  function SafeSubscription(subscriptionFunc) {
	    _classCallCheck(this, SafeSubscription);
	
	    this._subscribed = true;
	    this._subscription = subscriptionFunc(this);
	
	    if (!this._subscribed) this.unsubscribe();
	  }
	
	  SafeSubscription.prototype.unsubscribe = function unsubscribe() {
	    if (this._subscribed && this._subscription) this._subscription.unsubscribe();
	
	    this._subscribed = false;
	  };
	
	  _createClass(SafeSubscription, [{
	    key: 'subscribed',
	    get: function get() {
	      return this._subscribed;
	    }
	  }]);
	
	  return SafeSubscription;
	}();
	
	function processPotential(obj, resolve, reject) {
	  if (obj && typeof obj.then === 'function') {
	    return Promise.resolve(obj).then(resolve).catch(reject);
	  }
	
	  if (obj && typeof obj.subscribe === 'function') {
	    var _ret4 = function () {
	      var obs = obj;
	      return {
	        v: new SafeSubscription(function (sub) {
	          return obs.subscribe({
	            next: function next() {
	              if (sub.subscribed) {
	                sub.unsubscribe();
	                resolve(obj);
	              }
	            },
	            error: function error(_error) {
	              if (sub.subscribed) {
	                sub.unsubscribe();
	                reject(_error);
	              }
	            },
	            complete: function complete() {
	              if (sub.subscribed) {
	                sub.unsubscribe();
	                resolve(obj);
	              }
	            }
	          });
	        })
	      };
	    }();
	
	    if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === "object") return _ret4.v;
	  }
	
	  try {
	    return resolve(obj);
	  } catch (error) {
	    return reject(error);
	  }
	}
	
	var RouteLoader = exports.RouteLoader = function () {
	  function RouteLoader() {
	    _classCallCheck(this, RouteLoader);
	  }
	
	  RouteLoader.prototype.loadRoute = function loadRoute(router, config, navigationInstruction) {
	    throw Error('Route loaders must implement "loadRoute(router, config, navigationInstruction)".');
	  };
	
	  return RouteLoader;
	}();
	
	var LoadRouteStep = exports.LoadRouteStep = function () {
	  LoadRouteStep.inject = function inject() {
	    return [RouteLoader];
	  };
	
	  function LoadRouteStep(routeLoader) {
	    _classCallCheck(this, LoadRouteStep);
	
	    this.routeLoader = routeLoader;
	  }
	
	  LoadRouteStep.prototype.run = function run(navigationInstruction, next) {
	    return loadNewRoute(this.routeLoader, navigationInstruction).then(next).catch(next.cancel);
	  };
	
	  return LoadRouteStep;
	}();
	
	function loadNewRoute(routeLoader, navigationInstruction) {
	  var toLoad = determineWhatToLoad(navigationInstruction);
	  var loadPromises = toLoad.map(function (current) {
	    return loadRoute(routeLoader, current.navigationInstruction, current.viewPortPlan);
	  });
	
	  return Promise.all(loadPromises);
	}
	
	function determineWhatToLoad(navigationInstruction) {
	  var toLoad = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	
	  var plan = navigationInstruction.plan;
	
	  for (var viewPortName in plan) {
	    var _viewPortPlan2 = plan[viewPortName];
	
	    if (_viewPortPlan2.strategy === activationStrategy.replace) {
	      toLoad.push({ viewPortPlan: _viewPortPlan2, navigationInstruction: navigationInstruction });
	
	      if (_viewPortPlan2.childNavigationInstruction) {
	        determineWhatToLoad(_viewPortPlan2.childNavigationInstruction, toLoad);
	      }
	    } else {
	      var _viewPortInstruction3 = navigationInstruction.addViewPortInstruction(viewPortName, _viewPortPlan2.strategy, _viewPortPlan2.prevModuleId, _viewPortPlan2.prevComponent);
	
	      if (_viewPortPlan2.childNavigationInstruction) {
	        _viewPortInstruction3.childNavigationInstruction = _viewPortPlan2.childNavigationInstruction;
	        determineWhatToLoad(_viewPortPlan2.childNavigationInstruction, toLoad);
	      }
	    }
	  }
	
	  return toLoad;
	}
	
	function loadRoute(routeLoader, navigationInstruction, viewPortPlan) {
	  var moduleId = viewPortPlan.config.moduleId;
	
	  return loadComponent(routeLoader, navigationInstruction, viewPortPlan.config).then(function (component) {
	    var viewPortInstruction = navigationInstruction.addViewPortInstruction(viewPortPlan.name, viewPortPlan.strategy, moduleId, component);
	
	    var childRouter = component.childRouter;
	    if (childRouter) {
	      var path = navigationInstruction.getWildcardPath();
	
	      return childRouter._createNavigationInstruction(path, navigationInstruction).then(function (childInstruction) {
	        viewPortPlan.childNavigationInstruction = childInstruction;
	
	        return _buildNavigationPlan(childInstruction).then(function (childPlan) {
	          childInstruction.plan = childPlan;
	          viewPortInstruction.childNavigationInstruction = childInstruction;
	
	          return loadNewRoute(routeLoader, childInstruction);
	        });
	      });
	    }
	  });
	}
	
	function loadComponent(routeLoader, navigationInstruction, config) {
	  var router = navigationInstruction.router;
	  var lifecycleArgs = navigationInstruction.lifecycleArgs;
	
	  return routeLoader.loadRoute(router, config, navigationInstruction).then(function (component) {
	    var viewModel = component.viewModel;
	    var childContainer = component.childContainer;
	
	    component.router = router;
	    component.config = config;
	
	    if ('configureRouter' in viewModel) {
	      var _ret5 = function () {
	        var childRouter = childContainer.getChildRouter();
	        component.childRouter = childRouter;
	
	        return {
	          v: childRouter.configure(function (c) {
	            return viewModel.configureRouter.apply(viewModel, [c, childRouter].concat(lifecycleArgs));
	          }).then(function () {
	            return component;
	          })
	        };
	      }();
	
	      if ((typeof _ret5 === 'undefined' ? 'undefined' : _typeof(_ret5)) === "object") return _ret5.v;
	    }
	
	    return component;
	  });
	}
	
	var PipelineSlot = function () {
	  function PipelineSlot(container, name, alias) {
	    _classCallCheck(this, PipelineSlot);
	
	    this.steps = [];
	
	    this.container = container;
	    this.slotName = name;
	    this.slotAlias = alias;
	  }
	
	  PipelineSlot.prototype.getSteps = function getSteps() {
	    var _this6 = this;
	
	    return this.steps.map(function (x) {
	      return _this6.container.get(x);
	    });
	  };
	
	  return PipelineSlot;
	}();
	
	var PipelineProvider = exports.PipelineProvider = function () {
	  PipelineProvider.inject = function inject() {
	    return [_aureliaDependencyInjection.Container];
	  };
	
	  function PipelineProvider(container) {
	    _classCallCheck(this, PipelineProvider);
	
	    this.container = container;
	    this.steps = [BuildNavigationPlanStep, CanDeactivatePreviousStep, LoadRouteStep, this._createPipelineSlot('authorize'), CanActivateNextStep, this._createPipelineSlot('preActivate', 'modelbind'), DeactivatePreviousStep, ActivateNextStep, this._createPipelineSlot('preRender', 'precommit'), CommitChangesStep, this._createPipelineSlot('postRender', 'postcomplete')];
	  }
	
	  PipelineProvider.prototype.createPipeline = function createPipeline() {
	    var _this7 = this;
	
	    var pipeline = new Pipeline();
	    this.steps.forEach(function (step) {
	      return pipeline.addStep(_this7.container.get(step));
	    });
	    return pipeline;
	  };
	
	  PipelineProvider.prototype._findStep = function _findStep(name) {
	    return this.steps.find(function (x) {
	      return x.slotName === name || x.slotAlias === name;
	    });
	  };
	
	  PipelineProvider.prototype.addStep = function addStep(name, step) {
	    var found = this._findStep(name);
	    if (found) {
	      if (!found.steps.includes(step)) {
	        found.steps.push(step);
	      }
	    } else {
	      throw new Error('Invalid pipeline slot name: ' + name + '.');
	    }
	  };
	
	  PipelineProvider.prototype.removeStep = function removeStep(name, step) {
	    var slot = this._findStep(name);
	    if (slot) {
	      slot.steps.splice(slot.steps.indexOf(step), 1);
	    }
	  };
	
	  PipelineProvider.prototype._clearSteps = function _clearSteps() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
	
	    var slot = this._findStep(name);
	    if (slot) {
	      slot.steps = [];
	    }
	  };
	
	  PipelineProvider.prototype.reset = function reset() {
	    this._clearSteps('authorize');
	    this._clearSteps('preActivate');
	    this._clearSteps('preRender');
	    this._clearSteps('postRender');
	  };
	
	  PipelineProvider.prototype._createPipelineSlot = function _createPipelineSlot(name, alias) {
	    return new PipelineSlot(this.container, name, alias);
	  };
	
	  return PipelineProvider;
	}();
	
	var logger = LogManager.getLogger('app-router');
	
	var AppRouter = exports.AppRouter = function (_Router) {
	  _inherits(AppRouter, _Router);
	
	  AppRouter.inject = function inject() {
	    return [_aureliaDependencyInjection.Container, _aureliaHistory.History, PipelineProvider, _aureliaEventAggregator.EventAggregator];
	  };
	
	  function AppRouter(container, history, pipelineProvider, events) {
	    _classCallCheck(this, AppRouter);
	
	    var _this8 = _possibleConstructorReturn(this, _Router.call(this, container, history));
	
	    _this8.pipelineProvider = pipelineProvider;
	    _this8.events = events;
	    return _this8;
	  }
	
	  AppRouter.prototype.reset = function reset() {
	    _Router.prototype.reset.call(this);
	    this.maxInstructionCount = 10;
	    if (!this._queue) {
	      this._queue = [];
	    } else {
	      this._queue.length = 0;
	    }
	  };
	
	  AppRouter.prototype.loadUrl = function loadUrl(url) {
	    var _this9 = this;
	
	    return this._createNavigationInstruction(url).then(function (instruction) {
	      return _this9._queueInstruction(instruction);
	    }).catch(function (error) {
	      logger.error(error);
	      restorePreviousLocation(_this9);
	    });
	  };
	
	  AppRouter.prototype.registerViewPort = function registerViewPort(viewPort, name) {
	    var _this10 = this;
	
	    _Router.prototype.registerViewPort.call(this, viewPort, name);
	
	    if (!this.isActive) {
	      var _ret6 = function () {
	        var viewModel = _this10._findViewModel(viewPort);
	        if ('configureRouter' in viewModel) {
	          if (!_this10.isConfigured) {
	            var _ret7 = function () {
	              var resolveConfiguredPromise = _this10._resolveConfiguredPromise;
	              _this10._resolveConfiguredPromise = function () {};
	              return {
	                v: {
	                  v: _this10.configure(function (config) {
	                    return viewModel.configureRouter(config, _this10);
	                  }).then(function () {
	                    _this10.activate();
	                    resolveConfiguredPromise();
	                  })
	                }
	              };
	            }();
	
	            if ((typeof _ret7 === 'undefined' ? 'undefined' : _typeof(_ret7)) === "object") return _ret7.v;
	          }
	        } else {
	          _this10.activate();
	        }
	      }();
	
	      if ((typeof _ret6 === 'undefined' ? 'undefined' : _typeof(_ret6)) === "object") return _ret6.v;
	    } else {
	      this._dequeueInstruction();
	    }
	
	    return Promise.resolve();
	  };
	
	  AppRouter.prototype.activate = function activate(options) {
	    if (this.isActive) {
	      return;
	    }
	
	    this.isActive = true;
	    this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);
	    this.history.activate(this.options);
	    this._dequeueInstruction();
	  };
	
	  AppRouter.prototype.deactivate = function deactivate() {
	    this.isActive = false;
	    this.history.deactivate();
	  };
	
	  AppRouter.prototype._queueInstruction = function _queueInstruction(instruction) {
	    var _this11 = this;
	
	    return new Promise(function (resolve) {
	      instruction.resolve = resolve;
	      _this11._queue.unshift(instruction);
	      _this11._dequeueInstruction();
	    });
	  };
	
	  AppRouter.prototype._dequeueInstruction = function _dequeueInstruction() {
	    var _this12 = this;
	
	    var instructionCount = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	
	    return Promise.resolve().then(function () {
	      if (_this12.isNavigating && !instructionCount) {
	        return undefined;
	      }
	
	      var instruction = _this12._queue.shift();
	      _this12._queue.length = 0;
	
	      if (!instruction) {
	        return undefined;
	      }
	
	      _this12.isNavigating = true;
	      instruction.previousInstruction = _this12.currentInstruction;
	
	      if (!instructionCount) {
	        _this12.events.publish('router:navigation:processing', { instruction: instruction });
	      } else if (instructionCount === _this12.maxInstructionCount - 1) {
	        logger.error(instructionCount + 1 + ' navigation instructions have been attempted without success. Restoring last known good location.');
	        restorePreviousLocation(_this12);
	        return _this12._dequeueInstruction(instructionCount + 1);
	      } else if (instructionCount > _this12.maxInstructionCount) {
	        throw new Error('Maximum navigation attempts exceeded. Giving up.');
	      }
	
	      var pipeline = _this12.pipelineProvider.createPipeline();
	
	      return pipeline.run(instruction).then(function (result) {
	        return processResult(instruction, result, instructionCount, _this12);
	      }).catch(function (error) {
	        return { output: error instanceof Error ? error : new Error(error) };
	      }).then(function (result) {
	        return resolveInstruction(instruction, result, !!instructionCount, _this12);
	      });
	    });
	  };
	
	  AppRouter.prototype._findViewModel = function _findViewModel(viewPort) {
	    if (this.container.viewModel) {
	      return this.container.viewModel;
	    }
	
	    if (viewPort.container) {
	      var container = viewPort.container;
	
	      while (container) {
	        if (container.viewModel) {
	          this.container.viewModel = container.viewModel;
	          return container.viewModel;
	        }
	
	        container = container.parent;
	      }
	    }
	  };
	
	  return AppRouter;
	}(Router);
	
	function processResult(instruction, result, instructionCount, router) {
	  if (!(result && 'completed' in result && 'output' in result)) {
	    result = result || {};
	    result.output = new Error('Expected router pipeline to return a navigation result, but got [' + JSON.stringify(result) + '] instead.');
	  }
	
	  var finalResult = null;
	  if (isNavigationCommand(result.output)) {
	    result.output.navigate(router);
	  } else {
	    finalResult = result;
	
	    if (!result.completed) {
	      if (result.output instanceof Error) {
	        logger.error(result.output);
	      }
	
	      restorePreviousLocation(router);
	    }
	  }
	
	  return router._dequeueInstruction(instructionCount + 1).then(function (innerResult) {
	    return finalResult || innerResult || result;
	  });
	}
	
	function resolveInstruction(instruction, result, isInnerInstruction, router) {
	  instruction.resolve(result);
	
	  if (!isInnerInstruction) {
	    router.isNavigating = false;
	    var eventArgs = { instruction: instruction, result: result };
	    var eventName = void 0;
	
	    if (result.output instanceof Error) {
	      eventName = 'error';
	    } else if (!result.completed) {
	      eventName = 'canceled';
	    } else {
	      var _queryString = instruction.queryString ? '?' + instruction.queryString : '';
	      router.history.previousLocation = instruction.fragment + _queryString;
	      eventName = 'success';
	    }
	
	    router.events.publish('router:navigation:' + eventName, eventArgs);
	    router.events.publish('router:navigation:complete', eventArgs);
	  }
	
	  return result;
	}
	
	function restorePreviousLocation(router) {
	  var previousLocation = router.history.previousLocation;
	  if (previousLocation) {
	    router.navigate(router.history.previousLocation, { trigger: false, replace: true });
	  } else {
	    logger.error('Router navigation failed, and no previous location could be restored.');
	  }
	}

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RouteRecognizer = exports.EpsilonSegment = exports.StarSegment = exports.DynamicSegment = exports.StaticSegment = exports.State = undefined;
	
	var _aureliaPath = __webpack_require__(9);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var State = exports.State = function () {
	  function State(charSpec) {
	    _classCallCheck(this, State);
	
	    this.charSpec = charSpec;
	    this.nextStates = [];
	  }
	
	  State.prototype.get = function get(charSpec) {
	    for (var _iterator = this.nextStates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;
	
	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }
	
	      var child = _ref;
	
	      var isEqual = child.charSpec.validChars === charSpec.validChars && child.charSpec.invalidChars === charSpec.invalidChars;
	
	      if (isEqual) {
	        return child;
	      }
	    }
	  };
	
	  State.prototype.put = function put(charSpec) {
	    var state = this.get(charSpec);
	
	    if (state) {
	      return state;
	    }
	
	    state = new State(charSpec);
	
	    this.nextStates.push(state);
	
	    if (charSpec.repeat) {
	      state.nextStates.push(state);
	    }
	
	    return state;
	  };
	
	  State.prototype.match = function match(ch) {
	    var nextStates = this.nextStates;
	    var results = [];
	
	    for (var i = 0, l = nextStates.length; i < l; i++) {
	      var child = nextStates[i];
	      var charSpec = child.charSpec;
	
	      if (charSpec.validChars !== undefined) {
	        if (charSpec.validChars.indexOf(ch) !== -1) {
	          results.push(child);
	        }
	      } else if (charSpec.invalidChars !== undefined) {
	        if (charSpec.invalidChars.indexOf(ch) === -1) {
	          results.push(child);
	        }
	      }
	    }
	
	    return results;
	  };
	
	  return State;
	}();
	
	var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];
	
	var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');
	
	var StaticSegment = exports.StaticSegment = function () {
	  function StaticSegment(string, caseSensitive) {
	    _classCallCheck(this, StaticSegment);
	
	    this.string = string;
	    this.caseSensitive = caseSensitive;
	  }
	
	  StaticSegment.prototype.eachChar = function eachChar(callback) {
	    var s = this.string;
	    for (var i = 0, ii = s.length; i < ii; ++i) {
	      var ch = s[i];
	      callback({ validChars: this.caseSensitive ? ch : ch.toUpperCase() + ch.toLowerCase() });
	    }
	  };
	
	  StaticSegment.prototype.regex = function regex() {
	    return this.string.replace(escapeRegex, '\\$1');
	  };
	
	  StaticSegment.prototype.generate = function generate() {
	    return this.string;
	  };
	
	  return StaticSegment;
	}();
	
	var DynamicSegment = exports.DynamicSegment = function () {
	  function DynamicSegment(name) {
	    _classCallCheck(this, DynamicSegment);
	
	    this.name = name;
	  }
	
	  DynamicSegment.prototype.eachChar = function eachChar(callback) {
	    callback({ invalidChars: '/', repeat: true });
	  };
	
	  DynamicSegment.prototype.regex = function regex() {
	    return '([^/]+)';
	  };
	
	  DynamicSegment.prototype.generate = function generate(params, consumed) {
	    consumed[this.name] = true;
	    return params[this.name];
	  };
	
	  return DynamicSegment;
	}();
	
	var StarSegment = exports.StarSegment = function () {
	  function StarSegment(name) {
	    _classCallCheck(this, StarSegment);
	
	    this.name = name;
	  }
	
	  StarSegment.prototype.eachChar = function eachChar(callback) {
	    callback({ invalidChars: '', repeat: true });
	  };
	
	  StarSegment.prototype.regex = function regex() {
	    return '(.+)';
	  };
	
	  StarSegment.prototype.generate = function generate(params, consumed) {
	    consumed[this.name] = true;
	    return params[this.name];
	  };
	
	  return StarSegment;
	}();
	
	var EpsilonSegment = exports.EpsilonSegment = function () {
	  function EpsilonSegment() {
	    _classCallCheck(this, EpsilonSegment);
	  }
	
	  EpsilonSegment.prototype.eachChar = function eachChar() {};
	
	  EpsilonSegment.prototype.regex = function regex() {
	    return '';
	  };
	
	  EpsilonSegment.prototype.generate = function generate() {
	    return '';
	  };
	
	  return EpsilonSegment;
	}();
	
	var RouteRecognizer = exports.RouteRecognizer = function () {
	  function RouteRecognizer() {
	    _classCallCheck(this, RouteRecognizer);
	
	    this.rootState = new State();
	    this.names = {};
	  }
	
	  RouteRecognizer.prototype.add = function add(route) {
	    var _this = this;
	
	    if (Array.isArray(route)) {
	      route.forEach(function (r) {
	        return _this.add(r);
	      });
	      return undefined;
	    }
	
	    var currentState = this.rootState;
	    var regex = '^';
	    var types = { statics: 0, dynamics: 0, stars: 0 };
	    var names = [];
	    var routeName = route.handler.name;
	    var isEmpty = true;
	    var segments = parse(route.path, names, types, route.caseSensitive);
	
	    for (var i = 0, ii = segments.length; i < ii; i++) {
	      var segment = segments[i];
	      if (segment instanceof EpsilonSegment) {
	        continue;
	      }
	
	      isEmpty = false;
	
	      currentState = currentState.put({ validChars: '/' });
	      regex += '/';
	
	      currentState = addSegment(currentState, segment);
	      regex += segment.regex();
	    }
	
	    if (isEmpty) {
	      currentState = currentState.put({ validChars: '/' });
	      regex += '/';
	    }
	
	    var handlers = [{ handler: route.handler, names: names }];
	
	    if (routeName) {
	      var routeNames = Array.isArray(routeName) ? routeName : [routeName];
	      for (var _i2 = 0; _i2 < routeNames.length; _i2++) {
	        this.names[routeNames[_i2]] = {
	          segments: segments,
	          handlers: handlers
	        };
	      }
	    }
	
	    currentState.handlers = handlers;
	    currentState.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');
	    currentState.types = types;
	
	    return currentState;
	  };
	
	  RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
	    var route = this.names[name];
	    if (!route) {
	      throw new Error('There is no route named ' + name);
	    }
	
	    return [].concat(route.handlers);
	  };
	
	  RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
	    return !!this.names[name];
	  };
	
	  RouteRecognizer.prototype.generate = function generate(name, params) {
	    var routeParams = Object.assign({}, params);
	
	    var route = this.names[name];
	    if (!route) {
	      throw new Error('There is no route named ' + name);
	    }
	
	    var segments = route.segments;
	    var consumed = {};
	    var output = '';
	
	    for (var i = 0, l = segments.length; i < l; i++) {
	      var segment = segments[i];
	
	      if (segment instanceof EpsilonSegment) {
	        continue;
	      }
	
	      output += '/';
	      var segmentValue = segment.generate(routeParams, consumed);
	      if (segmentValue === null || segmentValue === undefined) {
	        throw new Error('A value is required for route parameter \'' + segment.name + '\' in route \'' + name + '\'.');
	      }
	
	      output += segmentValue;
	    }
	
	    if (output.charAt(0) !== '/') {
	      output = '/' + output;
	    }
	
	    for (var param in consumed) {
	      delete routeParams[param];
	    }
	
	    var queryString = (0, _aureliaPath.buildQueryString)(routeParams);
	    output += queryString ? '?' + queryString : '';
	
	    return output;
	  };
	
	  RouteRecognizer.prototype.recognize = function recognize(path) {
	    var states = [this.rootState];
	    var queryParams = {};
	    var isSlashDropped = false;
	    var normalizedPath = path;
	
	    var queryStart = normalizedPath.indexOf('?');
	    if (queryStart !== -1) {
	      var queryString = normalizedPath.substr(queryStart + 1, normalizedPath.length);
	      normalizedPath = normalizedPath.substr(0, queryStart);
	      queryParams = (0, _aureliaPath.parseQueryString)(queryString);
	    }
	
	    normalizedPath = decodeURI(normalizedPath);
	
	    if (normalizedPath.charAt(0) !== '/') {
	      normalizedPath = '/' + normalizedPath;
	    }
	
	    var pathLen = normalizedPath.length;
	    if (pathLen > 1 && normalizedPath.charAt(pathLen - 1) === '/') {
	      normalizedPath = normalizedPath.substr(0, pathLen - 1);
	      isSlashDropped = true;
	    }
	
	    for (var i = 0, l = normalizedPath.length; i < l; i++) {
	      states = recognizeChar(states, normalizedPath.charAt(i));
	      if (!states.length) {
	        break;
	      }
	    }
	
	    var solutions = [];
	    for (var _i3 = 0, _l = states.length; _i3 < _l; _i3++) {
	      if (states[_i3].handlers) {
	        solutions.push(states[_i3]);
	      }
	    }
	
	    states = sortSolutions(solutions);
	
	    var state = solutions[0];
	    if (state && state.handlers) {
	      if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {
	        normalizedPath = normalizedPath + '/';
	      }
	
	      return findHandler(state, normalizedPath, queryParams);
	    }
	  };
	
	  return RouteRecognizer;
	}();
	
	var RecognizeResults = function RecognizeResults(queryParams) {
	  _classCallCheck(this, RecognizeResults);
	
	  this.splice = Array.prototype.splice;
	  this.slice = Array.prototype.slice;
	  this.push = Array.prototype.push;
	  this.length = 0;
	  this.queryParams = queryParams || {};
	};
	
	function parse(route, names, types, caseSensitive) {
	  var normalizedRoute = route;
	  if (route.charAt(0) === '/') {
	    normalizedRoute = route.substr(1);
	  }
	
	  var results = [];
	
	  var splitRoute = normalizedRoute.split('/');
	  for (var i = 0, ii = splitRoute.length; i < ii; ++i) {
	    var segment = splitRoute[i];
	    var match = segment.match(/^:([^\/]+)$/);
	    if (match) {
	      results.push(new DynamicSegment(match[1]));
	      names.push(match[1]);
	      types.dynamics++;
	      continue;
	    }
	
	    match = segment.match(/^\*([^\/]+)$/);
	    if (match) {
	      results.push(new StarSegment(match[1]));
	      names.push(match[1]);
	      types.stars++;
	    } else if (segment === '') {
	      results.push(new EpsilonSegment());
	    } else {
	      results.push(new StaticSegment(segment, caseSensitive));
	      types.statics++;
	    }
	  }
	
	  return results;
	}
	
	function sortSolutions(states) {
	  return states.sort(function (a, b) {
	    if (a.types.stars !== b.types.stars) {
	      return a.types.stars - b.types.stars;
	    }
	
	    if (a.types.stars) {
	      if (a.types.statics !== b.types.statics) {
	        return b.types.statics - a.types.statics;
	      }
	      if (a.types.dynamics !== b.types.dynamics) {
	        return b.types.dynamics - a.types.dynamics;
	      }
	    }
	
	    if (a.types.dynamics !== b.types.dynamics) {
	      return a.types.dynamics - b.types.dynamics;
	    }
	
	    if (a.types.statics !== b.types.statics) {
	      return b.types.statics - a.types.statics;
	    }
	
	    return 0;
	  });
	}
	
	function recognizeChar(states, ch) {
	  var nextStates = [];
	
	  for (var i = 0, l = states.length; i < l; i++) {
	    var state = states[i];
	    nextStates.push.apply(nextStates, state.match(ch));
	  }
	
	  return nextStates;
	}
	
	function findHandler(state, path, queryParams) {
	  var handlers = state.handlers;
	  var regex = state.regex;
	  var captures = path.match(regex);
	  var currentCapture = 1;
	  var result = new RecognizeResults(queryParams);
	
	  for (var i = 0, l = handlers.length; i < l; i++) {
	    var _handler = handlers[i];
	    var _names = _handler.names;
	    var _params = {};
	
	    for (var j = 0, m = _names.length; j < m; j++) {
	      _params[_names[j]] = captures[currentCapture++];
	    }
	
	    result.push({ handler: _handler.handler, params: _params, isDynamic: !!_names.length });
	  }
	
	  return result;
	}
	
	function addSegment(currentState, segment) {
	  var state = currentState;
	  segment.eachChar(function (ch) {
	    state = state.put(ch);
	  });
	
	  return state;
	}

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TemplatingBindingLanguage = exports.SyntaxInterpreter = exports.ChildInterpolationBinding = exports.InterpolationBinding = exports.InterpolationBindingExpression = exports.AttributeMap = undefined;
	
	var _class, _temp, _dec, _class2, _class3, _temp2, _class4, _temp3;
	
	exports.configure = configure;
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AttributeMap = exports.AttributeMap = (_temp = _class = function () {
	  function AttributeMap(svg) {
	    _classCallCheck(this, AttributeMap);
	
	    this.elements = Object.create(null);
	    this.allElements = Object.create(null);
	
	    this.svg = svg;
	
	    this.registerUniversal('accesskey', 'accessKey');
	    this.registerUniversal('contenteditable', 'contentEditable');
	    this.registerUniversal('tabindex', 'tabIndex');
	    this.registerUniversal('textcontent', 'textContent');
	    this.registerUniversal('innerhtml', 'innerHTML');
	    this.registerUniversal('scrolltop', 'scrollTop');
	    this.registerUniversal('scrollleft', 'scrollLeft');
	    this.registerUniversal('readonly', 'readOnly');
	
	    this.register('label', 'for', 'htmlFor');
	
	    this.register('input', 'maxlength', 'maxLength');
	    this.register('input', 'minlength', 'minLength');
	    this.register('input', 'formaction', 'formAction');
	    this.register('input', 'formenctype', 'formEncType');
	    this.register('input', 'formmethod', 'formMethod');
	    this.register('input', 'formnovalidate', 'formNoValidate');
	    this.register('input', 'formtarget', 'formTarget');
	
	    this.register('td', 'rowspan', 'rowSpan');
	    this.register('td', 'colspan', 'colSpan');
	    this.register('th', 'rowspan', 'rowSpan');
	    this.register('th', 'colspan', 'colSpan');
	  }
	
	  AttributeMap.prototype.register = function register(elementName, attributeName, propertyName) {
	    elementName = elementName.toLowerCase();
	    attributeName = attributeName.toLowerCase();
	    var element = this.elements[elementName] = this.elements[elementName] || Object.create(null);
	    element[attributeName] = propertyName;
	  };
	
	  AttributeMap.prototype.registerUniversal = function registerUniversal(attributeName, propertyName) {
	    attributeName = attributeName.toLowerCase();
	    this.allElements[attributeName] = propertyName;
	  };
	
	  AttributeMap.prototype.map = function map(elementName, attributeName) {
	    if (this.svg.isStandardSvgAttribute(elementName, attributeName)) {
	      return attributeName;
	    }
	    elementName = elementName.toLowerCase();
	    attributeName = attributeName.toLowerCase();
	    var element = this.elements[elementName];
	    if (element !== undefined && attributeName in element) {
	      return element[attributeName];
	    }
	    if (attributeName in this.allElements) {
	      return this.allElements[attributeName];
	    }
	
	    if (/(^data-)|(^aria-)|:/.test(attributeName)) {
	      return attributeName;
	    }
	    return (0, _aureliaBinding.camelCase)(attributeName);
	  };
	
	  return AttributeMap;
	}(), _class.inject = [_aureliaBinding.SVGAnalyzer], _temp);
	
	var InterpolationBindingExpression = exports.InterpolationBindingExpression = function () {
	  function InterpolationBindingExpression(observerLocator, targetProperty, parts, mode, lookupFunctions, attribute) {
	    _classCallCheck(this, InterpolationBindingExpression);
	
	    this.observerLocator = observerLocator;
	    this.targetProperty = targetProperty;
	    this.parts = parts;
	    this.mode = mode;
	    this.lookupFunctions = lookupFunctions;
	    this.attribute = this.attrToRemove = attribute;
	    this.discrete = false;
	  }
	
	  InterpolationBindingExpression.prototype.createBinding = function createBinding(target) {
	    if (this.parts.length === 3) {
	      return new ChildInterpolationBinding(target, this.observerLocator, this.parts[1], this.mode, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
	    }
	    return new InterpolationBinding(this.observerLocator, this.parts, target, this.targetProperty, this.mode, this.lookupFunctions);
	  };
	
	  return InterpolationBindingExpression;
	}();
	
	function validateTarget(target, propertyName) {
	  if (propertyName === 'style') {
	    LogManager.getLogger('templating-binding').info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');
	  } else if (target.parentElement && target.parentElement.nodeName === 'TEXTAREA' && propertyName === 'textContent') {
	    throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.');
	  }
	}
	
	var InterpolationBinding = exports.InterpolationBinding = function () {
	  function InterpolationBinding(observerLocator, parts, target, targetProperty, mode, lookupFunctions) {
	    _classCallCheck(this, InterpolationBinding);
	
	    validateTarget(target, targetProperty);
	    this.observerLocator = observerLocator;
	    this.parts = parts;
	    this.target = target;
	    this.targetProperty = targetProperty;
	    this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
	    this.mode = mode;
	    this.lookupFunctions = lookupFunctions;
	  }
	
	  InterpolationBinding.prototype.interpolate = function interpolate() {
	    if (this.isBound) {
	      var value = '';
	      var parts = this.parts;
	      for (var i = 0, ii = parts.length; i < ii; i++) {
	        value += i % 2 === 0 ? parts[i] : this['childBinding' + i].value;
	      }
	      this.targetAccessor.setValue(value, this.target, this.targetProperty);
	    }
	  };
	
	  InterpolationBinding.prototype.updateOneTimeBindings = function updateOneTimeBindings() {
	    for (var i = 1, ii = this.parts.length; i < ii; i += 2) {
	      var child = this['childBinding' + i];
	      if (child.mode === _aureliaBinding.bindingMode.oneTime) {
	        child.call();
	      }
	    }
	  };
	
	  InterpolationBinding.prototype.bind = function bind(source) {
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.source = source;
	
	    var parts = this.parts;
	    for (var i = 1, ii = parts.length; i < ii; i += 2) {
	      var binding = new ChildInterpolationBinding(this, this.observerLocator, parts[i], this.mode, this.lookupFunctions);
	      binding.bind(source);
	      this['childBinding' + i] = binding;
	    }
	
	    this.isBound = true;
	    this.interpolate();
	  };
	
	  InterpolationBinding.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    this.source = null;
	    var parts = this.parts;
	    for (var i = 1, ii = parts.length; i < ii; i += 2) {
	      var name = 'childBinding' + i;
	      this[name].unbind();
	    }
	  };
	
	  return InterpolationBinding;
	}();
	
	var ChildInterpolationBinding = exports.ChildInterpolationBinding = (_dec = (0, _aureliaBinding.connectable)(), _dec(_class2 = function () {
	  function ChildInterpolationBinding(target, observerLocator, sourceExpression, mode, lookupFunctions, targetProperty, left, right) {
	    _classCallCheck(this, ChildInterpolationBinding);
	
	    if (target instanceof InterpolationBinding) {
	      this.parent = target;
	    } else {
	      validateTarget(target, targetProperty);
	      this.target = target;
	      this.targetProperty = targetProperty;
	      this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
	    }
	    this.observerLocator = observerLocator;
	    this.sourceExpression = sourceExpression;
	    this.mode = mode;
	    this.lookupFunctions = lookupFunctions;
	    this.left = left;
	    this.right = right;
	  }
	
	  ChildInterpolationBinding.prototype.updateTarget = function updateTarget(value) {
	    value = value === null || value === undefined ? '' : value.toString();
	    if (value !== this.value) {
	      this.value = value;
	      if (this.parent) {
	        this.parent.interpolate();
	      } else {
	        this.targetAccessor.setValue(this.left + value + this.right, this.target, this.targetProperty);
	      }
	    }
	  };
	
	  ChildInterpolationBinding.prototype.call = function call() {
	    if (!this.isBound) {
	      return;
	    }
	
	    var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
	    this.updateTarget(value);
	
	    if (this.mode !== _aureliaBinding.bindingMode.oneTime) {
	      this._version++;
	      this.sourceExpression.connect(this, this.source);
	      if (value instanceof Array) {
	        this.observeArray(value);
	      }
	      this.unobserve(false);
	    }
	  };
	
	  ChildInterpolationBinding.prototype.bind = function bind(source) {
	    if (this.isBound) {
	      if (this.source === source) {
	        return;
	      }
	      this.unbind();
	    }
	    this.isBound = true;
	    this.source = source;
	
	    var sourceExpression = this.sourceExpression;
	    if (sourceExpression.bind) {
	      sourceExpression.bind(this, source, this.lookupFunctions);
	    }
	
	    var value = sourceExpression.evaluate(source, this.lookupFunctions);
	    this.updateTarget(value);
	
	    if (this.mode === _aureliaBinding.bindingMode.oneWay) {
	      (0, _aureliaBinding.enqueueBindingConnect)(this);
	    }
	  };
	
	  ChildInterpolationBinding.prototype.unbind = function unbind() {
	    if (!this.isBound) {
	      return;
	    }
	    this.isBound = false;
	    var sourceExpression = this.sourceExpression;
	    if (sourceExpression.unbind) {
	      sourceExpression.unbind(this, this.source);
	    }
	    this.source = null;
	    this.unobserve(true);
	  };
	
	  ChildInterpolationBinding.prototype.connect = function connect(evaluate) {
	    if (!this.isBound) {
	      return;
	    }
	    if (evaluate) {
	      var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
	      this.updateTarget(value);
	    }
	    this.sourceExpression.connect(this, this.source);
	    if (this.value instanceof Array) {
	      this.observeArray(this.value);
	    }
	  };
	
	  return ChildInterpolationBinding;
	}()) || _class2);
	var SyntaxInterpreter = exports.SyntaxInterpreter = (_temp2 = _class3 = function () {
	  function SyntaxInterpreter(parser, observerLocator, eventManager, attributeMap) {
	    _classCallCheck(this, SyntaxInterpreter);
	
	    this.parser = parser;
	    this.observerLocator = observerLocator;
	    this.eventManager = eventManager;
	    this.attributeMap = attributeMap;
	  }
	
	  SyntaxInterpreter.prototype.interpret = function interpret(resources, element, info, existingInstruction, context) {
	    if (info.command in this) {
	      return this[info.command](resources, element, info, existingInstruction, context);
	    }
	
	    return this.handleUnknownCommand(resources, element, info, existingInstruction, context);
	  };
	
	  SyntaxInterpreter.prototype.handleUnknownCommand = function handleUnknownCommand(resources, element, info, existingInstruction, context) {
	    LogManager.getLogger('templating-binding').warn('Unknown binding command.', info);
	    return existingInstruction;
	  };
	
	  SyntaxInterpreter.prototype.determineDefaultBindingMode = function determineDefaultBindingMode(element, attrName, context) {
	    var tagName = element.tagName.toLowerCase();
	
	    if (tagName === 'input' && (attrName === 'value' || attrName === 'files') && element.type !== 'checkbox' && element.type !== 'radio' || tagName === 'input' && attrName === 'checked' && (element.type === 'checkbox' || element.type === 'radio') || (tagName === 'textarea' || tagName === 'select') && attrName === 'value' || (attrName === 'textcontent' || attrName === 'innerhtml') && element.contentEditable === 'true' || attrName === 'scrolltop' || attrName === 'scrollleft') {
	      return _aureliaBinding.bindingMode.twoWay;
	    }
	
	    if (context && attrName in context.attributes && context.attributes[attrName] && context.attributes[attrName].defaultBindingMode >= _aureliaBinding.bindingMode.oneTime) {
	      return context.attributes[attrName].defaultBindingMode;
	    }
	
	    return _aureliaBinding.bindingMode.oneWay;
	  };
	
	  SyntaxInterpreter.prototype.bind = function bind(resources, element, info, existingInstruction, context) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), info.defaultBindingMode || this.determineDefaultBindingMode(element, info.attrName, context), resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype.trigger = function trigger(resources, element, info) {
	    return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), false, true, resources.lookupFunctions);
	  };
	
	  SyntaxInterpreter.prototype.delegate = function delegate(resources, element, info) {
	    return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), true, true, resources.lookupFunctions);
	  };
	
	  SyntaxInterpreter.prototype.call = function call(resources, element, info, existingInstruction) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    instruction.attributes[info.attrName] = new _aureliaBinding.CallExpression(this.observerLocator, info.attrName, this.parser.parse(info.attrValue), resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype.options = function options(resources, element, info, existingInstruction, context) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	    var attrValue = info.attrValue;
	    var language = this.language;
	    var name = null;
	    var target = '';
	    var current = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var inString = false;
	    var inEscape = false;
	
	    for (i = 0, ii = attrValue.length; i < ii; ++i) {
	      current = attrValue[i];
	
	      if (current === ';' && !inString) {
	        info = language.inspectAttribute(resources, '?', name, target.trim());
	        language.createAttributeInstruction(resources, element, info, instruction, context);
	
	        if (!instruction.attributes[info.attrName]) {
	          instruction.attributes[info.attrName] = info.attrValue;
	        }
	
	        target = '';
	        name = null;
	      } else if (current === ':' && name === null) {
	        name = target.trim();
	        target = '';
	      } else if (current === '\\') {
	        target += current;
	        inEscape = true;
	        continue;
	      } else {
	        target += current;
	
	        if (name !== null && inEscape === false && current === '\'') {
	          inString = !inString;
	        }
	      }
	
	      inEscape = false;
	    }
	
	    if (name !== null) {
	      info = language.inspectAttribute(resources, '?', name, target.trim());
	      language.createAttributeInstruction(resources, element, info, instruction, context);
	
	      if (!instruction.attributes[info.attrName]) {
	        instruction.attributes[info.attrName] = info.attrValue;
	      }
	    }
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype['for'] = function _for(resources, element, info, existingInstruction) {
	    var parts = void 0;
	    var keyValue = void 0;
	    var instruction = void 0;
	    var attrValue = void 0;
	    var isDestructuring = void 0;
	
	    attrValue = info.attrValue;
	    isDestructuring = attrValue.match(/^ *[[].+[\]]/);
	    parts = isDestructuring ? attrValue.split('of ') : attrValue.split(' of ');
	
	    if (parts.length !== 2) {
	      throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');
	    }
	
	    instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    if (isDestructuring) {
	      keyValue = parts[0].replace(/[[\]]/g, '').replace(/,/g, ' ').replace(/\s+/g, ' ').trim().split(' ');
	      instruction.attributes.key = keyValue[0];
	      instruction.attributes.value = keyValue[1];
	    } else {
	      instruction.attributes.local = parts[0];
	    }
	
	    instruction.attributes.items = new _aureliaBinding.BindingExpression(this.observerLocator, 'items', this.parser.parse(parts[1]), _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype['two-way'] = function twoWay(resources, element, info, existingInstruction) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.twoWay, resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype['one-way'] = function oneWay(resources, element, info, existingInstruction) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  SyntaxInterpreter.prototype['one-time'] = function oneTime(resources, element, info, existingInstruction) {
	    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
	
	    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.oneTime, resources.lookupFunctions);
	
	    return instruction;
	  };
	
	  return SyntaxInterpreter;
	}(), _class3.inject = [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, _aureliaBinding.EventManager, AttributeMap], _temp2);
	
	var info = {};
	
	var TemplatingBindingLanguage = exports.TemplatingBindingLanguage = (_temp3 = _class4 = function (_BindingLanguage) {
	  _inherits(TemplatingBindingLanguage, _BindingLanguage);
	
	  function TemplatingBindingLanguage(parser, observerLocator, syntaxInterpreter, attributeMap) {
	    _classCallCheck(this, TemplatingBindingLanguage);
	
	    var _this = _possibleConstructorReturn(this, _BindingLanguage.call(this));
	
	    _this.parser = parser;
	    _this.observerLocator = observerLocator;
	    _this.syntaxInterpreter = syntaxInterpreter;
	    _this.emptyStringExpression = _this.parser.parse('\'\'');
	    syntaxInterpreter.language = _this;
	    _this.attributeMap = attributeMap;
	    return _this;
	  }
	
	  TemplatingBindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, elementName, attrName, attrValue) {
	    var parts = attrName.split('.');
	
	    info.defaultBindingMode = null;
	
	    if (parts.length === 2) {
	      info.attrName = parts[0].trim();
	      info.attrValue = attrValue;
	      info.command = parts[1].trim();
	
	      if (info.command === 'ref') {
	        info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), info.attrName);
	        info.command = null;
	        info.attrName = 'ref';
	      } else {
	        info.expression = null;
	      }
	    } else if (attrName === 'ref') {
	      info.attrName = attrName;
	      info.attrValue = attrValue;
	      info.command = null;
	      info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), 'element');
	    } else {
	      info.attrName = attrName;
	      info.attrValue = attrValue;
	      info.command = null;
	      var interpolationParts = this.parseInterpolation(resources, attrValue);
	      if (interpolationParts === null) {
	        info.expression = null;
	      } else {
	        info.expression = new InterpolationBindingExpression(this.observerLocator, this.attributeMap.map(elementName, attrName), interpolationParts, _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions, attrName);
	      }
	    }
	
	    return info;
	  };
	
	  TemplatingBindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, theInfo, existingInstruction, context) {
	    var instruction = void 0;
	
	    if (theInfo.expression) {
	      if (theInfo.attrName === 'ref') {
	        return theInfo.expression;
	      }
	
	      instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(theInfo.attrName);
	      instruction.attributes[theInfo.attrName] = theInfo.expression;
	    } else if (theInfo.command) {
	      instruction = this.syntaxInterpreter.interpret(resources, element, theInfo, existingInstruction, context);
	    }
	
	    return instruction;
	  };
	
	  TemplatingBindingLanguage.prototype.inspectTextContent = function inspectTextContent(resources, value) {
	    var parts = this.parseInterpolation(resources, value);
	    if (parts === null) {
	      return null;
	    }
	    return new InterpolationBindingExpression(this.observerLocator, 'textContent', parts, _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions, 'textContent');
	  };
	
	  TemplatingBindingLanguage.prototype.parseInterpolation = function parseInterpolation(resources, value) {
	    var i = value.indexOf('${', 0);
	    var ii = value.length;
	    var char = void 0;
	    var pos = 0;
	    var open = 0;
	    var quote = null;
	    var interpolationStart = void 0;
	    var parts = void 0;
	    var partIndex = 0;
	
	    while (i >= 0 && i < ii - 2) {
	      open = 1;
	      interpolationStart = i;
	      i += 2;
	
	      do {
	        char = value[i];
	        i++;
	
	        if (char === "'" || char === '"') {
	          if (quote === null) {
	            quote = char;
	          } else if (quote === char) {
	            quote = null;
	          }
	          continue;
	        }
	
	        if (char === '\\') {
	          i++;
	          continue;
	        }
	
	        if (quote !== null) {
	          continue;
	        }
	
	        if (char === '{') {
	          open++;
	        } else if (char === '}') {
	          open--;
	        }
	      } while (open > 0 && i < ii);
	
	      if (open === 0) {
	        parts = parts || [];
	        if (value[interpolationStart - 1] === '\\' && value[interpolationStart - 2] !== '\\') {
	          parts[partIndex] = value.substring(pos, interpolationStart - 1) + value.substring(interpolationStart, i);
	          partIndex++;
	          parts[partIndex] = this.emptyStringExpression;
	          partIndex++;
	        } else {
	          parts[partIndex] = value.substring(pos, interpolationStart);
	          partIndex++;
	          parts[partIndex] = this.parser.parse(value.substring(interpolationStart + 2, i - 1));
	          partIndex++;
	        }
	        pos = i;
	        i = value.indexOf('${', i);
	      } else {
	        break;
	      }
	    }
	
	    if (partIndex === 0) {
	      return null;
	    }
	
	    parts[partIndex] = value.substr(pos);
	    return parts;
	  };
	
	  return TemplatingBindingLanguage;
	}(_aureliaTemplating.BindingLanguage), _class4.inject = [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, SyntaxInterpreter, AttributeMap], _temp3);
	function configure(config) {
	  config.container.registerSingleton(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
	  config.container.registerAlias(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
	}

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.viewsRequireLifecycle = exports.unwrapExpression = exports.updateOneTimeBinding = exports.isOneTime = exports.getItemsSourceExpression = exports.updateOverrideContext = exports.createFullOverrideContext = exports.NumberRepeatStrategy = exports.SetRepeatStrategy = exports.MapRepeatStrategy = exports.ArrayRepeatStrategy = exports.NullRepeatStrategy = exports.RepeatStrategyLocator = exports.AbstractRepeater = exports.UpdateTriggerBindingBehavior = exports.BindingSignaler = exports.SignalBindingBehavior = exports.DebounceBindingBehavior = exports.ThrottleBindingBehavior = exports.TwoWayBindingBehavior = exports.OneWayBindingBehavior = exports.OneTimeBindingBehavior = exports.configure = exports.ViewSpy = exports.CompileSpy = exports.Focus = exports.Replaceable = exports.SanitizeHTMLValueConverter = exports.HTMLSanitizer = exports.Hide = exports.Show = exports.Repeat = exports.With = exports.If = exports.Compose = undefined;
	
	var _compose = __webpack_require__(37);
	
	var _if = __webpack_require__(38);
	
	var _with = __webpack_require__(39);
	
	var _repeat = __webpack_require__(40);
	
	var _show = __webpack_require__(50);
	
	var _hide = __webpack_require__(51);
	
	var _sanitizeHtml = __webpack_require__(52);
	
	var _replaceable = __webpack_require__(54);
	
	var _focus = __webpack_require__(55);
	
	var _compileSpy = __webpack_require__(56);
	
	var _viewSpy = __webpack_require__(57);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _cssResource = __webpack_require__(58);
	
	var _aureliaPal = __webpack_require__(4);
	
	var _htmlSanitizer = __webpack_require__(53);
	
	var _bindingModeBehaviors = __webpack_require__(59);
	
	var _throttleBindingBehavior = __webpack_require__(60);
	
	var _debounceBindingBehavior = __webpack_require__(61);
	
	var _signalBindingBehavior = __webpack_require__(62);
	
	var _bindingSignaler = __webpack_require__(63);
	
	var _updateTriggerBindingBehavior = __webpack_require__(64);
	
	var _abstractRepeater = __webpack_require__(49);
	
	var _repeatStrategyLocator = __webpack_require__(41);
	
	var _htmlResourcePlugin = __webpack_require__(65);
	
	var _nullRepeatStrategy = __webpack_require__(42);
	
	var _arrayRepeatStrategy = __webpack_require__(43);
	
	var _mapRepeatStrategy = __webpack_require__(45);
	
	var _setRepeatStrategy = __webpack_require__(46);
	
	var _numberRepeatStrategy = __webpack_require__(47);
	
	var _repeatUtilities = __webpack_require__(44);
	
	var _analyzeViewFactory = __webpack_require__(48);
	
	function configure(config) {
	  if (_aureliaPal.FEATURE.shadowDOM) {
	    _aureliaPal.DOM.injectStyles('body /deep/ .aurelia-hide { display:none !important; }');
	  } else {
	    _aureliaPal.DOM.injectStyles('.aurelia-hide { display:none !important; }');
	  }
	
	  config.globalResources('./compose', './if', './with', './repeat', './show', './hide', './replaceable', './sanitize-html', './focus', './compile-spy', './view-spy', './binding-mode-behaviors', './throttle-binding-behavior', './debounce-binding-behavior', './signal-binding-behavior', './update-trigger-binding-behavior');
	
	  (0, _htmlResourcePlugin.configure)(config);
	
	  var viewEngine = config.container.get(_aureliaTemplating.ViewEngine);
	  viewEngine.addResourcePlugin('.css', {
	    'fetch': function fetch(address) {
	      var _ref;
	
	      return _ref = {}, _ref[address] = (0, _cssResource._createCSSResource)(address), _ref;
	    }
	  });
	}
	
	exports.Compose = _compose.Compose;
	exports.If = _if.If;
	exports.With = _with.With;
	exports.Repeat = _repeat.Repeat;
	exports.Show = _show.Show;
	exports.Hide = _hide.Hide;
	exports.HTMLSanitizer = _htmlSanitizer.HTMLSanitizer;
	exports.SanitizeHTMLValueConverter = _sanitizeHtml.SanitizeHTMLValueConverter;
	exports.Replaceable = _replaceable.Replaceable;
	exports.Focus = _focus.Focus;
	exports.CompileSpy = _compileSpy.CompileSpy;
	exports.ViewSpy = _viewSpy.ViewSpy;
	exports.configure = configure;
	exports.OneTimeBindingBehavior = _bindingModeBehaviors.OneTimeBindingBehavior;
	exports.OneWayBindingBehavior = _bindingModeBehaviors.OneWayBindingBehavior;
	exports.TwoWayBindingBehavior = _bindingModeBehaviors.TwoWayBindingBehavior;
	exports.ThrottleBindingBehavior = _throttleBindingBehavior.ThrottleBindingBehavior;
	exports.DebounceBindingBehavior = _debounceBindingBehavior.DebounceBindingBehavior;
	exports.SignalBindingBehavior = _signalBindingBehavior.SignalBindingBehavior;
	exports.BindingSignaler = _bindingSignaler.BindingSignaler;
	exports.UpdateTriggerBindingBehavior = _updateTriggerBindingBehavior.UpdateTriggerBindingBehavior;
	exports.AbstractRepeater = _abstractRepeater.AbstractRepeater;
	exports.RepeatStrategyLocator = _repeatStrategyLocator.RepeatStrategyLocator;
	exports.NullRepeatStrategy = _nullRepeatStrategy.NullRepeatStrategy;
	exports.ArrayRepeatStrategy = _arrayRepeatStrategy.ArrayRepeatStrategy;
	exports.MapRepeatStrategy = _mapRepeatStrategy.MapRepeatStrategy;
	exports.SetRepeatStrategy = _setRepeatStrategy.SetRepeatStrategy;
	exports.NumberRepeatStrategy = _numberRepeatStrategy.NumberRepeatStrategy;
	exports.createFullOverrideContext = _repeatUtilities.createFullOverrideContext;
	exports.updateOverrideContext = _repeatUtilities.updateOverrideContext;
	exports.getItemsSourceExpression = _repeatUtilities.getItemsSourceExpression;
	exports.isOneTime = _repeatUtilities.isOneTime;
	exports.updateOneTimeBinding = _repeatUtilities.updateOneTimeBinding;
	exports.unwrapExpression = _repeatUtilities.unwrapExpression;
	exports.viewsRequireLifecycle = _analyzeViewFactory.viewsRequireLifecycle;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Compose = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTaskQueue = __webpack_require__(21);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var Compose = exports.Compose = (_dec = (0, _aureliaTemplating.customElement)('compose'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaDependencyInjection.Container, _aureliaTemplating.CompositionEngine, _aureliaTemplating.ViewSlot, _aureliaTemplating.ViewResources, _aureliaTaskQueue.TaskQueue), _dec(_class = (0, _aureliaTemplating.noView)(_class = _dec2(_class = (_class2 = function () {
	  function Compose(element, container, compositionEngine, viewSlot, viewResources, taskQueue) {
	    _classCallCheck(this, Compose);
	
	    _initDefineProp(this, 'model', _descriptor, this);
	
	    _initDefineProp(this, 'view', _descriptor2, this);
	
	    _initDefineProp(this, 'viewModel', _descriptor3, this);
	
	    this.element = element;
	    this.container = container;
	    this.compositionEngine = compositionEngine;
	    this.viewSlot = viewSlot;
	    this.viewResources = viewResources;
	    this.taskQueue = taskQueue;
	    this.currentController = null;
	    this.currentViewModel = null;
	  }
	
	  Compose.prototype.created = function created(owningView) {
	    this.owningView = owningView;
	  };
	
	  Compose.prototype.bind = function bind(bindingContext, overrideContext) {
	    this.bindingContext = bindingContext;
	    this.overrideContext = overrideContext;
	    processInstruction(this, createInstruction(this, {
	      view: this.view,
	      viewModel: this.viewModel,
	      model: this.model
	    }));
	  };
	
	  Compose.prototype.unbind = function unbind(bindingContext, overrideContext) {
	    this.bindingContext = null;
	    this.overrideContext = null;
	    var returnToCache = true;
	    var skipAnimation = true;
	    this.viewSlot.removeAll(returnToCache, skipAnimation);
	  };
	
	  Compose.prototype.modelChanged = function modelChanged(newValue, oldValue) {
	    var _this = this;
	
	    if (this.currentInstruction) {
	      this.currentInstruction.model = newValue;
	      return;
	    }
	
	    this.taskQueue.queueMicroTask(function () {
	      if (_this.currentInstruction) {
	        _this.currentInstruction.model = newValue;
	        return;
	      }
	
	      var vm = _this.currentViewModel;
	
	      if (vm && typeof vm.activate === 'function') {
	        vm.activate(newValue);
	      }
	    });
	  };
	
	  Compose.prototype.viewChanged = function viewChanged(newValue, oldValue) {
	    var _this2 = this;
	
	    var instruction = createInstruction(this, {
	      view: newValue,
	      viewModel: this.currentViewModel || this.viewModel,
	      model: this.model
	    });
	
	    if (this.currentInstruction) {
	      this.currentInstruction = instruction;
	      return;
	    }
	
	    this.currentInstruction = instruction;
	    this.taskQueue.queueMicroTask(function () {
	      return processInstruction(_this2, _this2.currentInstruction);
	    });
	  };
	
	  Compose.prototype.viewModelChanged = function viewModelChanged(newValue, oldValue) {
	    var _this3 = this;
	
	    var instruction = createInstruction(this, {
	      viewModel: newValue,
	      view: this.view,
	      model: this.model
	    });
	
	    if (this.currentInstruction) {
	      this.currentInstruction = instruction;
	      return;
	    }
	
	    this.currentInstruction = instruction;
	    this.taskQueue.queueMicroTask(function () {
	      return processInstruction(_this3, _this3.currentInstruction);
	    });
	  };
	
	  return Compose;
	}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'model', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'view', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'viewModel', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class) || _class) || _class);
	
	
	function createInstruction(composer, instruction) {
	  return Object.assign(instruction, {
	    bindingContext: composer.bindingContext,
	    overrideContext: composer.overrideContext,
	    owningView: composer.owningView,
	    container: composer.container,
	    viewSlot: composer.viewSlot,
	    viewResources: composer.viewResources,
	    currentController: composer.currentController,
	    host: composer.element
	  });
	}
	
	function processInstruction(composer, instruction) {
	  composer.currentInstruction = null;
	  composer.compositionEngine.compose(instruction).then(function (controller) {
	    composer.currentController = controller;
	    composer.currentViewModel = controller ? controller.viewModel : null;
	  });
	}

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.If = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var If = exports.If = (_dec = (0, _aureliaTemplating.customAttribute)('if'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function () {
	  function If(viewFactory, viewSlot) {
	    _classCallCheck(this, If);
	
	    this.viewFactory = viewFactory;
	    this.viewSlot = viewSlot;
	    this.showing = false;
	    this.view = null;
	    this.bindingContext = null;
	    this.overrideContext = null;
	  }
	
	  If.prototype.bind = function bind(bindingContext, overrideContext) {
	    this.bindingContext = bindingContext;
	    this.overrideContext = overrideContext;
	    this.valueChanged(this.value);
	  };
	
	  If.prototype.valueChanged = function valueChanged(newValue) {
	    var _this = this;
	
	    if (this.__queuedChanges) {
	      this.__queuedChanges.push(newValue);
	      return;
	    }
	
	    var maybePromise = this._runValueChanged(newValue);
	    if (maybePromise instanceof Promise) {
	      (function () {
	        var queuedChanges = _this.__queuedChanges = [];
	
	        var runQueuedChanges = function runQueuedChanges() {
	          if (!queuedChanges.length) {
	            _this.__queuedChanges = undefined;
	            return;
	          }
	
	          var nextPromise = _this._runValueChanged(queuedChanges.shift()) || Promise.resolve();
	          nextPromise.then(runQueuedChanges);
	        };
	
	        maybePromise.then(runQueuedChanges);
	      })();
	    }
	  };
	
	  If.prototype._runValueChanged = function _runValueChanged(newValue) {
	    var _this2 = this;
	
	    if (!newValue) {
	      var viewOrPromise = void 0;
	      if (this.view !== null && this.showing) {
	        viewOrPromise = this.viewSlot.remove(this.view);
	        if (viewOrPromise instanceof Promise) {
	          viewOrPromise.then(function () {
	            return _this2.view.unbind();
	          });
	        } else {
	          this.view.unbind();
	        }
	      }
	
	      this.showing = false;
	      return viewOrPromise;
	    }
	
	    if (this.view === null) {
	      this.view = this.viewFactory.create();
	    }
	
	    if (!this.view.isBound) {
	      this.view.bind(this.bindingContext, this.overrideContext);
	    }
	
	    if (!this.showing) {
	      this.showing = true;
	      return this.viewSlot.add(this.view);
	    }
	  };
	
	  If.prototype.unbind = function unbind() {
	    if (this.view === null) {
	      return;
	    }
	
	    this.view.unbind();
	
	    if (!this.viewFactory.isCaching) {
	      return;
	    }
	
	    if (this.showing) {
	      this.showing = false;
	      this.viewSlot.remove(this.view, true, true);
	    }
	    this.view.returnToCache();
	    this.view = null;
	  };
	
	  return If;
	}()) || _class) || _class) || _class);

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.With = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var With = exports.With = (_dec = (0, _aureliaTemplating.customAttribute)('with'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function () {
	  function With(viewFactory, viewSlot) {
	    _classCallCheck(this, With);
	
	    this.viewFactory = viewFactory;
	    this.viewSlot = viewSlot;
	    this.parentOverrideContext = null;
	    this.view = null;
	  }
	
	  With.prototype.bind = function bind(bindingContext, overrideContext) {
	    this.parentOverrideContext = overrideContext;
	    this.valueChanged(this.value);
	  };
	
	  With.prototype.valueChanged = function valueChanged(newValue) {
	    var overrideContext = (0, _aureliaBinding.createOverrideContext)(newValue, this.parentOverrideContext);
	    if (!this.view) {
	      this.view = this.viewFactory.create();
	      this.view.bind(newValue, overrideContext);
	      this.viewSlot.add(this.view);
	    } else {
	      this.view.bind(newValue, overrideContext);
	    }
	  };
	
	  With.prototype.unbind = function unbind() {
	    this.parentOverrideContext = null;
	
	    if (this.view) {
	      this.view.unbind();
	    }
	  };
	
	  return With;
	}()) || _class) || _class) || _class);

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Repeat = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _repeatStrategyLocator = __webpack_require__(41);
	
	var _repeatUtilities = __webpack_require__(44);
	
	var _analyzeViewFactory = __webpack_require__(48);
	
	var _abstractRepeater = __webpack_require__(49);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var Repeat = exports.Repeat = (_dec = (0, _aureliaTemplating.customAttribute)('repeat'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.TargetInstruction, _aureliaTemplating.ViewSlot, _aureliaTemplating.ViewResources, _aureliaBinding.ObserverLocator, _repeatStrategyLocator.RepeatStrategyLocator), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = (_class2 = function (_AbstractRepeater) {
	  _inherits(Repeat, _AbstractRepeater);
	
	  function Repeat(viewFactory, instruction, viewSlot, viewResources, observerLocator, strategyLocator) {
	    _classCallCheck(this, Repeat);
	
	    var _this = _possibleConstructorReturn(this, _AbstractRepeater.call(this, {
	      local: 'item',
	      viewsRequireLifecycle: (0, _analyzeViewFactory.viewsRequireLifecycle)(viewFactory)
	    }));
	
	    _initDefineProp(_this, 'items', _descriptor, _this);
	
	    _initDefineProp(_this, 'local', _descriptor2, _this);
	
	    _initDefineProp(_this, 'key', _descriptor3, _this);
	
	    _initDefineProp(_this, 'value', _descriptor4, _this);
	
	    _this.viewFactory = viewFactory;
	    _this.instruction = instruction;
	    _this.viewSlot = viewSlot;
	    _this.lookupFunctions = viewResources.lookupFunctions;
	    _this.observerLocator = observerLocator;
	    _this.key = 'key';
	    _this.value = 'value';
	    _this.strategyLocator = strategyLocator;
	    _this.ignoreMutation = false;
	    _this.sourceExpression = (0, _repeatUtilities.getItemsSourceExpression)(_this.instruction, 'repeat.for');
	    _this.isOneTime = (0, _repeatUtilities.isOneTime)(_this.sourceExpression);
	    _this.viewsRequireLifecycle = (0, _analyzeViewFactory.viewsRequireLifecycle)(viewFactory);
	    return _this;
	  }
	
	  Repeat.prototype.call = function call(context, changes) {
	    this[context](this.items, changes);
	  };
	
	  Repeat.prototype.bind = function bind(bindingContext, overrideContext) {
	    this.scope = { bindingContext: bindingContext, overrideContext: overrideContext };
	    this.matcherBinding = this._captureAndRemoveMatcherBinding();
	    this.itemsChanged();
	  };
	
	  Repeat.prototype.unbind = function unbind() {
	    this.scope = null;
	    this.items = null;
	    this.matcherBinding = null;
	    this.viewSlot.removeAll(true);
	    this._unsubscribeCollection();
	  };
	
	  Repeat.prototype._unsubscribeCollection = function _unsubscribeCollection() {
	    if (this.collectionObserver) {
	      this.collectionObserver.unsubscribe(this.callContext, this);
	      this.collectionObserver = null;
	      this.callContext = null;
	    }
	  };
	
	  Repeat.prototype.itemsChanged = function itemsChanged() {
	    this._unsubscribeCollection();
	
	    if (!this.scope) {
	      return;
	    }
	
	    var items = this.items;
	    this.strategy = this.strategyLocator.getStrategy(items);
	    if (!this.strategy) {
	      throw new Error('Value for \'' + this.sourceExpression + '\' is non-repeatable');
	    }
	
	    if (!this.isOneTime && !this._observeInnerCollection()) {
	      this._observeCollection();
	    }
	    this.strategy.instanceChanged(this, items);
	  };
	
	  Repeat.prototype._getInnerCollection = function _getInnerCollection() {
	    var expression = (0, _repeatUtilities.unwrapExpression)(this.sourceExpression);
	    if (!expression) {
	      return null;
	    }
	    return expression.evaluate(this.scope, null);
	  };
	
	  Repeat.prototype.handleCollectionMutated = function handleCollectionMutated(collection, changes) {
	    if (!this.collectionObserver) {
	      return;
	    }
	    this.strategy.instanceMutated(this, collection, changes);
	  };
	
	  Repeat.prototype.handleInnerCollectionMutated = function handleInnerCollectionMutated(collection, changes) {
	    var _this2 = this;
	
	    if (!this.collectionObserver) {
	      return;
	    }
	
	    if (this.ignoreMutation) {
	      return;
	    }
	    this.ignoreMutation = true;
	    var newItems = this.sourceExpression.evaluate(this.scope, this.lookupFunctions);
	    this.observerLocator.taskQueue.queueMicroTask(function () {
	      return _this2.ignoreMutation = false;
	    });
	
	    if (newItems === this.items) {
	      this.itemsChanged();
	    } else {
	      this.items = newItems;
	    }
	  };
	
	  Repeat.prototype._observeInnerCollection = function _observeInnerCollection() {
	    var items = this._getInnerCollection();
	    var strategy = this.strategyLocator.getStrategy(items);
	    if (!strategy) {
	      return false;
	    }
	    this.collectionObserver = strategy.getCollectionObserver(this.observerLocator, items);
	    if (!this.collectionObserver) {
	      return false;
	    }
	    this.callContext = 'handleInnerCollectionMutated';
	    this.collectionObserver.subscribe(this.callContext, this);
	    return true;
	  };
	
	  Repeat.prototype._observeCollection = function _observeCollection() {
	    var items = this.items;
	    this.collectionObserver = this.strategy.getCollectionObserver(this.observerLocator, items);
	    if (this.collectionObserver) {
	      this.callContext = 'handleCollectionMutated';
	      this.collectionObserver.subscribe(this.callContext, this);
	    }
	  };
	
	  Repeat.prototype._captureAndRemoveMatcherBinding = function _captureAndRemoveMatcherBinding() {
	    if (this.viewFactory.viewFactory) {
	      var instructions = this.viewFactory.viewFactory.instructions;
	      var instructionIds = Object.keys(instructions);
	      for (var i = 0; i < instructionIds.length; i++) {
	        var expressions = instructions[instructionIds[i]].expressions;
	        if (expressions) {
	          for (var ii = 0; i < expressions.length; i++) {
	            if (expressions[ii].targetProperty === 'matcher') {
	              var matcherBinding = expressions[ii];
	              expressions.splice(ii, 1);
	              return matcherBinding;
	            }
	          }
	        }
	      }
	    }
	  };
	
	  Repeat.prototype.viewCount = function viewCount() {
	    return this.viewSlot.children.length;
	  };
	
	  Repeat.prototype.views = function views() {
	    return this.viewSlot.children;
	  };
	
	  Repeat.prototype.view = function view(index) {
	    return this.viewSlot.children[index];
	  };
	
	  Repeat.prototype.matcher = function matcher() {
	    return this.matcherBinding ? this.matcherBinding.sourceExpression.evaluate(this.scope, this.matcherBinding.lookupFunctions) : null;
	  };
	
	  Repeat.prototype.addView = function addView(bindingContext, overrideContext) {
	    var view = this.viewFactory.create();
	    view.bind(bindingContext, overrideContext);
	    this.viewSlot.add(view);
	  };
	
	  Repeat.prototype.insertView = function insertView(index, bindingContext, overrideContext) {
	    var view = this.viewFactory.create();
	    view.bind(bindingContext, overrideContext);
	    this.viewSlot.insert(index, view);
	  };
	
	  Repeat.prototype.moveView = function moveView(sourceIndex, targetIndex) {
	    this.viewSlot.move(sourceIndex, targetIndex);
	  };
	
	  Repeat.prototype.removeAllViews = function removeAllViews(returnToCache, skipAnimation) {
	    return this.viewSlot.removeAll(returnToCache, skipAnimation);
	  };
	
	  Repeat.prototype.removeViews = function removeViews(viewsToRemove, returnToCache, skipAnimation) {
	    return this.viewSlot.removeMany(viewsToRemove, returnToCache, skipAnimation);
	  };
	
	  Repeat.prototype.removeView = function removeView(index, returnToCache, skipAnimation) {
	    return this.viewSlot.removeAt(index, returnToCache, skipAnimation);
	  };
	
	  Repeat.prototype.updateBindings = function updateBindings(view) {
	    var j = view.bindings.length;
	    while (j--) {
	      (0, _repeatUtilities.updateOneTimeBinding)(view.bindings[j]);
	    }
	    j = view.controllers.length;
	    while (j--) {
	      var k = view.controllers[j].boundProperties.length;
	      while (k--) {
	        var binding = view.controllers[j].boundProperties[k].binding;
	        (0, _repeatUtilities.updateOneTimeBinding)(binding);
	      }
	    }
	  };
	
	  return Repeat;
	}(_abstractRepeater.AbstractRepeater), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'items', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'local', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'key', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'value', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class) || _class) || _class);

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RepeatStrategyLocator = undefined;
	
	var _nullRepeatStrategy = __webpack_require__(42);
	
	var _arrayRepeatStrategy = __webpack_require__(43);
	
	var _mapRepeatStrategy = __webpack_require__(45);
	
	var _setRepeatStrategy = __webpack_require__(46);
	
	var _numberRepeatStrategy = __webpack_require__(47);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RepeatStrategyLocator = exports.RepeatStrategyLocator = function () {
	  function RepeatStrategyLocator() {
	    _classCallCheck(this, RepeatStrategyLocator);
	
	    this.matchers = [];
	    this.strategies = [];
	
	    this.addStrategy(function (items) {
	      return items === null || items === undefined;
	    }, new _nullRepeatStrategy.NullRepeatStrategy());
	    this.addStrategy(function (items) {
	      return items instanceof Array;
	    }, new _arrayRepeatStrategy.ArrayRepeatStrategy());
	    this.addStrategy(function (items) {
	      return items instanceof Map;
	    }, new _mapRepeatStrategy.MapRepeatStrategy());
	    this.addStrategy(function (items) {
	      return items instanceof Set;
	    }, new _setRepeatStrategy.SetRepeatStrategy());
	    this.addStrategy(function (items) {
	      return typeof items === 'number';
	    }, new _numberRepeatStrategy.NumberRepeatStrategy());
	  }
	
	  RepeatStrategyLocator.prototype.addStrategy = function addStrategy(matcher, strategy) {
	    this.matchers.push(matcher);
	    this.strategies.push(strategy);
	  };
	
	  RepeatStrategyLocator.prototype.getStrategy = function getStrategy(items) {
	    var matchers = this.matchers;
	
	    for (var i = 0, ii = matchers.length; i < ii; ++i) {
	      if (matchers[i](items)) {
	        return this.strategies[i];
	      }
	    }
	
	    return null;
	  };
	
	  return RepeatStrategyLocator;
	}();

/***/ },
/* 42 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NullRepeatStrategy = exports.NullRepeatStrategy = function () {
	  function NullRepeatStrategy() {
	    _classCallCheck(this, NullRepeatStrategy);
	  }
	
	  NullRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
	    repeat.removeAllViews(true);
	  };
	
	  NullRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {};
	
	  return NullRepeatStrategy;
	}();

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ArrayRepeatStrategy = undefined;
	
	var _repeatUtilities = __webpack_require__(44);
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ArrayRepeatStrategy = exports.ArrayRepeatStrategy = function () {
	  function ArrayRepeatStrategy() {
	    _classCallCheck(this, ArrayRepeatStrategy);
	  }
	
	  ArrayRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
	    return observerLocator.getArrayObserver(items);
	  };
	
	  ArrayRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
	    var _this = this;
	
	    var itemsLength = items.length;
	
	    if (!items || itemsLength === 0) {
	      repeat.removeAllViews(true);
	      return;
	    }
	
	    var children = repeat.views();
	    var viewsLength = children.length;
	
	    if (viewsLength === 0) {
	      this._standardProcessInstanceChanged(repeat, items);
	      return;
	    }
	
	    if (repeat.viewsRequireLifecycle) {
	      (function () {
	        var childrenSnapshot = children.slice(0);
	        var itemNameInBindingContext = repeat.local;
	        var matcher = repeat.matcher();
	
	        var itemsPreviouslyInViews = [];
	        var viewsToRemove = [];
	
	        for (var index = 0; index < viewsLength; index++) {
	          var view = childrenSnapshot[index];
	          var oldItem = view.bindingContext[itemNameInBindingContext];
	
	          if ((0, _repeatUtilities.indexOf)(items, oldItem, matcher) === -1) {
	            viewsToRemove.push(view);
	          } else {
	            itemsPreviouslyInViews.push(oldItem);
	          }
	        }
	
	        var updateViews = void 0;
	        var removePromise = void 0;
	
	        if (itemsPreviouslyInViews.length > 0) {
	          removePromise = repeat.removeViews(viewsToRemove, true);
	          updateViews = function updateViews() {
	            for (var _index = 0; _index < itemsLength; _index++) {
	              var item = items[_index];
	              var indexOfView = (0, _repeatUtilities.indexOf)(itemsPreviouslyInViews, item, matcher, _index);
	              var _view = void 0;
	
	              if (indexOfView === -1) {
	                var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, items[_index], _index, itemsLength);
	                repeat.insertView(_index, overrideContext.bindingContext, overrideContext);
	
	                itemsPreviouslyInViews.splice(_index, 0, undefined);
	              } else if (indexOfView === _index) {
	                _view = children[indexOfView];
	                itemsPreviouslyInViews[indexOfView] = undefined;
	              } else {
	                _view = children[indexOfView];
	                repeat.moveView(indexOfView, _index);
	                itemsPreviouslyInViews.splice(indexOfView, 1);
	                itemsPreviouslyInViews.splice(_index, 0, undefined);
	              }
	
	              if (_view) {
	                (0, _repeatUtilities.updateOverrideContext)(_view.overrideContext, _index, itemsLength);
	              }
	            }
	
	            _this._inPlaceProcessItems(repeat, items);
	          };
	        } else {
	          removePromise = repeat.removeAllViews(true);
	          updateViews = function updateViews() {
	            return _this._standardProcessInstanceChanged(repeat, items);
	          };
	        }
	
	        if (removePromise instanceof Promise) {
	          removePromise.then(updateViews);
	        } else {
	          updateViews();
	        }
	      })();
	    } else {
	      this._inPlaceProcessItems(repeat, items);
	    }
	  };
	
	  ArrayRepeatStrategy.prototype._standardProcessInstanceChanged = function _standardProcessInstanceChanged(repeat, items) {
	    for (var i = 0, ii = items.length; i < ii; i++) {
	      var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, items[i], i, ii);
	      repeat.addView(overrideContext.bindingContext, overrideContext);
	    }
	  };
	
	  ArrayRepeatStrategy.prototype._inPlaceProcessItems = function _inPlaceProcessItems(repeat, items) {
	    var itemsLength = items.length;
	    var viewsLength = repeat.viewCount();
	
	    while (viewsLength > itemsLength) {
	      viewsLength--;
	      repeat.removeView(viewsLength, true);
	    }
	
	    var local = repeat.local;
	
	    for (var i = 0; i < viewsLength; i++) {
	      var view = repeat.view(i);
	      var last = i === itemsLength - 1;
	      var middle = i !== 0 && !last;
	
	      if (view.bindingContext[local] === items[i] && view.overrideContext.$middle === middle && view.overrideContext.$last === last) {
	        continue;
	      }
	
	      view.bindingContext[local] = items[i];
	      view.overrideContext.$middle = middle;
	      view.overrideContext.$last = last;
	      repeat.updateBindings(view);
	    }
	
	    for (var _i = viewsLength; _i < itemsLength; _i++) {
	      var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, items[_i], _i, itemsLength);
	      repeat.addView(overrideContext.bindingContext, overrideContext);
	    }
	  };
	
	  ArrayRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, array, splices) {
	    if (repeat.viewsRequireLifecycle) {
	      this._standardProcessInstanceMutated(repeat, array, splices);
	      return;
	    }
	    this._inPlaceProcessItems(repeat, array);
	  };
	
	  ArrayRepeatStrategy.prototype._standardProcessInstanceMutated = function _standardProcessInstanceMutated(repeat, array, splices) {
	    var _this2 = this;
	
	    if (repeat.__queuedSplices) {
	      for (var i = 0, ii = splices.length; i < ii; ++i) {
	        var _splices$i = splices[i];
	        var index = _splices$i.index;
	        var removed = _splices$i.removed;
	        var addedCount = _splices$i.addedCount;
	
	        (0, _aureliaBinding.mergeSplice)(repeat.__queuedSplices, index, removed, addedCount);
	      }
	
	      repeat.__array = array.slice(0);
	      return;
	    }
	
	    var maybePromise = this._runSplices(repeat, array.slice(0), splices);
	    if (maybePromise instanceof Promise) {
	      (function () {
	        var queuedSplices = repeat.__queuedSplices = [];
	
	        var runQueuedSplices = function runQueuedSplices() {
	          if (!queuedSplices.length) {
	            repeat.__queuedSplices = undefined;
	            repeat.__array = undefined;
	            return;
	          }
	
	          var nextPromise = _this2._runSplices(repeat, repeat.__array, queuedSplices) || Promise.resolve();
	          queuedSplices = repeat.__queuedSplices = [];
	          nextPromise.then(runQueuedSplices);
	        };
	
	        maybePromise.then(runQueuedSplices);
	      })();
	    }
	  };
	
	  ArrayRepeatStrategy.prototype._runSplices = function _runSplices(repeat, array, splices) {
	    var _this3 = this;
	
	    var removeDelta = 0;
	    var rmPromises = [];
	
	    for (var i = 0, ii = splices.length; i < ii; ++i) {
	      var splice = splices[i];
	      var removed = splice.removed;
	
	      for (var j = 0, jj = removed.length; j < jj; ++j) {
	        var viewOrPromise = repeat.removeView(splice.index + removeDelta + rmPromises.length, true);
	        if (viewOrPromise instanceof Promise) {
	          rmPromises.push(viewOrPromise);
	        }
	      }
	      removeDelta -= splice.addedCount;
	    }
	
	    if (rmPromises.length > 0) {
	      return Promise.all(rmPromises).then(function () {
	        var spliceIndexLow = _this3._handleAddedSplices(repeat, array, splices);
	        (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), spliceIndexLow);
	      });
	    }
	
	    var spliceIndexLow = this._handleAddedSplices(repeat, array, splices);
	    (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), spliceIndexLow);
	  };
	
	  ArrayRepeatStrategy.prototype._handleAddedSplices = function _handleAddedSplices(repeat, array, splices) {
	    var spliceIndex = void 0;
	    var spliceIndexLow = void 0;
	    var arrayLength = array.length;
	    for (var i = 0, ii = splices.length; i < ii; ++i) {
	      var splice = splices[i];
	      var addIndex = spliceIndex = splice.index;
	      var end = splice.index + splice.addedCount;
	
	      if (typeof spliceIndexLow === 'undefined' || spliceIndexLow === null || spliceIndexLow > splice.index) {
	        spliceIndexLow = spliceIndex;
	      }
	
	      for (; addIndex < end; ++addIndex) {
	        var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, array[addIndex], addIndex, arrayLength);
	        repeat.insertView(addIndex, overrideContext.bindingContext, overrideContext);
	      }
	    }
	
	    return spliceIndexLow;
	  };
	
	  return ArrayRepeatStrategy;
	}();

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.updateOverrideContexts = updateOverrideContexts;
	exports.createFullOverrideContext = createFullOverrideContext;
	exports.updateOverrideContext = updateOverrideContext;
	exports.getItemsSourceExpression = getItemsSourceExpression;
	exports.unwrapExpression = unwrapExpression;
	exports.isOneTime = isOneTime;
	exports.updateOneTimeBinding = updateOneTimeBinding;
	exports.indexOf = indexOf;
	
	var _aureliaBinding = __webpack_require__(20);
	
	var oneTime = _aureliaBinding.bindingMode.oneTime;
	
	function updateOverrideContexts(views, startIndex) {
	  var length = views.length;
	
	  if (startIndex > 0) {
	    startIndex = startIndex - 1;
	  }
	
	  for (; startIndex < length; ++startIndex) {
	    updateOverrideContext(views[startIndex].overrideContext, startIndex, length);
	  }
	}
	
	function createFullOverrideContext(repeat, data, index, length, key) {
	  var bindingContext = {};
	  var overrideContext = (0, _aureliaBinding.createOverrideContext)(bindingContext, repeat.scope.overrideContext);
	
	  if (typeof key !== 'undefined') {
	    bindingContext[repeat.key] = key;
	    bindingContext[repeat.value] = data;
	  } else {
	    bindingContext[repeat.local] = data;
	  }
	  updateOverrideContext(overrideContext, index, length);
	  return overrideContext;
	}
	
	function updateOverrideContext(overrideContext, index, length) {
	  var first = index === 0;
	  var last = index === length - 1;
	  var even = index % 2 === 0;
	
	  overrideContext.$index = index;
	  overrideContext.$first = first;
	  overrideContext.$last = last;
	  overrideContext.$middle = !(first || last);
	  overrideContext.$odd = !even;
	  overrideContext.$even = even;
	}
	
	function getItemsSourceExpression(instruction, attrName) {
	  return instruction.behaviorInstructions.filter(function (bi) {
	    return bi.originalAttrName === attrName;
	  })[0].attributes.items.sourceExpression;
	}
	
	function unwrapExpression(expression) {
	  var unwrapped = false;
	  while (expression instanceof _aureliaBinding.BindingBehavior) {
	    expression = expression.expression;
	  }
	  while (expression instanceof _aureliaBinding.ValueConverter) {
	    expression = expression.expression;
	    unwrapped = true;
	  }
	  return unwrapped ? expression : null;
	}
	
	function isOneTime(expression) {
	  while (expression instanceof _aureliaBinding.BindingBehavior) {
	    if (expression.name === 'oneTime') {
	      return true;
	    }
	    expression = expression.expression;
	  }
	  return false;
	}
	
	function updateOneTimeBinding(binding) {
	  if (binding.call && binding.mode === oneTime) {
	    binding.call(_aureliaBinding.sourceContext);
	  } else if (binding.updateOneTimeBindings) {
	    binding.updateOneTimeBindings();
	  }
	}
	
	function indexOf(array, item, matcher, startIndex) {
	  if (!matcher) {
	    return array.indexOf(item);
	  }
	  var length = array.length;
	  for (var index = startIndex || 0; index < length; index++) {
	    if (matcher(array[index], item)) {
	      return index;
	    }
	  }
	  return -1;
	}

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MapRepeatStrategy = undefined;
	
	var _repeatUtilities = __webpack_require__(44);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var MapRepeatStrategy = exports.MapRepeatStrategy = function () {
	  function MapRepeatStrategy() {
	    _classCallCheck(this, MapRepeatStrategy);
	  }
	
	  MapRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
	    return observerLocator.getMapObserver(items);
	  };
	
	  MapRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
	    var _this = this;
	
	    var removePromise = repeat.removeAllViews(true);
	    if (removePromise instanceof Promise) {
	      removePromise.then(function () {
	        return _this._standardProcessItems(repeat, items);
	      });
	      return;
	    }
	    this._standardProcessItems(repeat, items);
	  };
	
	  MapRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, items) {
	    var index = 0;
	    var overrideContext = void 0;
	
	    items.forEach(function (value, key) {
	      overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, index, items.size, key);
	      repeat.addView(overrideContext.bindingContext, overrideContext);
	      ++index;
	    });
	  };
	
	  MapRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, map, records) {
	    var key = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var overrideContext = void 0;
	    var removeIndex = void 0;
	    var record = void 0;
	    var rmPromises = [];
	    var viewOrPromise = void 0;
	
	    for (i = 0, ii = records.length; i < ii; ++i) {
	      record = records[i];
	      key = record.key;
	      switch (record.type) {
	        case 'update':
	          removeIndex = this._getViewIndexByKey(repeat, key);
	          viewOrPromise = repeat.removeView(removeIndex, true);
	          if (viewOrPromise instanceof Promise) {
	            rmPromises.push(viewOrPromise);
	          }
	          overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, map.get(key), removeIndex, map.size, key);
	          repeat.insertView(removeIndex, overrideContext.bindingContext, overrideContext);
	          break;
	        case 'add':
	          overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, map.get(key), map.size - 1, map.size, key);
	          repeat.insertView(map.size - 1, overrideContext.bindingContext, overrideContext);
	          break;
	        case 'delete':
	          if (record.oldValue === undefined) {
	            return;
	          }
	          removeIndex = this._getViewIndexByKey(repeat, key);
	          viewOrPromise = repeat.removeView(removeIndex, true);
	          if (viewOrPromise instanceof Promise) {
	            rmPromises.push(viewOrPromise);
	          }
	          break;
	        case 'clear':
	          repeat.removeAllViews(true);
	          break;
	        default:
	          continue;
	      }
	    }
	
	    if (rmPromises.length > 0) {
	      Promise.all(rmPromises).then(function () {
	        (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
	      });
	    } else {
	      (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
	    }
	  };
	
	  MapRepeatStrategy.prototype._getViewIndexByKey = function _getViewIndexByKey(repeat, key) {
	    var i = void 0;
	    var ii = void 0;
	    var child = void 0;
	
	    for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
	      child = repeat.view(i);
	      if (child.bindingContext[repeat.key] === key) {
	        return i;
	      }
	    }
	  };
	
	  return MapRepeatStrategy;
	}();

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SetRepeatStrategy = undefined;
	
	var _repeatUtilities = __webpack_require__(44);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SetRepeatStrategy = exports.SetRepeatStrategy = function () {
	  function SetRepeatStrategy() {
	    _classCallCheck(this, SetRepeatStrategy);
	  }
	
	  SetRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
	    return observerLocator.getSetObserver(items);
	  };
	
	  SetRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
	    var _this = this;
	
	    var removePromise = repeat.removeAllViews(true);
	    if (removePromise instanceof Promise) {
	      removePromise.then(function () {
	        return _this._standardProcessItems(repeat, items);
	      });
	      return;
	    }
	    this._standardProcessItems(repeat, items);
	  };
	
	  SetRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, items) {
	    var index = 0;
	    var overrideContext = void 0;
	
	    items.forEach(function (value) {
	      overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, index, items.size);
	      repeat.addView(overrideContext.bindingContext, overrideContext);
	      ++index;
	    });
	  };
	
	  SetRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, set, records) {
	    var value = void 0;
	    var i = void 0;
	    var ii = void 0;
	    var overrideContext = void 0;
	    var removeIndex = void 0;
	    var record = void 0;
	    var rmPromises = [];
	    var viewOrPromise = void 0;
	
	    for (i = 0, ii = records.length; i < ii; ++i) {
	      record = records[i];
	      value = record.value;
	      switch (record.type) {
	        case 'add':
	          overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, set.size - 1, set.size);
	          repeat.insertView(set.size - 1, overrideContext.bindingContext, overrideContext);
	          break;
	        case 'delete':
	          removeIndex = this._getViewIndexByValue(repeat, value);
	          viewOrPromise = repeat.removeView(removeIndex, true);
	          if (viewOrPromise instanceof Promise) {
	            rmPromises.push(viewOrPromise);
	          }
	          break;
	        case 'clear':
	          repeat.removeAllViews(true);
	          break;
	        default:
	          continue;
	      }
	    }
	
	    if (rmPromises.length > 0) {
	      Promise.all(rmPromises).then(function () {
	        (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
	      });
	    } else {
	      (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
	    }
	  };
	
	  SetRepeatStrategy.prototype._getViewIndexByValue = function _getViewIndexByValue(repeat, value) {
	    var i = void 0;
	    var ii = void 0;
	    var child = void 0;
	
	    for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
	      child = repeat.view(i);
	      if (child.bindingContext[repeat.local] === value) {
	        return i;
	      }
	    }
	  };
	
	  return SetRepeatStrategy;
	}();

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NumberRepeatStrategy = undefined;
	
	var _repeatUtilities = __webpack_require__(44);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NumberRepeatStrategy = exports.NumberRepeatStrategy = function () {
	  function NumberRepeatStrategy() {
	    _classCallCheck(this, NumberRepeatStrategy);
	  }
	
	  NumberRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver() {
	    return null;
	  };
	
	  NumberRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, value) {
	    var _this = this;
	
	    var removePromise = repeat.removeAllViews(true);
	    if (removePromise instanceof Promise) {
	      removePromise.then(function () {
	        return _this._standardProcessItems(repeat, value);
	      });
	      return;
	    }
	    this._standardProcessItems(repeat, value);
	  };
	
	  NumberRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, value) {
	    var childrenLength = repeat.viewCount();
	    var i = void 0;
	    var ii = void 0;
	    var overrideContext = void 0;
	    var viewsToRemove = void 0;
	
	    value = Math.floor(value);
	    viewsToRemove = childrenLength - value;
	
	    if (viewsToRemove > 0) {
	      if (viewsToRemove > childrenLength) {
	        viewsToRemove = childrenLength;
	      }
	
	      for (i = 0, ii = viewsToRemove; i < ii; ++i) {
	        repeat.removeView(childrenLength - (i + 1), true);
	      }
	
	      return;
	    }
	
	    for (i = childrenLength, ii = value; i < ii; ++i) {
	      overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, i, i, ii);
	      repeat.addView(overrideContext.bindingContext, overrideContext);
	    }
	
	    (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
	  };
	
	  return NumberRepeatStrategy;
	}();

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.viewsRequireLifecycle = viewsRequireLifecycle;
	var lifecycleOptionalBehaviors = exports.lifecycleOptionalBehaviors = ['focus', 'if', 'repeat', 'show', 'with'];
	
	function behaviorRequiresLifecycle(instruction) {
	  var t = instruction.type;
	  var name = t.elementName !== null ? t.elementName : t.attributeName;
	  return lifecycleOptionalBehaviors.indexOf(name) === -1 && (t.handlesAttached || t.handlesBind || t.handlesCreated || t.handlesDetached || t.handlesUnbind) || t.viewFactory && viewsRequireLifecycle(t.viewFactory) || instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
	}
	
	function targetRequiresLifecycle(instruction) {
	  var behaviors = instruction.behaviorInstructions;
	  if (behaviors) {
	    var i = behaviors.length;
	    while (i--) {
	      if (behaviorRequiresLifecycle(behaviors[i])) {
	        return true;
	      }
	    }
	  }
	
	  return instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
	}
	
	function viewsRequireLifecycle(viewFactory) {
	  if ('_viewsRequireLifecycle' in viewFactory) {
	    return viewFactory._viewsRequireLifecycle;
	  }
	
	  viewFactory._viewsRequireLifecycle = false;
	
	  if (viewFactory.viewFactory) {
	    viewFactory._viewsRequireLifecycle = viewsRequireLifecycle(viewFactory.viewFactory);
	    return viewFactory._viewsRequireLifecycle;
	  }
	
	  if (viewFactory.template.querySelector('.au-animate')) {
	    viewFactory._viewsRequireLifecycle = true;
	    return true;
	  }
	
	  for (var id in viewFactory.instructions) {
	    if (targetRequiresLifecycle(viewFactory.instructions[id])) {
	      viewFactory._viewsRequireLifecycle = true;
	      return true;
	    }
	  }
	
	  viewFactory._viewsRequireLifecycle = false;
	  return false;
	}

/***/ },
/* 49 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AbstractRepeater = exports.AbstractRepeater = function () {
	  function AbstractRepeater(options) {
	    _classCallCheck(this, AbstractRepeater);
	
	    Object.assign(this, {
	      local: 'items',
	      viewsRequireLifecycle: true
	    }, options);
	  }
	
	  AbstractRepeater.prototype.viewCount = function viewCount() {
	    throw new Error('subclass must implement `viewCount`');
	  };
	
	  AbstractRepeater.prototype.views = function views() {
	    throw new Error('subclass must implement `views`');
	  };
	
	  AbstractRepeater.prototype.view = function view(index) {
	    throw new Error('subclass must implement `view`');
	  };
	
	  AbstractRepeater.prototype.matcher = function matcher() {
	    throw new Error('subclass must implement `matcher`');
	  };
	
	  AbstractRepeater.prototype.addView = function addView(bindingContext, overrideContext) {
	    throw new Error('subclass must implement `addView`');
	  };
	
	  AbstractRepeater.prototype.insertView = function insertView(index, bindingContext, overrideContext) {
	    throw new Error('subclass must implement `insertView`');
	  };
	
	  AbstractRepeater.prototype.moveView = function moveView(sourceIndex, targetIndex) {
	    throw new Error('subclass must implement `moveView`');
	  };
	
	  AbstractRepeater.prototype.removeAllViews = function removeAllViews(returnToCache, skipAnimation) {
	    throw new Error('subclass must implement `removeAllViews`');
	  };
	
	  AbstractRepeater.prototype.removeViews = function removeViews(viewsToRemove, returnToCache, skipAnimation) {
	    throw new Error('subclass must implement `removeView`');
	  };
	
	  AbstractRepeater.prototype.removeView = function removeView(index, returnToCache, skipAnimation) {
	    throw new Error('subclass must implement `removeView`');
	  };
	
	  AbstractRepeater.prototype.updateBindings = function updateBindings(view) {
	    throw new Error('subclass must implement `updateBindings`');
	  };
	
	  return AbstractRepeater;
	}();

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Show = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Show = exports.Show = (_dec = (0, _aureliaTemplating.customAttribute)('show'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.Animator), _dec(_class = _dec2(_class = function () {
	  function Show(element, animator) {
	    _classCallCheck(this, Show);
	
	    this.element = element;
	    this.animator = animator;
	  }
	
	  Show.prototype.valueChanged = function valueChanged(newValue) {
	    if (newValue) {
	      this.animator.removeClass(this.element, 'aurelia-hide');
	    } else {
	      this.animator.addClass(this.element, 'aurelia-hide');
	    }
	  };
	
	  Show.prototype.bind = function bind(bindingContext) {
	    this.valueChanged(this.value);
	  };
	
	  return Show;
	}()) || _class) || _class);

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Hide = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Hide = exports.Hide = (_dec = (0, _aureliaTemplating.customAttribute)('hide'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.Animator), _dec(_class = _dec2(_class = function () {
	  function Hide(element, animator) {
	    _classCallCheck(this, Hide);
	
	    this.element = element;
	    this.animator = animator;
	  }
	
	  Hide.prototype.valueChanged = function valueChanged(newValue) {
	    if (newValue) {
	      this.animator.addClass(this.element, 'aurelia-hide');
	    } else {
	      this.animator.removeClass(this.element, 'aurelia-hide');
	    }
	  };
	
	  Hide.prototype.bind = function bind(bindingContext) {
	    this.valueChanged(this.value);
	  };
	
	  return Hide;
	}()) || _class) || _class);

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SanitizeHTMLValueConverter = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _htmlSanitizer = __webpack_require__(53);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SanitizeHTMLValueConverter = exports.SanitizeHTMLValueConverter = (_dec = (0, _aureliaBinding.valueConverter)('sanitizeHTML'), _dec2 = (0, _aureliaDependencyInjection.inject)(_htmlSanitizer.HTMLSanitizer), _dec(_class = _dec2(_class = function () {
	  function SanitizeHTMLValueConverter(sanitizer) {
	    _classCallCheck(this, SanitizeHTMLValueConverter);
	
	    this.sanitizer = sanitizer;
	  }
	
	  SanitizeHTMLValueConverter.prototype.toView = function toView(untrustedMarkup) {
	    if (untrustedMarkup === null || untrustedMarkup === undefined) {
	      return null;
	    }
	
	    return this.sanitizer.sanitize(untrustedMarkup);
	  };
	
	  return SanitizeHTMLValueConverter;
	}()) || _class) || _class);

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
	
	var HTMLSanitizer = exports.HTMLSanitizer = function () {
	  function HTMLSanitizer() {
	    _classCallCheck(this, HTMLSanitizer);
	  }
	
	  HTMLSanitizer.prototype.sanitize = function sanitize(input) {
	    return input.replace(SCRIPT_REGEX, '');
	  };
	
	  return HTMLSanitizer;
	}();

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Replaceable = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Replaceable = exports.Replaceable = (_dec = (0, _aureliaTemplating.customAttribute)('replaceable'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function () {
	  function Replaceable(viewFactory, viewSlot) {
	    _classCallCheck(this, Replaceable);
	
	    this.viewFactory = viewFactory;
	    this.viewSlot = viewSlot;
	    this.view = null;
	  }
	
	  Replaceable.prototype.bind = function bind(bindingContext, overrideContext) {
	    if (this.view === null) {
	      this.view = this.viewFactory.create();
	      this.viewSlot.add(this.view);
	    }
	
	    this.view.bind(bindingContext, overrideContext);
	  };
	
	  Replaceable.prototype.unbind = function unbind() {
	    this.view.unbind();
	  };
	
	  return Replaceable;
	}()) || _class) || _class) || _class);

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Focus = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTaskQueue = __webpack_require__(21);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Focus = exports.Focus = (_dec = (0, _aureliaTemplating.customAttribute)('focus', _aureliaBinding.bindingMode.twoWay), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTaskQueue.TaskQueue), _dec(_class = _dec2(_class = function () {
	  function Focus(element, taskQueue) {
	    var _this = this;
	
	    _classCallCheck(this, Focus);
	
	    this.element = element;
	    this.taskQueue = taskQueue;
	    this.isAttached = false;
	    this.needsApply = false;
	
	    this.focusListener = function (e) {
	      _this.value = true;
	    };
	    this.blurListener = function (e) {
	      if (_aureliaPal.DOM.activeElement !== _this.element) {
	        _this.value = false;
	      }
	    };
	  }
	
	  Focus.prototype.valueChanged = function valueChanged(newValue) {
	    if (this.isAttached) {
	      this._apply();
	    } else {
	      this.needsApply = true;
	    }
	  };
	
	  Focus.prototype._apply = function _apply() {
	    var _this2 = this;
	
	    if (this.value) {
	      this.taskQueue.queueMicroTask(function () {
	        if (_this2.value) {
	          _this2.element.focus();
	        }
	      });
	    } else {
	      this.element.blur();
	    }
	  };
	
	  Focus.prototype.attached = function attached() {
	    this.isAttached = true;
	    if (this.needsApply) {
	      this.needsApply = false;
	      this._apply();
	    }
	    this.element.addEventListener('focus', this.focusListener);
	    this.element.addEventListener('blur', this.blurListener);
	  };
	
	  Focus.prototype.detached = function detached() {
	    this.isAttached = false;
	    this.element.removeEventListener('focus', this.focusListener);
	    this.element.removeEventListener('blur', this.blurListener);
	  };
	
	  return Focus;
	}()) || _class) || _class);

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CompileSpy = undefined;
	
	var _dec, _dec2, _class;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CompileSpy = exports.CompileSpy = (_dec = (0, _aureliaTemplating.customAttribute)('compile-spy'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.TargetInstruction), _dec(_class = _dec2(_class = function CompileSpy(element, instruction) {
	  _classCallCheck(this, CompileSpy);
	
	  LogManager.getLogger('compile-spy').info(element, instruction);
	}) || _class) || _class);

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ViewSpy = undefined;
	
	var _dec, _class;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ViewSpy = exports.ViewSpy = (_dec = (0, _aureliaTemplating.customAttribute)('view-spy'), _dec(_class = function () {
	  function ViewSpy() {
	    _classCallCheck(this, ViewSpy);
	
	    this.logger = LogManager.getLogger('view-spy');
	  }
	
	  ViewSpy.prototype._log = function _log(lifecycleName, context) {
	    if (!this.value && lifecycleName === 'created') {
	      this.logger.info(lifecycleName, this.view);
	    } else if (this.value && this.value.indexOf(lifecycleName) !== -1) {
	      this.logger.info(lifecycleName, this.view, context);
	    }
	  };
	
	  ViewSpy.prototype.created = function created(view) {
	    this.view = view;
	    this._log('created');
	  };
	
	  ViewSpy.prototype.bind = function bind(bindingContext) {
	    this._log('bind', bindingContext);
	  };
	
	  ViewSpy.prototype.attached = function attached() {
	    this._log('attached');
	  };
	
	  ViewSpy.prototype.detached = function detached() {
	    this._log('detached');
	  };
	
	  ViewSpy.prototype.unbind = function unbind() {
	    this._log('unbind');
	  };
	
	  return ViewSpy;
	}()) || _class);

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports._createCSSResource = _createCSSResource;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaLoader = __webpack_require__(8);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaPath = __webpack_require__(9);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var cssUrlMatcher = /url\((?!['"]data)([^)]+)\)/gi;
	
	function fixupCSSUrls(address, css) {
	  if (typeof css !== 'string') {
	    throw new Error('Failed loading required CSS file: ' + address);
	  }
	  return css.replace(cssUrlMatcher, function (match, p1) {
	    var quote = p1.charAt(0);
	    if (quote === '\'' || quote === '"') {
	      p1 = p1.substr(1, p1.length - 2);
	    }
	    return 'url(\'' + (0, _aureliaPath.relativeToFile)(p1, address) + '\')';
	  });
	}
	
	var CSSResource = function () {
	  function CSSResource(address) {
	    _classCallCheck(this, CSSResource);
	
	    this.address = address;
	    this._global = null;
	    this._scoped = null;
	  }
	
	  CSSResource.prototype.initialize = function initialize(container, target) {
	    this._global = new target('global');
	    this._scoped = new target('scoped');
	  };
	
	  CSSResource.prototype.register = function register(registry, name) {
	    registry.registerViewEngineHooks(name === 'scoped' ? this._scoped : this._global);
	  };
	
	  CSSResource.prototype.load = function load(container) {
	    var _this = this;
	
	    return container.get(_aureliaLoader.Loader).loadText(this.address).catch(function (err) {
	      return null;
	    }).then(function (text) {
	      text = fixupCSSUrls(_this.address, text);
	      _this._global.css = text;
	      _this._scoped.css = text;
	    });
	  };
	
	  return CSSResource;
	}();
	
	var CSSViewEngineHooks = function () {
	  function CSSViewEngineHooks(mode) {
	    _classCallCheck(this, CSSViewEngineHooks);
	
	    this.mode = mode;
	    this.css = null;
	    this._alreadyGloballyInjected = false;
	  }
	
	  CSSViewEngineHooks.prototype.beforeCompile = function beforeCompile(content, resources, instruction) {
	    if (this.mode === 'scoped') {
	      if (instruction.targetShadowDOM) {
	        _aureliaPal.DOM.injectStyles(this.css, content, true);
	      } else if (_aureliaPal.FEATURE.scopedCSS) {
	        var styleNode = _aureliaPal.DOM.injectStyles(this.css, content, true);
	        styleNode.setAttribute('scoped', 'scoped');
	      } else if (!this._alreadyGloballyInjected) {
	        _aureliaPal.DOM.injectStyles(this.css);
	        this._alreadyGloballyInjected = true;
	      }
	    } else if (!this._alreadyGloballyInjected) {
	      _aureliaPal.DOM.injectStyles(this.css);
	      this._alreadyGloballyInjected = true;
	    }
	  };
	
	  return CSSViewEngineHooks;
	}();
	
	function _createCSSResource(address) {
	  var _dec, _class;
	
	  var ViewCSS = (_dec = (0, _aureliaTemplating.resource)(new CSSResource(address)), _dec(_class = function (_CSSViewEngineHooks) {
	    _inherits(ViewCSS, _CSSViewEngineHooks);
	
	    function ViewCSS() {
	      _classCallCheck(this, ViewCSS);
	
	      return _possibleConstructorReturn(this, _CSSViewEngineHooks.apply(this, arguments));
	    }
	
	    return ViewCSS;
	  }(CSSViewEngineHooks)) || _class);
	
	  return ViewCSS;
	}

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TwoWayBindingBehavior = exports.OneWayBindingBehavior = exports.OneTimeBindingBehavior = undefined;
	
	var _dec, _class, _dec2, _class2, _dec3, _class3;
	
	var _aureliaBinding = __webpack_require__(20);
	
	var _aureliaMetadata = __webpack_require__(7);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var modeBindingBehavior = {
	  bind: function bind(binding, source, lookupFunctions) {
	    binding.originalMode = binding.mode;
	    binding.mode = this.mode;
	  },
	  unbind: function unbind(binding, source) {
	    binding.mode = binding.originalMode;
	    binding.originalMode = null;
	  }
	};
	
	var OneTimeBindingBehavior = exports.OneTimeBindingBehavior = (_dec = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec(_class = function OneTimeBindingBehavior() {
	  _classCallCheck(this, OneTimeBindingBehavior);
	
	  this.mode = _aureliaBinding.bindingMode.oneTime;
	}) || _class);
	var OneWayBindingBehavior = exports.OneWayBindingBehavior = (_dec2 = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec2(_class2 = function OneWayBindingBehavior() {
	  _classCallCheck(this, OneWayBindingBehavior);
	
	  this.mode = _aureliaBinding.bindingMode.oneWay;
	}) || _class2);
	var TwoWayBindingBehavior = exports.TwoWayBindingBehavior = (_dec3 = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec3(_class3 = function TwoWayBindingBehavior() {
	  _classCallCheck(this, TwoWayBindingBehavior);
	
	  this.mode = _aureliaBinding.bindingMode.twoWay;
	}) || _class3);

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ThrottleBindingBehavior = undefined;
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function throttle(newValue) {
	  var _this = this;
	
	  var state = this.throttleState;
	  var elapsed = +new Date() - state.last;
	  if (elapsed >= state.delay) {
	    clearTimeout(state.timeoutId);
	    state.timeoutId = null;
	    state.last = +new Date();
	    this.throttledMethod(newValue);
	    return;
	  }
	  state.newValue = newValue;
	  if (state.timeoutId === null) {
	    state.timeoutId = setTimeout(function () {
	      state.timeoutId = null;
	      state.last = +new Date();
	      _this.throttledMethod(state.newValue);
	    }, state.delay - elapsed);
	  }
	}
	
	var ThrottleBindingBehavior = exports.ThrottleBindingBehavior = function () {
	  function ThrottleBindingBehavior() {
	    _classCallCheck(this, ThrottleBindingBehavior);
	  }
	
	  ThrottleBindingBehavior.prototype.bind = function bind(binding, source) {
	    var delay = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];
	
	    var methodToThrottle = 'updateTarget';
	    if (binding.callSource) {
	      methodToThrottle = 'callSource';
	    } else if (binding.updateSource && binding.mode === _aureliaBinding.bindingMode.twoWay) {
	        methodToThrottle = 'updateSource';
	      }
	
	    binding.throttledMethod = binding[methodToThrottle];
	    binding.throttledMethod.originalName = methodToThrottle;
	
	    binding[methodToThrottle] = throttle;
	
	    binding.throttleState = {
	      delay: delay,
	      last: 0,
	      timeoutId: null
	    };
	  };
	
	  ThrottleBindingBehavior.prototype.unbind = function unbind(binding, source) {
	    var methodToRestore = binding.throttledMethod.originalName;
	    binding[methodToRestore] = binding.throttledMethod;
	    binding.throttledMethod = null;
	    clearTimeout(binding.throttleState.timeoutId);
	    binding.throttleState = null;
	  };
	
	  return ThrottleBindingBehavior;
	}();

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DebounceBindingBehavior = undefined;
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function debounce(newValue) {
	  var _this = this;
	
	  var state = this.debounceState;
	  if (state.immediate) {
	    state.immediate = false;
	    this.debouncedMethod(newValue);
	    return;
	  }
	  clearTimeout(state.timeoutId);
	  state.timeoutId = setTimeout(function () {
	    return _this.debouncedMethod(newValue);
	  }, state.delay);
	}
	
	var DebounceBindingBehavior = exports.DebounceBindingBehavior = function () {
	  function DebounceBindingBehavior() {
	    _classCallCheck(this, DebounceBindingBehavior);
	  }
	
	  DebounceBindingBehavior.prototype.bind = function bind(binding, source) {
	    var delay = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];
	
	    var methodToDebounce = 'updateTarget';
	    if (binding.callSource) {
	      methodToDebounce = 'callSource';
	    } else if (binding.updateSource && binding.mode === _aureliaBinding.bindingMode.twoWay) {
	        methodToDebounce = 'updateSource';
	      }
	
	    binding.debouncedMethod = binding[methodToDebounce];
	    binding.debouncedMethod.originalName = methodToDebounce;
	
	    binding[methodToDebounce] = debounce;
	
	    binding.debounceState = {
	      delay: delay,
	      timeoutId: null,
	      immediate: methodToDebounce === 'updateTarget' };
	  };
	
	  DebounceBindingBehavior.prototype.unbind = function unbind(binding, source) {
	    var methodToRestore = binding.debouncedMethod.originalName;
	    binding[methodToRestore] = binding.debouncedMethod;
	    binding.debouncedMethod = null;
	    clearTimeout(binding.debounceState.timeoutId);
	    binding.debounceState = null;
	  };
	
	  return DebounceBindingBehavior;
	}();

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SignalBindingBehavior = undefined;
	
	var _bindingSignaler = __webpack_require__(63);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SignalBindingBehavior = exports.SignalBindingBehavior = function () {
	  SignalBindingBehavior.inject = function inject() {
	    return [_bindingSignaler.BindingSignaler];
	  };
	
	  function SignalBindingBehavior(bindingSignaler) {
	    _classCallCheck(this, SignalBindingBehavior);
	
	    this.signals = bindingSignaler.signals;
	  }
	
	  SignalBindingBehavior.prototype.bind = function bind(binding, source) {
	    if (!binding.updateTarget) {
	      throw new Error('Only property bindings and string interpolation bindings can be signaled.  Trigger, delegate and call bindings cannot be signaled.');
	    }
	    if (arguments.length === 3) {
	      var name = arguments[2];
	      var bindings = this.signals[name] || (this.signals[name] = []);
	      bindings.push(binding);
	      binding.signalName = name;
	    } else if (arguments.length > 3) {
	      var names = Array.prototype.slice.call(arguments, 2);
	      var i = names.length;
	      while (i--) {
	        var _name = names[i];
	        var _bindings = this.signals[_name] || (this.signals[_name] = []);
	        _bindings.push(binding);
	      }
	      binding.signalName = names;
	    } else {
	      throw new Error('Signal name is required.');
	    }
	  };
	
	  SignalBindingBehavior.prototype.unbind = function unbind(binding, source) {
	    var name = binding.signalName;
	    binding.signalName = null;
	    if (Array.isArray(name)) {
	      var names = name;
	      var i = names.length;
	      while (i--) {
	        var n = names[i];
	        var bindings = this.signals[n];
	        bindings.splice(bindings.indexOf(binding), 1);
	      }
	    } else {
	      var _bindings2 = this.signals[name];
	      _bindings2.splice(_bindings2.indexOf(binding), 1);
	    }
	  };
	
	  return SignalBindingBehavior;
	}();

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BindingSignaler = undefined;
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BindingSignaler = exports.BindingSignaler = function () {
	  function BindingSignaler() {
	    _classCallCheck(this, BindingSignaler);
	
	    this.signals = {};
	  }
	
	  BindingSignaler.prototype.signal = function signal(name) {
	    var bindings = this.signals[name];
	    if (!bindings) {
	      return;
	    }
	    var i = bindings.length;
	    while (i--) {
	      bindings[i].call(_aureliaBinding.sourceContext);
	    }
	  };
	
	  return BindingSignaler;
	}();

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UpdateTriggerBindingBehavior = undefined;
	
	var _class, _temp;
	
	var _aureliaBinding = __webpack_require__(20);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var eventNamesRequired = 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">';
	var notApplicableMessage = 'The updateTrigger binding behavior can only be applied to two-way bindings on input/select elements.';
	
	var UpdateTriggerBindingBehavior = exports.UpdateTriggerBindingBehavior = (_temp = _class = function () {
	  function UpdateTriggerBindingBehavior(eventManager) {
	    _classCallCheck(this, UpdateTriggerBindingBehavior);
	
	    this.eventManager = eventManager;
	  }
	
	  UpdateTriggerBindingBehavior.prototype.bind = function bind(binding, source) {
	    for (var _len = arguments.length, events = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      events[_key - 2] = arguments[_key];
	    }
	
	    if (events.length === 0) {
	      throw new Error(eventNamesRequired);
	    }
	    if (binding.mode !== _aureliaBinding.bindingMode.twoWay) {
	      throw new Error(notApplicableMessage);
	    }
	
	    var targetObserver = binding.observerLocator.getObserver(binding.target, binding.targetProperty);
	    if (!targetObserver.handler) {
	      throw new Error(notApplicableMessage);
	    }
	    binding.targetObserver = targetObserver;
	
	    targetObserver.originalHandler = binding.targetObserver.handler;
	
	    var handler = this.eventManager.createElementHandler(events);
	    targetObserver.handler = handler;
	  };
	
	  UpdateTriggerBindingBehavior.prototype.unbind = function unbind(binding, source) {
	    binding.targetObserver.handler = binding.targetObserver.originalHandler;
	    binding.targetObserver.originalHandler = null;
	  };
	
	  return UpdateTriggerBindingBehavior;
	}(), _class.inject = [_aureliaBinding.EventManager], _temp);

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getElementName = getElementName;
	exports.configure = configure;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _dynamicElement = __webpack_require__(66);
	
	function getElementName(address) {
	  return (/([^\/^\?]+)\.html/i.exec(address)[1].toLowerCase()
	  );
	}
	
	function configure(config) {
	  var viewEngine = config.container.get(_aureliaTemplating.ViewEngine);
	  var loader = config.aurelia.loader;
	
	  viewEngine.addResourcePlugin('.html', {
	    'fetch': function fetch(address) {
	      return loader.loadTemplate(address).then(function (registryEntry) {
	        var _ref;
	
	        var bindable = registryEntry.template.getAttribute('bindable');
	        var elementName = getElementName(address);
	
	        if (bindable) {
	          bindable = bindable.split(',').map(function (x) {
	            return x.trim();
	          });
	          registryEntry.template.removeAttribute('bindable');
	        } else {
	          bindable = [];
	        }
	
	        return _ref = {}, _ref[elementName] = (0, _dynamicElement._createDynamicElement)(elementName, address, bindable), _ref;
	      });
	    }
	  });
	}

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports._createDynamicElement = _createDynamicElement;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _createDynamicElement(name, viewUrl, bindableNames) {
	  var _dec, _dec2, _class;
	
	  var DynamicElement = (_dec = (0, _aureliaTemplating.customElement)(name), _dec2 = (0, _aureliaTemplating.useView)(viewUrl), _dec(_class = _dec2(_class = function () {
	    function DynamicElement() {
	      _classCallCheck(this, DynamicElement);
	    }
	
	    DynamicElement.prototype.bind = function bind(bindingContext) {
	      this.$parent = bindingContext;
	    };
	
	    return DynamicElement;
	  }()) || _class) || _class);
	
	  for (var i = 0, ii = bindableNames.length; i < ii; ++i) {
	    (0, _aureliaTemplating.bindable)(bindableNames[i])(DynamicElement);
	  }
	  return DynamicElement;
	}

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.configure = exports.RouteHref = exports.RouterView = exports.TemplatingRouteLoader = undefined;
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _routeLoader = __webpack_require__(68);
	
	var _routerView = __webpack_require__(69);
	
	var _routeHref = __webpack_require__(70);
	
	function configure(config) {
	  config.singleton(_aureliaRouter.RouteLoader, _routeLoader.TemplatingRouteLoader).singleton(_aureliaRouter.Router, _aureliaRouter.AppRouter).globalResources('./router-view', './route-href');
	
	  config.container.registerAlias(_aureliaRouter.Router, _aureliaRouter.AppRouter);
	}
	
	exports.TemplatingRouteLoader = _routeLoader.TemplatingRouteLoader;
	exports.RouterView = _routerView.RouterView;
	exports.RouteHref = _routeHref.RouteHref;
	exports.configure = configure;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TemplatingRouteLoader = undefined;
	
	var _dec, _class;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaPath = __webpack_require__(9);
	
	var _aureliaMetadata = __webpack_require__(7);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TemplatingRouteLoader = exports.TemplatingRouteLoader = (_dec = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.CompositionEngine), _dec(_class = function (_RouteLoader) {
	  _inherits(TemplatingRouteLoader, _RouteLoader);
	
	  function TemplatingRouteLoader(compositionEngine) {
	    _classCallCheck(this, TemplatingRouteLoader);
	
	    var _this = _possibleConstructorReturn(this, _RouteLoader.call(this));
	
	    _this.compositionEngine = compositionEngine;
	    return _this;
	  }
	
	  TemplatingRouteLoader.prototype.loadRoute = function loadRoute(router, config) {
	    var childContainer = router.container.createChild();
	    var instruction = {
	      viewModel: (0, _aureliaPath.relativeToFile)(config.moduleId, _aureliaMetadata.Origin.get(router.container.viewModel.constructor).moduleId),
	      childContainer: childContainer,
	      view: config.view || config.viewStrategy,
	      router: router
	    };
	
	    childContainer.getChildRouter = function () {
	      var childRouter = void 0;
	
	      childContainer.registerHandler(_aureliaRouter.Router, function (c) {
	        return childRouter || (childRouter = router.createChild(childContainer));
	      });
	
	      return childContainer.get(_aureliaRouter.Router);
	    };
	
	    return this.compositionEngine.ensureViewModel(instruction);
	  };
	
	  return TemplatingRouteLoader;
	}(_aureliaRouter.RouteLoader)) || _class);

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RouterView = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaMetadata = __webpack_require__(7);
	
	var _aureliaPal = __webpack_require__(4);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SwapStrategies = function () {
	  function SwapStrategies() {
	    _classCallCheck(this, SwapStrategies);
	  }
	
	  SwapStrategies.prototype.before = function before(viewSlot, previousView, callback) {
	    var promise = Promise.resolve(callback());
	
	    if (previousView !== undefined) {
	      return promise.then(function () {
	        return viewSlot.remove(previousView, true);
	      });
	    }
	
	    return promise;
	  };
	
	  SwapStrategies.prototype.with = function _with(viewSlot, previousView, callback) {
	    var promise = Promise.resolve(callback());
	
	    if (previousView !== undefined) {
	      return Promise.all([viewSlot.remove(previousView, true), promise]);
	    }
	
	    return promise;
	  };
	
	  SwapStrategies.prototype.after = function after(viewSlot, previousView, callback) {
	    return Promise.resolve(viewSlot.removeAll(true)).then(callback);
	  };
	
	  return SwapStrategies;
	}();
	
	var swapStrategies = new SwapStrategies();
	
	var RouterView = exports.RouterView = (_dec = (0, _aureliaTemplating.customElement)('router-view'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaDependencyInjection.Container, _aureliaTemplating.ViewSlot, _aureliaRouter.Router, _aureliaTemplating.ViewLocator, _aureliaTemplating.CompositionTransaction), _dec(_class = (0, _aureliaTemplating.noView)(_class = _dec2(_class = (_class2 = function () {
	  function RouterView(element, container, viewSlot, router, viewLocator, compositionTransaction) {
	    _classCallCheck(this, RouterView);
	
	    _initDefineProp(this, 'swapOrder', _descriptor, this);
	
	    this.element = element;
	    this.container = container;
	    this.viewSlot = viewSlot;
	    this.router = router;
	    this.viewLocator = viewLocator;
	    this.compositionTransaction = compositionTransaction;
	    this.router.registerViewPort(this, this.element.getAttribute('name'));
	
	    if (!('initialComposition' in compositionTransaction)) {
	      compositionTransaction.initialComposition = true;
	      this.compositionTransactionNotifier = compositionTransaction.enlist();
	    }
	  }
	
	  RouterView.prototype.created = function created(owningView) {
	    this.owningView = owningView;
	  };
	
	  RouterView.prototype.bind = function bind(bindingContext, overrideContext) {
	    this.container.viewModel = bindingContext;
	    this.overrideContext = overrideContext;
	  };
	
	  RouterView.prototype.process = function process(viewPortInstruction, waitToSwap) {
	    var _this = this;
	
	    var component = viewPortInstruction.component;
	    var childContainer = component.childContainer;
	    var viewModel = component.viewModel;
	    var viewModelResource = component.viewModelResource;
	    var metadata = viewModelResource.metadata;
	
	    var viewStrategy = this.viewLocator.getViewStrategy(component.view || viewModel);
	    if (viewStrategy) {
	      viewStrategy.makeRelativeTo(_aureliaMetadata.Origin.get(component.router.container.viewModel.constructor).moduleId);
	    }
	
	    return metadata.load(childContainer, viewModelResource.value, null, viewStrategy, true).then(function (viewFactory) {
	      if (!_this.compositionTransactionNotifier) {
	        _this.compositionTransactionOwnershipToken = _this.compositionTransaction.tryCapture();
	      }
	
	      viewPortInstruction.controller = metadata.create(childContainer, _aureliaTemplating.BehaviorInstruction.dynamic(_this.element, viewModel, viewFactory));
	
	      if (waitToSwap) {
	        return;
	      }
	
	      _this.swap(viewPortInstruction);
	    });
	  };
	
	  RouterView.prototype.swap = function swap(viewPortInstruction) {
	    var _this2 = this;
	
	    var work = function work() {
	      var previousView = _this2.view;
	      var viewSlot = _this2.viewSlot;
	      var swapStrategy = void 0;
	
	      swapStrategy = _this2.swapOrder in swapStrategies ? swapStrategies[_this2.swapOrder] : swapStrategies.after;
	
	      swapStrategy(viewSlot, previousView, function () {
	        return Promise.resolve(viewSlot.add(viewPortInstruction.controller.view)).then(function () {
	          if (_this2.compositionTransactionNotifier) {
	            _this2.compositionTransactionNotifier.done();
	            _this2.compositionTransactionNotifier = null;
	          }
	        });
	      });
	
	      _this2.view = viewPortInstruction.controller.view;
	    };
	
	    viewPortInstruction.controller.automate(this.overrideContext, this.owningView);
	
	    if (this.compositionTransactionOwnershipToken) {
	      return this.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function () {
	        _this2.compositionTransactionOwnershipToken = null;
	        work();
	      });
	    }
	
	    work();
	  };
	
	  return RouterView;
	}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'swapOrder', [_aureliaTemplating.bindable], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class) || _class) || _class);

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RouteHref = undefined;
	
	var _dec, _dec2, _dec3, _dec4, _dec5, _class;
	
	var _aureliaTemplating = __webpack_require__(24);
	
	var _aureliaDependencyInjection = __webpack_require__(19);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaPal = __webpack_require__(4);
	
	var _aureliaLogging = __webpack_require__(14);
	
	var LogManager = _interopRequireWildcard(_aureliaLogging);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var logger = LogManager.getLogger('route-href');
	
	var RouteHref = exports.RouteHref = (_dec = (0, _aureliaTemplating.customAttribute)('route-href'), _dec2 = (0, _aureliaTemplating.bindable)({ name: 'route', changeHandler: 'processChange' }), _dec3 = (0, _aureliaTemplating.bindable)({ name: 'params', changeHandler: 'processChange' }), _dec4 = (0, _aureliaTemplating.bindable)({ name: 'attribute', defaultValue: 'href' }), _dec5 = (0, _aureliaDependencyInjection.inject)(_aureliaRouter.Router, _aureliaPal.DOM.Element), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = function () {
	  function RouteHref(router, element) {
	    _classCallCheck(this, RouteHref);
	
	    this.router = router;
	    this.element = element;
	  }
	
	  RouteHref.prototype.bind = function bind() {
	    this.isActive = true;
	    this.processChange();
	  };
	
	  RouteHref.prototype.unbind = function unbind() {
	    this.isActive = false;
	  };
	
	  RouteHref.prototype.attributeChanged = function attributeChanged(value, previous) {
	    if (previous) {
	      this.element.removeAttribute(previous);
	    }
	
	    this.processChange();
	  };
	
	  RouteHref.prototype.processChange = function processChange() {
	    var _this = this;
	
	    return this.router.ensureConfigured().then(function () {
	      if (!_this.isActive) {
	        return;
	      }
	
	      var href = _this.router.generate(_this.route, _this.params);
	      _this.element.setAttribute(_this.attribute, href);
	    }).catch(function (reason) {
	      logger.error(reason);
	    });
	  };
	
	  return RouteHref;
	}()) || _class) || _class) || _class) || _class) || _class);

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Index = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Index = exports.Index = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator, _aureliaRouter.Router, _aureliaSailsSocketClient.SailsSocketClient), _dec(_class = function () {
	  function Index(eventAggregator, router, sails) {
	    _classCallCheck(this, Index);
	
	    this.entity = { identifier: 'admin@example.com', password: 'admin1234' };
	
	    this.ea = eventAggregator;
	    this.sails = sails;
	    this.router = router;
	  }
	
	  Index.prototype.login = function login() {
	    var _this = this;
	
	    this.sails.post('/auth/local', this.entity).then(function (data) {
	      _this.ea.publish('uerAuthenticated', data.body);
	      _this.router.navigate('/');
	    }).catch(function (error) {
	      return console.log(error);
	    });
	  };
	
	  return Index;
	}()) || _class);

/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <!-- <div ui-card class=\"centered\">\n    <div class=\"image\">\n\n    </div>\n    <div class=\"content\">\n      <a class=\"header\">Elyse</a>\n    </div>\n  </div> -->\n\n  <!-- <div class=\"ui icon message\">\n    <i class=\"inbox icon\"></i>\n    <div class=\"content\">\n      <div class=\"header\">\n        Have you heard about our mailing list?\n      </div>\n      <p>Get the best news in your e-mail every day.</p>\n    </div>\n  </div>\n\n  <div ui-message=\"icon: blue loading notched circle\">\n    <div class=\"content\">\n      <div class=\"header\">\n        Just one second\n      </div>\n      <p>We're fetching that content for you.</p>\n    </div>\n  </div>\n\n  <div ui-message=\"icon.bind: messageIcon\" class=\"icon\">\n    <i class=\"ui icon inbox\"></i>\n    <div class=\"content\">\n      <div class=\"header\">\n        Have you heard about our mailing list?\n      </div>\n      <p>Get the best news in your e-mail every day.</p>\n    </div>\n  </div>\n\n  <div ui-dropdown=\"selection: messageIcon\">\n    <input name=\"messageIcon\" type=\"hidden\" value.bind=\"messageIcon\">\n    <i class=\"dropdown icon\"></i>\n    <div class=\"default text\">Message Icon</div>\n    <div class=\"menu\">\n      <div class=\"item\" data-value=\"inbox\">Inbox</div>\n      <div class=\"item\" data-value=\"teal lab\">Lab</div>\n      <div class=\"item\" data-value=\"payment\">Payment</div>\n      <div class=\"item\" data-value=\"calendar\">Calendar</div>\n      <div class=\"item\" data-value=\"horizontally flipped comment\">Comment</div>\n    </div>\n  </div> -->\n  <div class=\"ui middle aligned center aligned grid\">\n    <div class=\"six wide column\">\n      <h2 class=\"ui teal image header\">\n\n        <div class=\"content\">\n          Log-in to your account\n        </div>\n      </h2>\n      <form class=\"ui large form\" submit.delegate=\"login()\">\n        <div class=\"ui stacked segment\">\n          <div class=\"field\">\n            <div class=\"ui left icon input\">\n              <i class=\"user icon\"></i>\n              <input type=\"text\" name=\"email\" value.bind=\"entity.identifier\" placeholder=\"E-mail address\">\n            </div>\n          </div>\n          <div class=\"field\">\n            <div class=\"ui left icon input\">\n              <i class=\"lock icon\"></i>\n              <input type=\"password\" name=\"password\" value.bind=\"entity.password\" placeholder=\"Password\">\n            </div>\n          </div>\n          <button type=\"submit\" class=\"ui button green\">Login</button>\n        </div>\n\n        <div class=\"ui error message\"></div>\n\n      </form>\n\n      <div class=\"ui message\">\n        New to us? <a>Sign Up</a>\n      </div>\n    </div>\n  </div>\n</template>\n";

/***/ },
/* 73 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var configForDevelopment = {
	  providers: {
	    google: {
	      clientId: '239531826023-ibk10mb9p7ull54j55a61og5lvnjrff6.apps.googleusercontent.com'
	    } /*
	      ,
	      linkedin:{
	       clientId:'778mif8zyqbei7'
	      },
	      facebook:{
	       clientId:'1452782111708498'
	      }*/
	  }
	};
	
	var configForProduction = {
	  providers: {
	    google: {
	      clientId: '239531826023-3ludu3934rmcra3oqscc1gid3l9o497i.apps.googleusercontent.com'
	    } /*
	      ,
	      linkedin:{
	       clientId:'7561959vdub4x1'
	      },
	      facebook:{
	       clientId:'1653908914832509'
	      }*/
	
	  }
	};
	var config;
	if (window.location.hostname === 'localhost') {
	  config = configForDevelopment;
	} else {
	  config = configForProduction;
	}
	
	exports.default = config;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Breadcrumb - http://semantic-ui.com/collections/breadcrumb.html
	 */
	
	exports.__esModule = true;
	exports.UIBreadcrumbDividerAttribute = exports.UIBreadcrumbSectionAttribute = exports.UIBreadcrumbAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _dec4, _class4, _desc2, _value2, _class5, _descriptor4, _dec5, _class7;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIBreadcrumbAttribute = exports.UIBreadcrumbAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'breadcrumb'), _dec2 = (0, _uiAttribute.bindableEnum)('small', 'large', 'huge'), _dec3 = (0, _aureliaFramework.children)('[ui-breadcrumb-section]'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIBreadcrumbAttribute, _UIAttribute);
	
		function UIBreadcrumbAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIBreadcrumbAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'divider', _descriptor, _this), _initDefineProp(_this, 'size', _descriptor2, _this), _initDefineProp(_this, 'sections', _descriptor3, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIBreadcrumbAttribute.prototype.bind = function bind() {
			_UIAttribute.prototype.bind.call(this);
	
			if (this.divider) {
				var dividerNode = null;
	
				// Icon divider (<i>)
				if (this.divider.match(/\bicon\b/)) {
					var _dividerNode$classLis;
	
					this.logger.debug('Icon divider (' + this.divider + ')');
					dividerNode = document.createElement('i');
					(_dividerNode$classLis = dividerNode.classList).add.apply(_dividerNode$classLis, this.divider.split(/\s+/));
					dividerNode.classList.add('divider');
				}
	
				// Text divider (<span>)
				else {
						this.logger.debug('Text divider (' + this.divider + ')');
						var content = document.createTextNode(this.divider);
						dividerNode = document.createElement('span');
						dividerNode.classList.add('divider');
						dividerNode.appendChild(content);
					}
	
				for (var i in this.sections) {
					if (i > 0) {
						var section = this.sections[i];
						this.element.insertBefore(dividerNode.cloneNode(true), section);
					}
				}
			}
		};
	
		return UIBreadcrumbAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'divider', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'sections', [_dec3], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	
	/**
	 * ui-breadcrumb-section
	 */
	
	var UIBreadcrumbSectionAttribute = exports.UIBreadcrumbSectionAttribute = (_dec4 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'breadcrumb-section'), _dec4(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UIBreadcrumbSectionAttribute, _UIAttribute2);
	
		function UIBreadcrumbSectionAttribute() {
			var _temp2, _this2, _ret2;
	
			_classCallCheck(this, UIBreadcrumbSectionAttribute);
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'active', _descriptor4, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}
	
		UIBreadcrumbSectionAttribute.prototype.bind = function bind() {
			// No super
			this.element.classList.add('section');
		};
	
		return UIBreadcrumbSectionAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, 'active', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class5)) || _class4);
	
	/**
	 * ui-breadcrumb-divider
	 */
	
	var UIBreadcrumbDividerAttribute = exports.UIBreadcrumbDividerAttribute = (_dec5 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'breadcrumb-divider'), _dec5(_class7 = function (_UIAttribute3) {
		_inherits(UIBreadcrumbDividerAttribute, _UIAttribute3);
	
		function UIBreadcrumbDividerAttribute() {
			_classCallCheck(this, UIBreadcrumbDividerAttribute);
	
			return _possibleConstructorReturn(this, _UIAttribute3.apply(this, arguments));
		}
	
		UIBreadcrumbDividerAttribute.prototype.bind = function bind() {
			// No super
			if (this.element.classList) {
				this.element.classList.add('divider');
			}
		};
	
		return UIBreadcrumbDividerAttribute;
	}(_uiAttribute.UIAttribute)) || _class7);

/***/ },
/* 75 */
/***/ function(module, exports) {

	/* -*- javascript -*- */
	"use strict";
	
	exports.__esModule = true;
	var constants = exports.constants = {
		attributePrefix: 'ui-',
		elementPrefix: 'ui-',
		VALID_SIZES: ['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive'],
		VALID_COLORS: ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey', 'black']
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * UIAttribute -- base class for Semantic UI attributes
	 */
	
	exports.__esModule = true;
	exports.UIAttribute = undefined;
	
	var _dec, _class;
	
	exports.bindableEnum = bindableEnum;
	exports.bindableToggle = bindableToggle;
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var UI_ATTRIBUTE_NAME = /UI(\w+)Attribute/;
	
	var UIAttribute = exports.UIAttribute = (_dec = (0, _aureliaFramework.inject)(Element), _dec(_class = function () {
		function UIAttribute(element) {
			_classCallCheck(this, UIAttribute);
	
			this.logger = _aureliaFramework.LogManager.getLogger(this.constructor.name);
			this.element = element;
		}
	
		UIAttribute.prototype.bind = function bind() {
			var nameMatch = UI_ATTRIBUTE_NAME.exec(this.constructor.name);
	
			if (nameMatch) {
				var attrName = nameMatch[1].toLowerCase();
				this.element.classList.add('ui', attrName);
			} else {
				this.logger.warn("Attribute class doesn't match the naming convention; ", "assuming it's going to manage the classList itself.");
			}
		};
	
		return UIAttribute;
	}()) || _class);
	function bindableEnum() {
		// console.debug( "Bindable enum decorator called with: ", validValues );
		return function (target, name, descriptor) {
			var changedMethodName = name + 'Changed';
			// console.debug( "Setting up a ", changedMethodName, " method on ", target );
			target[changedMethodName] = function (newValue, oldValue) {
				this.logger.debug('Changing ' + name + ' to ' + newValue + ' from ' + oldValue);
				this.element.classList.remove(oldValue);
				this.element.classList.add(newValue);
			};
	
			var originalBind = target.bind;
			target.bind = function () {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}
	
				Reflect.apply(originalBind, this, args);
				if (this[name]) {
					this.element.classList.add(this[name]);
				}
			};
	
			return (0, _aureliaFramework.bindable)(target, name, descriptor);
		};
	}
	
	function bindableToggle(target, name, descriptor) {
		// console.debug( "Bindable toggle decorator called with args: ", target, name, descriptor );
		var changedMethodName = name + 'Changed';
		// console.debug( "Setting up a ", changedMethodName, " method on ", target );
		target[changedMethodName] = function (newValue) {
			this.logger.debug('Toggling ' + name + ' to ' + (newValue ? 'on' : 'off') + '.');
			if (newValue) {
				this.element.classList.add(name);
			} else {
				this.element.classList.remove(name);
			}
		};
	
		var originalBind = target.bind;
		target.bind = function () {
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			Reflect.apply(originalBind, this, args);
			if (this[name]) {
				this.element.classList.add(name);
			}
		};
	
		return (0, _aureliaFramework.bindable)(target, name, descriptor);
	}

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Form - http://semantic-ui.com/collections/form.html
	 */
	
	exports.__esModule = true;
	exports.UICheckboxAttribute = exports.UIFormAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _dec3, _class4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIFormAttribute = exports.UIFormAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'form'), _dec2 = (0, _aureliaFramework.children)('.field'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIFormAttribute, _UIAttribute);
	
		function UIFormAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIFormAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'loading', _descriptor, _this), _initDefineProp(_this, 'error', _descriptor2, _this), _initDefineProp(_this, 'success', _descriptor3, _this), _initDefineProp(_this, 'warning', _descriptor4, _this), _initDefineProp(_this, 'fields', _descriptor5, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UIFormAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'loading', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'error', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'success', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'warning', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'fields', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UICheckboxAttribute = exports.UICheckboxAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'checkbox'), _dec3(_class4 = function (_UIAttribute2) {
		_inherits(UICheckboxAttribute, _UIAttribute2);
	
		function UICheckboxAttribute() {
			_classCallCheck(this, UICheckboxAttribute);
	
			return _possibleConstructorReturn(this, _UIAttribute2.apply(this, arguments));
		}
	
		UICheckboxAttribute.prototype.attached = function attached() {
			this.logger.debug("Activating a ui-checkbox");
			$(this.element).checkbox();
		};
	
		return UICheckboxAttribute;
	}(_uiAttribute.UIAttribute)) || _class4);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Grid - http://semantic-ui.com/collections/grid.html
	 */
	
	exports.__esModule = true;
	exports.UIGridAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIGridAttribute = exports.UIGridAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'grid'), _dec2 = (0, _aureliaFramework.children)('.column'), _dec(_class = (_class2 = function (_UIAttribute) {
	  _inherits(UIGridAttribute, _UIAttribute);

	  function UIGridAttribute() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, UIGridAttribute);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'columns', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  return UIGridAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'columns', [_dec2], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class);

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Menu - http://semantic-ui.com/collections/menu.html
	 */
	
	exports.__esModule = true;
	exports.UIMenuItemAttribute = exports.UIMenuAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _dec3, _class4, _desc2, _value2, _class5, _descriptor3;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIMenuAttribute = exports.UIMenuAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'menu'), _dec2 = (0, _aureliaFramework.children)('[ui-menu-item]'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIMenuAttribute, _UIAttribute);
	
		function UIMenuAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIMenuAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'router', _descriptor, _this), _initDefineProp(_this, 'items', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIMenuAttribute.prototype.isSubmenu = function isSubmenu() {
			var parent = this.element.parentElement;
			if (!parent) {
				return false;
			}
	
			var classes = parent.classList;
			if (!classes) {
				return false;
			}
	
			return classes.contains('item') || classes.contains('menu');
		};
	
		UIMenuAttribute.prototype.bind = function bind() {
			// Don't super for sub-menus because they shouldn't get the 'ui'
			if (this.isSubmenu()) {
				this.element.classList.add('menu');
			} else {
				_UIAttribute.prototype.bind.call(this);
			}
		};
	
		return UIMenuAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'router', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'items', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	
	/**
	 * ui-menu-item
	 */
	
	var UIMenuItemAttribute = exports.UIMenuItemAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'menu-item'), _dec3(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UIMenuItemAttribute, _UIAttribute2);
	
		function UIMenuItemAttribute() {
			var _temp2, _this2, _ret2;
	
			_classCallCheck(this, UIMenuItemAttribute);
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'active', _descriptor3, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}
	
		UIMenuItemAttribute.prototype.bind = function bind() {
			// no super
			this.element.classList.add('item');
		};
	
		return UIMenuItemAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, 'active', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class5)) || _class4);

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Message - http://semantic-ui.com/collections/message.html
	 */
	
	exports.__esModule = true;
	exports.UIMessageAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIMessageAttribute = exports.UIMessageAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'message'), _dec2 = (0, _aureliaFramework.child)('i.ui.icon'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIMessageAttribute, _UIAttribute);
	
		function UIMessageAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIMessageAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'icon', _descriptor, _this), _initDefineProp(_this, 'iconElement', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIMessageAttribute.prototype.bind = function bind() {
			var _UIAttribute$prototyp;
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			(_UIAttribute$prototyp = _UIAttribute.prototype.bind).call.apply(_UIAttribute$prototyp, [this].concat(args));
			if (this.icon) {
				this.logger.debug('Adding \'icon\' to the list of classes.');
				this.element.classList.add('icon');
			}
		};
	
		UIMessageAttribute.prototype.attached = function attached() {
			this.logger.debug("Attaching a ui-message. Icon element is: ", this.iconElement);
	
			// Inject the icon if it's set but not already there
			if (this.icon && !this.iconElement) {
				var _iconNode$classList;
	
				this.logger.debug('Creating a ' + this.icon + ' icon for ', this.element);
				var iconNode = document.createElement('i');
				iconNode.classList.add('ui', 'icon');
				(_iconNode$classList = iconNode.classList).add.apply(_iconNode$classList, this.icon.split(' '));
				this.element.insertBefore(iconNode, this.element.firstChild);
				this.iconElement = iconNode;
			}
		};
	
		UIMessageAttribute.prototype.iconChanged = function iconChanged(newValue, oldValue) {
			if (this.iconElement) {
				this.logger.debug('Swapping icon of ' + this.iconElement + ' to ' + newValue + ' from ' + oldValue);
				if (oldValue) {
					var _iconElement$classLis;
	
					(_iconElement$classLis = this.iconElement.classList).remove.apply(_iconElement$classLis, oldValue.split(' '));
				}
				if (newValue) {
					var _iconElement$classLis2;
	
					(_iconElement$classLis2 = this.iconElement.classList).add.apply(_iconElement$classLis2, newValue.split(' '));
				}
			}
		};
	
		return UIMessageAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'icon', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'iconElement', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Table - http://semantic-ui.com/collections/table.html
	 */
	
	exports.__esModule = true;
	exports.UITableAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UITableAttribute = exports.UITableAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'table'), _dec(_class = function (_UIAttribute) {
	  _inherits(UITableAttribute, _UIAttribute);

	  function UITableAttribute() {
	    _classCallCheck(this, UITableAttribute);

	    return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
	  }

	  return UITableAttribute;
	}(_uiAttribute.UIAttribute)) || _class);

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Button - http://semantic-ui.com/elements/button.html
	 */
	
	exports.__esModule = true;
	exports.UIButtonsAttribute = exports.UIButtonAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _dec4, _class4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIButtonAttribute = exports.UIButtonAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'button'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec3 = (0, _aureliaFramework.child)('i.ui.icon'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIButtonAttribute, _UIAttribute);
	
		function UIButtonAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIButtonAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'icon', _descriptor, _this), _initDefineProp(_this, 'color', _descriptor2, _this), _initDefineProp(_this, 'disabled', _descriptor3, _this), _initDefineProp(_this, 'iconElement', _descriptor4, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIButtonAttribute.prototype.bind = function bind() {
			var _UIAttribute$prototyp;
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			(_UIAttribute$prototyp = _UIAttribute.prototype.bind).call.apply(_UIAttribute$prototyp, [this].concat(args));
			if (this.icon) {
				this.logger.debug('Adding \'icon\' to the list of classes.');
				this.element.classList.add('icon');
			}
		};
	
		UIButtonAttribute.prototype.attached = function attached() {
			// Inject the icon if it's set but not already there
			if (this.icon && !this.iconElement) {
				var _iconNode$classList;
	
				this.logger.debug('Creating a ' + this.icon + ' icon for ', this.element);
				var iconNode = document.createElement('i');
				iconNode.classList.add('ui', 'icon');
				(_iconNode$classList = iconNode.classList).add.apply(_iconNode$classList, this.icon.split(' '));
				this.element.insertBefore(iconNode, this.element.firstChild);
				this.iconElement = iconNode;
			}
		};
	
		UIButtonAttribute.prototype.iconChanged = function iconChanged(newValue, oldValue) {
			if (this.iconElement) {
				this.logger.debug('Swapping icon of ' + this.iconElement + ' to ' + newValue + ' from ' + oldValue);
				if (oldValue) {
					var _iconElement$classLis;
	
					(_iconElement$classLis = this.iconElement.classList).remove.apply(_iconElement$classLis, oldValue.split(' '));
				}
				if (newValue) {
					var _iconElement$classLis2;
	
					(_iconElement$classLis2 = this.iconElement.classList).add.apply(_iconElement$classLis2, newValue.split(' '));
				}
			}
		};
	
		return UIButtonAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'icon', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'iconElement', [_dec3], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UIButtonsAttribute = exports.UIButtonsAttribute = (_dec4 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'buttons'), _dec4(_class4 = function (_UIAttribute2) {
		_inherits(UIButtonsAttribute, _UIAttribute2);

		function UIButtonsAttribute() {
			_classCallCheck(this, UIButtonsAttribute);

			return _possibleConstructorReturn(this, _UIAttribute2.apply(this, arguments));
		}

		return UIButtonsAttribute;
	}(_uiAttribute.UIAttribute)) || _class4);

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Container - http://semantic-ui.com/elements/container.html
	 */
	
	exports.__esModule = true;
	exports.UIContainerAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UIContainerAttribute = exports.UIContainerAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'container'), _dec(_class = function (_UIAttribute) {
	  _inherits(UIContainerAttribute, _UIAttribute);

	  function UIContainerAttribute() {
	    _classCallCheck(this, UIContainerAttribute);

	    return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
	  }

	  return UIContainerAttribute;
	}(_uiAttribute.UIAttribute)) || _class);

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Divider - http://semantic-ui.com/elements/divider.html
	 */
	
	exports.__esModule = true;
	exports.UIDividerAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UIDividerAttribute = exports.UIDividerAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'divider'), _dec(_class = function (_UIAttribute) {
	  _inherits(UIDividerAttribute, _UIAttribute);

	  function UIDividerAttribute() {
	    _classCallCheck(this, UIDividerAttribute);

	    return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
	  }

	  return UIDividerAttribute;
	}(_uiAttribute.UIAttribute)) || _class);

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Flag - http://semantic-ui.com/elements/flag.html
	 */
	
	exports.__esModule = true;
	exports.UIFlagAttribute = undefined;
	
	var _dec, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	    if (!descriptor) return;
	    Object.defineProperty(target, property, {
	        enumerable: descriptor.enumerable,
	        configurable: descriptor.configurable,
	        writable: descriptor.writable,
	        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	    });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;
	
	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }
	
	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);
	
	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }
	
	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }
	
	    return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIFlagAttribute = exports.UIFlagAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'flag'), _dec(_class = (_class2 = function (_UIAttribute) {
	    _inherits(UIFlagAttribute, _UIAttribute);
	
	    function UIFlagAttribute() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, UIFlagAttribute);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'country', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    UIFlagAttribute.prototype.bind = function bind() {
	        var _UIAttribute$prototyp;
	
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	            args[_key2] = arguments[_key2];
	        }
	
	        (_UIAttribute$prototyp = _UIAttribute.prototype.bind).call.apply(_UIAttribute$prototyp, [this].concat(args));
	        if (this.country) {
	            var _element$classList;
	
	            (_element$classList = this.element.classList).add.apply(_element$classList, this.country.split(' '));
	        }
	    };
	
	    UIFlagAttribute.prototype.countryChanged = function countryChanged(newValue, oldValue) {
	        if (oldValue) {
	            var _element$classList2;
	
	            (_element$classList2 = this.element.classList).remove.apply(_element$classList2, oldValue.split(' '));
	        }
	        if (newValue) {
	            var _element$classList3;
	
	            (_element$classList3 = this.element.classList).add.apply(_element$classList3, newValue.split(' '));
	        }
	    };
	
	    return UIFlagAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'country', [_aureliaFramework.bindable], {
	    enumerable: true,
	    initializer: null
	})), _class2)) || _class);

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Content Header - http://semantic-ui.com/elements/header.html#content-headers
	 */
	
	exports.__esModule = true;
	exports.UIHeaderAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIHeaderAttribute = exports.UIHeaderAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'header'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec3 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec(_class = (_class2 = function (_UIAttribute) {
	  _inherits(UIHeaderAttribute, _UIAttribute);

	  function UIHeaderAttribute() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, UIHeaderAttribute);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'size', _descriptor, _this), _initDefineProp(_this, 'color', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  return UIHeaderAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
	  enumerable: true,
	  initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec3], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class);

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Icon - http://semantic-ui.com/elements/icon.html#/definition
	 */
	
	exports.__esModule = true;
	exports.UIIconsAttribute = exports.UIIconAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _dec4, _dec5, _class4, _desc2, _value2, _class5, _descriptor6;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIIconAttribute = exports.UIIconAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'icon'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec3 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIIconAttribute, _UIAttribute);
	
		function UIIconAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIIconAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'name', _descriptor, _this), _initDefineProp(_this, 'size', _descriptor2, _this), _initDefineProp(_this, 'color', _descriptor3, _this), _initDefineProp(_this, 'disabled', _descriptor4, _this), _initDefineProp(_this, 'loading', _descriptor5, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIIconAttribute.prototype.bind = function bind() {
			var _element$classList;
	
			// No super, as the classList doesn't get the 'ui' class.
			(_element$classList = this.element.classList).add.apply(_element$classList, this.name.split(' '));
			this.element.classList.add('icon');
		};
	
		UIIconAttribute.prototype.nameChanged = function nameChanged(newValue, oldValue) {
			var _element$classList2, _element$classList3;
	
			this.logger.debug('Name changed from ' + oldValue + ' to ' + newValue);
			(_element$classList2 = this.element.classList).remove.apply(_element$classList2, oldValue.split(' '));
			(_element$classList3 = this.element.classList).add.apply(_element$classList3, newValue.split(' '));
		};
	
		return UIIconAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'name', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: function initializer() {
			return "help circle";
		}
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec3], {
		enumerable: true,
		initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'loading', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UIIconsAttribute = exports.UIIconsAttribute = (_dec4 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'icons'), _dec5 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec4(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UIIconsAttribute, _UIAttribute2);

		function UIIconsAttribute() {
			var _temp2, _this2, _ret2;

			_classCallCheck(this, UIIconsAttribute);

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'size', _descriptor6, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}

		return UIIconsAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor6 = _applyDecoratedDescriptor(_class5.prototype, 'size', [_dec5], {
		enumerable: true,
		initializer: null
	})), _class5)) || _class4);

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Image - http://semantic-ui.com/elements/image.html
	 */
	
	exports.__esModule = true;
	exports.UIImagesAttribute = exports.UIImageAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _dec3, _dec4, _class4, _desc2, _value2, _class5, _descriptor4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIImageAttribute = exports.UIImageAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'image'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIImageAttribute, _UIAttribute);
	
		function UIImageAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIImageAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'size', _descriptor, _this), _initDefineProp(_this, 'hidden', _descriptor2, _this), _initDefineProp(_this, 'disabled', _descriptor3, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UIImageAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'hidden', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class2)) || _class);
	var UIImagesAttribute = exports.UIImagesAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'images'), _dec4 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec3(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UIImagesAttribute, _UIAttribute2);

		function UIImagesAttribute() {
			var _temp2, _this2, _ret2;

			_classCallCheck(this, UIImagesAttribute);

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'size', _descriptor4, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}

		return UIImagesAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, 'size', [_dec4], {
		enumerable: true,
		initializer: null
	})), _class5)) || _class4);

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Input - http://semantic-ui.com/elements/input.html
	 */
	
	exports.__esModule = true;
	exports.UIInputAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIInputAttribute = exports.UIInputAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'input'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIInputAttribute, _UIAttribute);
	
		function UIInputAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIInputAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'focus', _descriptor, _this), _initDefineProp(_this, 'loading', _descriptor2, _this), _initDefineProp(_this, 'disabled', _descriptor3, _this), _initDefineProp(_this, 'error', _descriptor4, _this), _initDefineProp(_this, 'size', _descriptor5, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UIInputAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'focus', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'loading', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'error', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return null;
		}
	}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Label - http://semantic-ui.com/elements/label.html
	 */
	
	exports.__esModule = true;
	exports.UILabelsAttribute = exports.UILabelAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _desc2, _value2, _class5, _descriptor3, _descriptor4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UILabelAttribute = exports.UILabelAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'label'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec3 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UILabelAttribute, _UIAttribute);
	
		function UILabelAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UILabelAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'color', _descriptor, _this), _initDefineProp(_this, 'size', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UILabelAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec3], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UILabelsAttribute = exports.UILabelsAttribute = (_dec4 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'labels'), _dec5 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec6 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec4(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UILabelsAttribute, _UIAttribute2);

		function UILabelsAttribute() {
			var _temp2, _this2, _ret2;

			_classCallCheck(this, UILabelsAttribute);

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'color', _descriptor3, _this2), _initDefineProp(_this2, 'size', _descriptor4, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}

		return UILabelsAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, 'color', [_dec5], {
		enumerable: true,
		initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, 'size', [_dec6], {
		enumerable: true,
		initializer: null
	})), _class5)) || _class4);

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * List - http://semantic-ui.com/elements/list.html
	 */
	
	exports.__esModule = true;
	exports.UIListAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _uiAttribute = __webpack_require__(76);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIListAttribute = exports.UIListAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'list'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec(_class = (_class2 = function (_UIAttribute) {
	  _inherits(UIListAttribute, _UIAttribute);

	  function UIListAttribute() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, UIListAttribute);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'size', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  return UIListAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class);

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Loader - http://semantic-ui.com/elements/loader.html
	 */
	
	exports.__esModule = true;
	exports.UILoaderAttribute = undefined;
	
	var _dec, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UILoaderAttribute = exports.UILoaderAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'loader'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UILoaderAttribute, _UIAttribute);
	
		function UILoaderAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UILoaderAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'active', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UILoaderAttribute.prototype.bind = function bind() {
			var _UIAttribute$prototyp;
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			(_UIAttribute$prototyp = _UIAttribute.prototype.bind).call.apply(_UIAttribute$prototyp, [this].concat(args));
	
			if (this.active) {
				this.logger.debug("Loader is starting out active.");
				this.element.classList.add('active');
			};
		};
	
		UILoaderAttribute.prototype.activeChanged = function activeChanged(newValue) {
			if (newValue) {
				this.logger.debug("Activating loader.");
				this.element.classList.remove('disabled');
				this.element.classList.add('active');
			} else {
				this.logger.debug("Deactivating loader.");
				this.element.classList.remove('active');
				this.element.classList.add('disabled');
			}
		};
	
		return UILoaderAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'active', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class2)) || _class);

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Content Rail - http://semantic-ui.com/elements/rail.html
	 */
	
	exports.__esModule = true;
	exports.UIRailAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIRailAttribute = exports.UIRailAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'rail'), _dec2 = (0, _uiAttribute.bindableEnum)('left', 'right'), _dec(_class = (_class2 = function (_UIAttribute) {
	  _inherits(UIRailAttribute, _UIAttribute);
	
	  function UIRailAttribute() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, UIRailAttribute);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'side', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  return UIRailAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'side', [_dec2], {
	  enumerable: true,
	  initializer: function initializer() {
	    return 'left';
	  }
	})), _class2)) || _class);

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Content Reveal - http://semantic-ui.com/elements/reveal.html
	 */
	
	exports.__esModule = true;
	exports.UIRevealHiddenAttribute = exports.UIRevealVisibleAttribute = exports.UIRevealAttribute = undefined;
	
	var _dec, _class, _desc, _value, _class2, _descriptor, _dec2, _class4, _dec3, _class5;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIRevealAttribute = exports.UIRevealAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'reveal'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIRevealAttribute, _UIAttribute);
	
		function UIRevealAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIRevealAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'active', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UIRevealAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'active', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UIRevealVisibleAttribute = exports.UIRevealVisibleAttribute = (_dec2 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'reveal-visible'), _dec2(_class4 = function (_UIAttribute2) {
		_inherits(UIRevealVisibleAttribute, _UIAttribute2);
	
		function UIRevealVisibleAttribute() {
			_classCallCheck(this, UIRevealVisibleAttribute);
	
			return _possibleConstructorReturn(this, _UIAttribute2.apply(this, arguments));
		}
	
		UIRevealVisibleAttribute.prototype.bind = function bind() {
			// No super
			this.element.classList.add('visible', 'content');
		};
	
		return UIRevealVisibleAttribute;
	}(_uiAttribute.UIAttribute)) || _class4);
	var UIRevealHiddenAttribute = exports.UIRevealHiddenAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'reveal-hidden'), _dec3(_class5 = function (_UIAttribute3) {
		_inherits(UIRevealHiddenAttribute, _UIAttribute3);
	
		function UIRevealHiddenAttribute() {
			_classCallCheck(this, UIRevealHiddenAttribute);
	
			return _possibleConstructorReturn(this, _UIAttribute3.apply(this, arguments));
		}
	
		UIRevealHiddenAttribute.prototype.bind = function bind() {
			// No super
			this.element.classList.add('hidden', 'content');
		};
	
		return UIRevealHiddenAttribute;
	}(_uiAttribute.UIAttribute)) || _class5);

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Segment - http://semantic-ui.com/elements/segment.html
	 */
	
	exports.__esModule = true;
	exports.UISegmentsAttribute = exports.UISegmentAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _dec3, _class4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UISegmentAttribute = exports.UISegmentAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'segment'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UISegmentAttribute, _UIAttribute);
	
		function UISegmentAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UISegmentAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'loading', _descriptor, _this), _initDefineProp(_this, 'disabled', _descriptor2, _this), _initDefineProp(_this, 'color', _descriptor3, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UISegmentAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'loading', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UISegmentsAttribute = exports.UISegmentsAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'segments'), _dec3(_class4 = function (_UIAttribute2) {
		_inherits(UISegmentsAttribute, _UIAttribute2);

		function UISegmentsAttribute() {
			_classCallCheck(this, UISegmentsAttribute);

			return _possibleConstructorReturn(this, _UIAttribute2.apply(this, arguments));
		}

		return UISegmentsAttribute;
	}(_uiAttribute.UIAttribute)) || _class4);

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Step - http://semantic-ui.com/elements/step.html
	 */
	
	exports.__esModule = true;
	exports.UIStepsAttribute = exports.UIStepAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _dec3, _class4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIStepAttribute = exports.UIStepAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'step'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIStepAttribute, _UIAttribute);
	
		function UIStepAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIStepAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'active', _descriptor, _this), _initDefineProp(_this, 'disabled', _descriptor2, _this), _initDefineProp(_this, 'completed', _descriptor3, _this), _initDefineProp(_this, 'color', _descriptor4, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIStepAttribute.prototype.bind = function bind() {
			// No super
			this.element.classList.add('step');
		};
	
		return UIStepAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'active', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'completed', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec2], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UIStepsAttribute = exports.UIStepsAttribute = (_dec3 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'steps'), _dec3(_class4 = function (_UIAttribute2) {
		_inherits(UIStepsAttribute, _UIAttribute2);

		function UIStepsAttribute() {
			_classCallCheck(this, UIStepsAttribute);

			return _possibleConstructorReturn(this, _UIAttribute2.apply(this, arguments));
		}

		return UIStepsAttribute;
	}(_uiAttribute.UIAttribute)) || _class4);

/***/ },
/* 97 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.configure = configure;
	/**
	 * Aurelia-Semantic-UI -- Aurelia components for Semantic-UI
	 * $Id$
	 *
	 * Authors
	 * - Michael Granger <ged@FaerieMUD.org>
	 */
	/*
	import 'node_modules/semantic-ui';
	import 'node_modules/semantic-ui/semantic.css!';*/
	
	var VERSION = exports.VERSION = '0.0.1-alpha.4';
	
	// Aurelia plugin hook
	function configure(config) {
		config.globalResources('./collections/ui-breadcrumb', './collections/ui-form', './collections/ui-grid', './collections/ui-menu', './collections/ui-message', './collections/ui-table', './elements/ui-button', './elements/ui-container', './elements/ui-divider', './elements/ui-flag', './elements/ui-header', './elements/ui-icon', './elements/ui-image', './elements/ui-input', './elements/ui-label', './elements/ui-list', './elements/ui-loader', './elements/ui-rail', './elements/ui-reveal', './elements/ui-segment', './elements/ui-step', './modules/ui-accordion', './modules/ui-dropdown', './modules/ui-modal', './modules/ui-search', './modules/ui-sidebar', './views/ui-card', './views/ui-statistic');
	}

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Accordion - http://semantic-ui.com/modules/accordion.html
	 */
	
	exports.__esModule = true;
	exports.UIAccordionAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UIAccordionAttribute = exports.UIAccordionAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'accordion'), _dec(_class = function (_UIAttribute) {
	    _inherits(UIAccordionAttribute, _UIAttribute);
	
	    function UIAccordionAttribute() {
	        _classCallCheck(this, UIAccordionAttribute);
	
	        return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
	    }
	
	    UIAccordionAttribute.prototype.attached = function attached() {
	        this.logger.debug("Activating accordion for ", this.element);
	        $(this.element).accordion();
	    };
	
	    return UIAccordionAttribute;
	}(_uiAttribute.UIAttribute)) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Dropdown - http://semantic-ui.com/modules/dropdown.html
	 */
	
	exports.__esModule = true;
	exports.UIDropdownAttribute = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIDropdownAttribute = exports.UIDropdownAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'dropdown'), _dec2 = (0, _aureliaFramework.bindable)({ defaultBindingMode: _aureliaFramework.bindingMode.twoWay }), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIDropdownAttribute, _UIAttribute);
	
		function UIDropdownAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIDropdownAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'selection', _descriptor, _this), _initDefineProp(_this, 'loading', _descriptor2, _this), _initDefineProp(_this, 'error', _descriptor3, _this), _initDefineProp(_this, 'disabled', _descriptor4, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIDropdownAttribute.prototype.bind = function bind() {
			var _UIAttribute$prototyp;
	
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}
	
			(_UIAttribute$prototyp = _UIAttribute.prototype.bind).call.apply(_UIAttribute$prototyp, [this].concat(args));
	
			if (this.selection) {
				var name = this.selection;
				this.logger.debug("Selection set to: ", name);
				this.element.classList.add('selection');
	
				if (this.element.tagName !== 'select') {
					this.logger.debug("Non-select dropdown.");
	
					// TODO: This doesn't work yet; it injects the hidden field, but the binding
					// doesn't work. It likely needs to be hooked up manually, but I have no
					// clue how to do that currently.
					var input = this.element.querySelector('input[type=hidden]');
					if (!input) {
						this.logger.debug('No hidden input for ' + name + '; creating one.');
						input = document.createElement('input');
						input.type = 'hidden';
						input.name = name;
	
						var binding = document.createAttribute("value.bind");
						binding.value = name;
						input.setAttributeNode(binding);
	
						this.element.insertBefore(input, this.element.firstChild);
					} else {
						this.logger.debug("Already has a hidden element: ", input);
					}
				}
			}
		};
	
		UIDropdownAttribute.prototype.attached = function attached() {
			this.logger.debug("Activating dropdown for ", this.element);
			$(this.element).dropdown();
		};
	
		return UIDropdownAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selection', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'loading', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'error', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'disabled', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class2)) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Modal - http://semantic-ui.com/modules/modal.html
	 */
	
	exports.__esModule = true;
	exports.UIModalAttribute = undefined;
	
	var _dec, _class, _desc, _value, _class2, _descriptor;
	
	var _constants = __webpack_require__(75);
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _uiAttribute = __webpack_require__(76);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIModalAttribute = exports.UIModalAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'modal'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIModalAttribute, _UIAttribute);
	
		function UIModalAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIModalAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'active', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UIModalAttribute.prototype.attached = function attached() {
			$(this.element).modal();
		};
	
		UIModalAttribute.prototype.activeChanged = function activeChanged(newValue) {
			if (newValue) {
				$(this.element).modal('show');
			} else {
				$(this.element).modal('hide');
			}
		};
	
		return UIModalAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'active', [_uiAttribute.bindableToggle], {
		enumerable: true,
		initializer: function initializer() {
			return false;
		}
	})), _class2)) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Search - http://semantic-ui.com/modules/search.html
	 */
	
	exports.__esModule = true;
	exports.UISearchAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UISearchAttribute = exports.UISearchAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'search'), _dec(_class = function (_UIAttribute) {
		_inherits(UISearchAttribute, _UIAttribute);
	
		function UISearchAttribute() {
			_classCallCheck(this, UISearchAttribute);
	
			return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
		}
	
		UISearchAttribute.prototype.attached = function attached() {
			this.logger.debug("Activating search on ", this.element);
			$(this.element).search();
		};
	
		return UISearchAttribute;
	}(_uiAttribute.UIAttribute)) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Sidebar - http://semantic-ui.com/modules/sidebar.html
	 */
	
	exports.__esModule = true;
	exports.UISidebarAttribute = undefined;
	
	var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;
	
	var _constants = __webpack_require__(75);
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _uiAttribute = __webpack_require__(76);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UISidebarAttribute = exports.UISidebarAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'sidebar'), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UISidebarAttribute, _UIAttribute);
	
		function UISidebarAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UISidebarAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'context', _descriptor, _this), _initDefineProp(_this, 'events', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		UISidebarAttribute.prototype.attached = function attached() {
			this.logger.debug("Sidebar attached: ", this.element);
			if (this.context) {
				var contextEl = $(this.element).parent(this.context).first();
				$(this.element).sidebar({ context: contextEl });
			}
	
			if (this.events) {
				var _contextEl = $(this.element).parent(this.events).first();
				$(this.element).sidebar('attach events', _contextEl);
			}
		};
	
		UISidebarAttribute.prototype.toggle = function toggle() {
			$(this.element).sidebar('toggle');
		};
	
		return UISidebarAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'context', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'events', [_aureliaFramework.bindable], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Card - http://semantic-ui.com/views/card.html
	 */
	
	exports.__esModule = true;
	exports.UICardAttribute = undefined;
	
	var _dec, _class;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UICardAttribute = exports.UICardAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'card'), _dec(_class = function (_UIAttribute) {
	  _inherits(UICardAttribute, _UIAttribute);

	  function UICardAttribute() {
	    _classCallCheck(this, UICardAttribute);

	    return _possibleConstructorReturn(this, _UIAttribute.apply(this, arguments));
	  }

	  return UICardAttribute;
	}(_uiAttribute.UIAttribute)) || _class);

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- javascript -*- */
	"use strict";
	
	/**
	 * Statistic - http://semantic-ui.com/views/statistic.html
	 */
	
	exports.__esModule = true;
	exports.UIStatisticsAttribute = exports.UIStatisticAttribute = undefined;
	
	var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _desc2, _value2, _class5, _descriptor3, _descriptor4;
	
	var _constants = __webpack_require__(75);
	
	var _uiAttribute = __webpack_require__(76);
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
		if (!descriptor) return;
		Object.defineProperty(target, property, {
			enumerable: descriptor.enumerable,
			configurable: descriptor.configurable,
			writable: descriptor.writable,
			value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
		});
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
		var desc = {};
		Object['ke' + 'ys'](descriptor).forEach(function (key) {
			desc[key] = descriptor[key];
		});
		desc.enumerable = !!desc.enumerable;
		desc.configurable = !!desc.configurable;
	
		if ('value' in desc || desc.initializer) {
			desc.writable = true;
		}
	
		desc = decorators.slice().reverse().reduce(function (desc, decorator) {
			return decorator(target, property, desc) || desc;
		}, desc);
	
		if (context && desc.initializer !== void 0) {
			desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
			desc.initializer = undefined;
		}
	
		if (desc.initializer === void 0) {
			Object['define' + 'Property'](target, property, desc);
			desc = null;
		}
	
		return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
		throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var UIStatisticAttribute = exports.UIStatisticAttribute = (_dec = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'statistic'), _dec2 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec3 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec(_class = (_class2 = function (_UIAttribute) {
		_inherits(UIStatisticAttribute, _UIAttribute);
	
		function UIStatisticAttribute() {
			var _temp, _this, _ret;
	
			_classCallCheck(this, UIStatisticAttribute);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, _UIAttribute.call.apply(_UIAttribute, [this].concat(args))), _this), _initDefineProp(_this, 'size', _descriptor, _this), _initDefineProp(_this, 'color', _descriptor2, _this), _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		return UIStatisticAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'size', [_dec2], {
		enumerable: true,
		initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'color', [_dec3], {
		enumerable: true,
		initializer: null
	})), _class2)) || _class);
	var UIStatisticsAttribute = exports.UIStatisticsAttribute = (_dec4 = (0, _aureliaFramework.customAttribute)(_constants.constants.attributePrefix + 'statistics'), _dec5 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_SIZES), _dec6 = _uiAttribute.bindableEnum.apply(undefined, _constants.constants.VALID_COLORS), _dec4(_class4 = (_class5 = function (_UIAttribute2) {
		_inherits(UIStatisticsAttribute, _UIAttribute2);

		function UIStatisticsAttribute() {
			var _temp2, _this2, _ret2;

			_classCallCheck(this, UIStatisticsAttribute);

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _UIAttribute2.call.apply(_UIAttribute2, [this].concat(args))), _this2), _initDefineProp(_this2, 'size', _descriptor3, _this2), _initDefineProp(_this2, 'color', _descriptor4, _this2), _temp2), _possibleConstructorReturn(_this2, _ret2);
		}

		return UIStatisticsAttribute;
	}(_uiAttribute.UIAttribute), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, 'size', [_dec5], {
		enumerable: true,
		initializer: null
	}), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, 'color', [_dec6], {
		enumerable: true,
		initializer: null
	})), _class5)) || _class4);

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.FormControl = undefined;
	
	var _dec, _dec2, _dec3, _dec4, _class, _desc, _value, _class2, _descriptor, _descriptor2;
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	//default value of the property, if not bound or set in HTML
	var FormControl = exports.FormControl = (_dec = (0, _aureliaFramework.customElement)('form-control'), _dec2 = (0, _aureliaFramework.containerless)(), _dec3 = (0, _aureliaFramework.bindable)({
	  name: 'value', //name of the property on the class
	  attribute: 'value', //name of the attribute in HTML
	
	  defaultBindingMode: 2, //default binding mode used with the .bind command
	  defaultValue: undefined //default value of the property, if not bound or set in HTML
	}), _dec4 = (0, _aureliaFramework.bindable)({
	  name: 'type', //name of the property on the class
	  attribute: 'type', //name of the attribute in HTML
	  defaultValue: 'text' }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = function FormControl() {
	  _classCallCheck(this, FormControl);

	  _initDefineProp(this, 'name', _descriptor, this);

	  _initDefineProp(this, 'label', _descriptor2, this);
	}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'name', [_aureliaFramework.bindable], {
	  enumerable: true,
	  initializer: null
	}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'label', [_aureliaFramework.bindable], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class) || _class) || _class) || _class);

/***/ },
/* 106 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"field\">\n    <label for.bind=\"name\">${label}</label>\n    <input type.bind=\"type\" id.bind=\"name\" placeholder.bind=\"label\" value.bind=\"value\" class=\"mini\">\n  </div>\n</template>\n";

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.FormSubmit = undefined;
	
	var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;
	
	var _aureliaFramework = __webpack_require__(18);
	
	function _initDefineProp(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object['ke' + 'ys'](descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;
	
	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }
	
	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);
	
	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }
	
	  if (desc.initializer === void 0) {
	    Object['define' + 'Property'](target, property, desc);
	    desc = null;
	  }
	
	  return desc;
	}
	
	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	}
	
	var FormSubmit = exports.FormSubmit = (_dec = (0, _aureliaFramework.customElement)('form-submit'), _dec2 = (0, _aureliaFramework.containerless)(), _dec(_class = _dec2(_class = (_class2 = function FormSubmit() {
	  _classCallCheck(this, FormSubmit);

	  _initDefineProp(this, 'label', _descriptor, this);
	}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'label', [_aureliaFramework.bindable], {
	  enumerable: true,
	  initializer: null
	})), _class2)) || _class) || _class);

/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = "<template>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"col-sm-offset-2 col-sm-10\">\r\n\t\t\t<button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-send\"></i> ${label}</button>\r\n\t\t</div>\r\n\t</div>\r\n</template>";

/***/ },
/* 109 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.configure = configure;
	function configure(aurelia) {
	  aurelia.globalResources('./form-control', './form-submit'
	  //    , './nav-bar'
	  );
	}

/***/ },
/* 110 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Welcome = exports.Welcome = function Welcome() {
	  _classCallCheck(this, Welcome);
	};

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = "<template>\n<section class=\"au-animate\">\n<div id=\"example\" class=\"index full height\">\n  <div class=\"masthead segment bg9 inverted\">\n  <div class=\"ui container\">\n    <div class=\"introduction\">\n      <span class=\"ui black version label\">\n        0.0.1\n      </span>\n      <h1 class=\"ui inverted header\">\n        <span class=\"library\">\n          iQ - Admin App\n        </span>\n        <span class=\"tagline\">\n          built with Semantic User Interface\n        </span>\n      </h1>\n      <div class=\"ui hidden divider\"></div>\n      <a href=\"#/Questions\" class=\"ui huge inverted download button\">\n        Get Started with Questions\n      </a>\n    </div>\n  </div>\n</div>\n</div>\n</section>\n</template>\n";

/***/ },
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/answers/',
	  'entityToSubscribe': 'answer'
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _base = __webpack_require__(125);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  function Create(sails, router, eventAggregator) {
	    _classCallCheck(this, Create);
	
	    this.questionId = null;
	
	    this.sails = sails;
	    this.theRouter = router;
	    this.ea = eventAggregator;
	  }
	
	  Create.prototype.activate = function activate(params) {
	    this.questionId = params.id;
	  };
	
	  Create.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.post('/questions/' + this.questionId + '/answers', this.entity).then(function (data) {
	      return _this.theRouter.navigate('');
	    });
	  };
	
	  Create.prototype.attached = function attached() {
	    this.ea.publish('InAddAnswerView', true);
	  };
	
	  Create.prototype.detached = function detached() {
	    this.ea.publish('InAddAnswerView', false);
	  };
	
	  return Create;
	}()) || _class);

/***/ },
/* 127 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <div class=\"field\">\n        <label for=\"isCorrect\">Is Correct Answer</label>\n        <div class=\"ui toggle checkbox\">\n          <input id=\"isCorrect\" type=\"checkbox\" name=\"public\" checked.bind=\"entity.isCorrect\">\n          <label> </label>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"ui submit fluid button green\"><i class=\"send icon\"></i>Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	/*import {BaseListVM} from '../BaseCrudOperations/BaseListVM';
	 import {baseConfig} from './base';*/
	
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	__webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  function List(sails, router, eventAggregator) {
	    _classCallCheck(this, List);
	
	    this.sails = sails;
	    this.router = router;
	    this.ea = eventAggregator;
	  }
	
	  List.prototype.attached = function attached() {
	    this.ea.publish('InAnswersView', true);
	  };
	
	  List.prototype.detached = function detached() {
	    this.ea.publish('InAnswersView', false);
	  };
	
	  List.prototype.activate = function activate(params) {
	    var _this = this;
	
	    this.questionId = params.id;
	    return this.sails.get('/answers?question=' + params.id).then(function (res) {
	      _this.entities = res.body;
	    }).catch(function (res) {
	      console.log(res);
	    });
	  };
	
	  return List;
	}()) || _class);

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <a class=\"ui submit button blue\" route-href=\"route: addAnswer; params.bind: { id: questionId }\"><i class=\"plus icon\"></i>Add Answer</a>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Text</th>\n      <th>Description</th>\n      <th>Is Correct Answer</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.text}</td>\n        <td>${obj.desc}</td>\n        <td><i class=\"${obj.isCorrect  ?'checkmark green':'remove red'} icon\"></i></td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: viewAnswer; params.bind: { answerId: obj.id, id: questionId }\"><i class=\"edit icon\" data-content=\"Edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: viewAnswer; params.bind: { answerId: obj.id, id: questionId }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(125);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  View.prototype.attached = function attached() {};
	
	  View.prototype.detached = function detached() {};
	
	  View.prototype.getIdParam = function getIdParam(params) {
	    return params.answerId;
	  };
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 131 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <div class=\"field\">\n        <label for=\"isCorrect\">Is Correct Answer</label>\n        <div class=\"ui toggle checkbox\">\n          <input id=\"isCorrect\" type=\"checkbox\" name=\"public\" checked.bind=\"entity.isCorrect\">\n          <label> </label>\n        </div>\n      </div>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 132 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/questions/',
	  'entityToSubscribe': 'question'
	};

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: '', name: 'list', moduleId: 'question/list', title: 'List', nav: true, settings: { icon: 'list outline' } }, { route: 'create', name: 'create', moduleId: 'question/create', title: 'Add Question', nav: true, settings: { icon: 'plus' } }, { route: '/:id', name: 'details', moduleId: 'question/view', title: 'Details' }, { route: '/:id/answers', name: 'answers', moduleId: 'question/answers/list', title: 'Answers' }, { route: '/:id/answers/create', name: 'addAnswer', moduleId: 'question/answers/create', title: 'Answers', settings: { icon: 'list-alt' } }, { route: '/:id/answers/:answerId', name: 'viewAnswer', moduleId: 'question/answers/view', title: 'Details' }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	    this.subscriber = this.ea.subscribe('InAnswersView', function (data) {
	      return _this.isAnswersView = data;
	    });
	    this.subscriber = this.ea.subscribe('InAddAnswerView', function (data) {
	      return _this.isAddAnswerView = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 134 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      <i class=\"${row.settings.icon} icon\" data-content=\"View Answers\"></i>${row.title}\n    </a>\n    <a class=\"${isEdit ? 'active' : ''} item\">\n      <i class=\"unhide icon\"></i>Edit/Delete\n    </a>\n    <a class=\"${isAnswersView ? 'active' : ''} item\">\n      <i class=\"sitemap icon\"></i>Answers\n    </a>\n    <a class=\"${isAddAnswerView ? 'active' : ''} item\">\n      <i class=\"plus icon\"></i>Add Answer\n    </a>\n  </div>\n  <div class=\"ui segment\">\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n  </div>\n</template>\n";

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseCreateVM2 = __webpack_require__(11);
	
	var _base = __webpack_require__(132);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseCreateVM) {
	  _inherits(Create, _BaseCreateVM);
	
	  function Create(sails, router, baseConfig) {
	    _classCallCheck(this, Create);
	
	    return _possibleConstructorReturn(this, _BaseCreateVM.call(this, sails, router, baseConfig));
	  }
	
	  Create.prototype.activate = function activate(params) {
	    var _this2 = this;
	
	    return Promise.all([this.sails.get("/questionCategories").then(function (res) {
	      _this2.questionCategories = res.body;
	    }).catch(function (res) {
	      console.log('error');
	      console.log(res);
	    }), this.sails.get("/questionKinds").then(function (res) {
	      _this2.questionKinds = res.body;
	    }).catch(function (res) {
	      console.log('error');
	      console.log(res);
	    })]);
	  };
	
	  return Create;
	}(_BaseCreateVM2.BaseCreateVM)) || _class);

/***/ },
/* 136 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <div class=\"field\">\n        <label for.bind=\"type\" class=\"col-sm-2 control-label\">Kind</label>\n        <div ui-dropdown=\"selection: entity.kind.id\">\n          <input type=\"hidden\" value.bind=\"entity.kind.id\">\n          <i class=\"dropdown icon\"></i>\n          <div class=\"default text\">Please Select</div>\n          <div class=\"menu\">\n            <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionKinds\">${k.text}</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for.bind=\"type\" class=\"col-sm-2 control-label\">Category</label>\n        <div ui-dropdown=\"selection: entity.category.id\">\n          <input type=\"hidden\" value.bind=\"entity.category.id\">\n          <i class=\"dropdown icon\"></i>\n          <div class=\"default text\">Please Select</div>\n          <div class=\"menu\">\n            <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionCategories\">${k.text}</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for=\"Question\">Question</label>\n        <textarea id=\"Question\" name=\"text\" value.bind=\"entity.text\"></textarea>\n      </div>\n      <div class=\"field\">\n        <label for=\"isMultipleChoice\">Is Multiple Choice</label>\n        <div class=\"ui toggle checkbox\">\n          <input type=\"checkbox\" id=\"isMultipleChoice\" checked.bind=\"entity.isMultipleChoice\">\n          <label> </label>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for=\"hasManyAnswers\">Has Many Answers</label>\n        <div class=\"ui toggle checkbox\">\n          <input type=\"checkbox\" id=\"hasManyAnswers\" checked.bind=\"entity.hasManyAnswers\">\n          <label> </label>\n        </div>\n      </div>\n      <form-control name=\"score\" value.bind=\"entity.score\" label=\"Score\" type=\"number\"></form-control>\n      <button type=\"submit\" class=\"submit fluid green\" ui-button=\"icon:send\">Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.AddAnswer = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AddAnswer = exports.AddAnswer = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router), _dec(_class = function () {
	  function AddAnswer(sails, router) {
	    _classCallCheck(this, AddAnswer);
	
	    this.entity = {};
	
	    this.sails = sails;
	    this.router = router;
	  }
	
	  AddAnswer.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.put('' + this.baseCtrlUrl + this.entity.id, entity).then(function (data) {
	      return _this.router.navigate('');
	    });
	  };
	
	  AddAnswer.prototype.activate = function activate(params) {
	    var _this2 = this;
	
	    return this.sails.get('/answers').then(function (res) {
	      _this2.answers = res.body;
	      console.log(_this2.entity.kind.id);
	    }).catch(function (res) {
	      console.log(res);
	    });
	  };
	
	  return AddAnswer;
	}()) || _class);

/***/ },
/* 138 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n\n  </section>\n</template>\n";

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: [''], name: 'details', moduleId: 'question/details/view', title: 'Details', nav: true, settings: { icon: 'list-alt' } }, { route: ['/addAnswer'], name: 'addAnswer', moduleId: 'question/details/addAnswer', title: 'Add Answer', nav: true }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 140 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      ${row.title}\n    </a>\n  </div>\n\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n\n</template>\n";

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(132);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  View.prototype.submit = function submit() {
	    var _this2 = this;
	
	    //Work around to https://github.com/balderdashy/sails/issues/1573
	    var entity = {
	      id: this.entity.id, category: { id: this.entity.category.id }, kind: { id: this.entity.kind.id },
	      text: this.entity.text,
	      isMultipleChoice: this.entity.isMultipleChoice,
	      hasManyAnswers: this.entity.hasManyAnswers, score: this.entity.score
	    };
	    this.sails.put('' + this.baseCtrlUrl + this.entity.id, entity).then(function (data) {
	      return _this2.router.navigate('/Questions/');
	    });
	  };
	
	  View.prototype.activate = function activate(params) {
	    var _this3 = this;
	
	    return Promise.all([this.sails.get('' + _base.baseConfig.baseCtrlUrl + params.id + '?populate=kind,category,answers').then(function (res) {
	      _this3.entity = res.body;
	      console.log(_this3.entity.kind.id);
	    }).catch(function (res) {
	      console.log(res);
	    }), this.sails.get("/questionCategories").then(function (res) {
	      _this3.questionCategories = res.body;
	    }).catch(function (res) {
	      console.log(res);
	    }), this.sails.get("/questionKinds").then(function (res) {
	      _this3.questionKinds = res.body;
	    }).catch(function (res) {
	      console.log(res);
	    })]);
	  };
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 142 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form submit.delegate=\"submit()\" ui-form>\n      <div class=\"field\">\n        <label for.bind=\"type\" class=\"col-sm-2 control-label\">Kind</label>\n        <div ui-dropdown=\"selection: entity.kind.id\">\n          <input type=\"hidden\" value.bind=\"entity.kind.id\">\n          <i class=\"dropdown icon\"></i>\n          <div class=\"default text\">Please Select</div>\n          <div class=\"menu\">\n            <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionKinds\">${k.text}</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for.bind=\"type\" class=\"col-sm-2 control-label\">Category</label>\n        <div ui-dropdown=\"selection: entity.category.id\">\n          <input type=\"hidden\" value.bind=\"entity.category.id\">\n          <i class=\"dropdown icon\"></i>\n          <div class=\"default text\">Please Select</div>\n          <div class=\"menu\">\n            <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionCategories\">${k.text}</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for=\"Question\">Question</label>\n        <textarea id=\"Question\" name=\"text\" value.bind=\"entity.text\"></textarea>\n      </div>\n      <div class=\"field\">\n        <label for=\"isMultipleChoice\">Is Multiple Choice</label>\n        <div class=\"ui toggle checkbox\">\n          <input type=\"checkbox\" id=\"isMultipleChoice\" checked.bind=\"entity.isMultipleChoice\">\n          <label> </label>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for=\"hasManyAnswers\">Has Many Answers</label>\n        <div class=\"ui toggle checkbox\">\n          <input type=\"checkbox\" id=\"hasManyAnswers\" checked.bind=\"entity.hasManyAnswers\">\n          <label> </label>\n        </div>\n      </div>\n      <form-control value.bind=\"entity.score\" label=\"Score\" type=\"number\"></form-control>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\">\n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''}\"  ui-table=\"\">\n      <thead>\n      <th>Text</th>\n      <th>Description</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entity.answers\">\n        <td>${obj.text}</td>\n        <td>${obj.desc}</td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseListVM2 = __webpack_require__(12);
	
	var _base = __webpack_require__(132);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseListVM) {
	  _inherits(List, _BaseListVM);
	
	  function List(sails, router, config) {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, _BaseListVM.call(this, sails, router, config));
	  }
	
	  List.prototype.activate = function activate() {
	    var _this2 = this;
	
	    return this.sails.get(this.baseCtrlUrl + '?populate=kind,category').then(function (res) {
	      _this2.entities = res.body;
	      _BaseListVM.prototype.subscribe.call(_this2);
	    }).catch(function (res) {
	      res.statusCode === 403 ? _this2.router.navigate('/login') : _BaseListVM.prototype.logger.error(res);
	    });
	  };
	
	  return List;
	}(_BaseListVM2.BaseListVM)) || _class);

/***/ },
/* 144 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Question</th>\n      <th>Kind</th>\n      <th>Category</th>\n      <th>Is Multiple Choice</th>\n      <th>Has Many Answers</th>\n      <th class=\"right aligned\">Score</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.text}</td>\n        <td>${obj.kind.text}</td>\n        <td>${obj.category.text}</td>\n        <td><i class=\"${obj.isMultipleChoice?'checkmark green':'remove red'} icon\"></i></td>\n        <td><i class=\"${obj.hasManyAnswers  ?'checkmark green':'remove red'} icon\"></i></td>\n        <td class=\"right aligned\">${obj.score}</td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"unhide icon\" data-content=\"View and edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: answers; params.bind: { id: obj.id }\"><i class=\"sitemap icon\" data-content=\"View Answers\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: addAnswer; params.bind: { id: obj.id }\"><i class=\" plus icon\" data-content=\"Add Answer\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n    </div>\n    </div>\n  </section>\n</template>\n";

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(132);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  View.prototype.submit = function submit() {
	    var _this2 = this;
	
	    //Work around to https://github.com/balderdashy/sails/issues/1573
	    var entity = {
	      id: this.entity.id, category: { id: this.entity.category.id }, kind: { id: this.entity.kind.id },
	      text: this.entity.text,
	      isMultipleChoice: this.entity.isMultipleChoice,
	      hasManyAnswers: this.entity.hasManyAnswers, score: this.entity.score
	    };
	    this.sails.put('' + this.baseCtrlUrl + this.entity.id, entity).then(function (data) {
	      return _this2.router.navigate('');
	    });
	  };
	
	  View.prototype.activate = function activate(params) {
	    var _this3 = this;
	
	    return Promise.all([this.sails.get('' + _base.baseConfig.baseCtrlUrl + params.id + '?populate=kind,category,answers').then(function (res) {
	      _this3.entity = res.body;
	      console.log(_this3.entity.kind.id);
	    }).catch(function (res) {
	      console.log(res);
	    }), this.sails.get("/questionCategories").then(function (res) {
	      _this3.questionCategories = res.body;
	    }).catch(function (res) {
	      console.log(res);
	    }), this.sails.get("/questionKinds").then(function (res) {
	      _this3.questionKinds = res.body;
	    }).catch(function (res) {
	      console.log(res);
	    })]);
	  };
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 146 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <a class=\"ui submit button blue\" route-href=\"route: answers; params.bind: { id: entity.id }\"><i class=\"unordered list icon\"></i>Answers</a>\n    <a class=\"ui submit button blue\" route-href=\"route: addAnswer; params.bind: { id: entity.id }\"><i class=\"plus outline icon\"></i>Add Answer</a>\n    <form submit.delegate=\"submit()\" ui-form>\n      <div class=\"two fields\">\n        <div class=\"field\">\n          <label for.bind=\"type\" class=\"col-sm-2 control-label\">Kind</label>\n          <div ui-dropdown=\"selection: entity.kind.id\">\n            <input type=\"hidden\" value.bind=\"entity.kind.id\">\n            <i class=\"dropdown icon\"></i>\n            <div class=\"default text\">Please Select</div>\n            <div class=\"menu\">\n              <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionKinds\">${k.text}</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field\">\n          <label for.bind=\"type\" class=\"col-sm-2 control-label\">Category</label>\n          <div ui-dropdown=\"selection: entity.category.id\">\n            <input type=\"hidden\" value.bind=\"entity.category.id\">\n            <i class=\"dropdown icon\"></i>\n            <div class=\"default text\">Please Select</div>\n            <div class=\"menu\">\n              <div class=\"item\" data-value.bind=\"k.id\" repeat.for=\"k of questionCategories\">${k.text}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"field\">\n        <label for=\"Question\">Question</label>\n        <textarea id=\"Question\" name=\"text\" value.bind=\"entity.text\"></textarea>\n      </div>\n      <div class=\"three fields\">\n        <form-control value.bind=\"entity.score\" label=\"Score\" type=\"number\"></form-control>\n        <div class=\"field\">\n          <label for=\"isMultipleChoice\">Is Multiple Choice</label>\n          <div class=\"ui toggle checkbox\">\n            <input type=\"checkbox\" id=\"isMultipleChoice\" checked.bind=\"entity.isMultipleChoice\">\n            <label> </label>\n          </div>\n        </div>\n        <div class=\"field\">\n          <label for=\"hasManyAnswers\">Has Many Answers</label>\n          <div class=\"ui toggle checkbox\">\n            <input type=\"checkbox\" id=\"hasManyAnswers\" checked.bind=\"entity.hasManyAnswers\">\n            <label> </label>\n          </div>\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 147 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/questionCategories/',
	  'entityToSubscribe': 'questioncategory'
	};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: [''], name: 'list', moduleId: 'questionCategory/list', title: 'List', nav: true, settings: { icon: 'list outline' } }, { route: ['create'], name: 'create', moduleId: 'questionCategory/create', title: 'Add New', nav: true, settings: { icon: 'plus' } }, { route: ['/:id'], name: 'details', moduleId: 'questionCategory/view', title: 'Details' }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 149 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      <i class=\"${row.settings.icon} icon\" data-content=\"View Answers\"></i>${row.title}\n    </a>\n    <a class=\"${isEdit ? 'active' : ''} item\">\n      <i class=\"unhide icon\"></i>Edit/Delete\n    </a>\n  </div>\n  <div class=\"ui segment\">\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n  </div>\n</template>\n";

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseCreateVM2 = __webpack_require__(11);
	
	var _base = __webpack_require__(147);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseCreateVM) {
	  _inherits(Create, _BaseCreateVM);
	
	  function Create(sails, router, baseConfig) {
	    _classCallCheck(this, Create);
	
	    return _possibleConstructorReturn(this, _BaseCreateVM.call(this, sails, router, baseConfig));
	  }
	
	  return Create;
	}(_BaseCreateVM2.BaseCreateVM)) || _class);

/***/ },
/* 151 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit fluid button green\"><i class=\"send icon\"></i>Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseListVM2 = __webpack_require__(12);
	
	var _base = __webpack_require__(147);
	
	__webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseListVM) {
	  _inherits(List, _BaseListVM);
	
	  function List(sails, router, config) {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, _BaseListVM.call(this, sails, router, config));
	  }
	
	  return List;
	}(_BaseListVM2.BaseListVM)) || _class);

/***/ },
/* 153 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Text</th>\n      <th>Description</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.text}</td>\n        <td>${obj.desc}</td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"edit icon\" data-content=\"Edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(147);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 155 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 156 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/questionKinds/',
	  'entityToSubscribe': 'questionkind'
	};

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: [''], name: 'list', moduleId: 'questionKind/list', title: 'List', nav: true, settings: { icon: 'list outline' } }, { route: ['create'], name: 'create', moduleId: 'questionKind/create', title: 'Add New', nav: true, settings: { icon: 'plus' } }, { route: ['/:id'], name: 'details', moduleId: 'questionKind/view', title: 'Details' }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 158 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      <i class=\"${row.settings.icon} icon\" data-content=\"View Answers\"></i>${row.title}\n    </a>\n    <a class=\"${isEdit ? 'active' : ''} item\">\n      <i class=\"unhide icon\"></i>Edit/Delete\n    </a>\n  </div>\n  <div class=\"ui segment\">\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n  </div>\n</template>\n";

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _base = __webpack_require__(156);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router), _dec(_class = function () {
	  function Create(sails, router) {
	    _classCallCheck(this, Create);
	
	    this.sails = sails;
	    this.theRouter = router;
	  }
	
	  Create.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.post(_base.baseConfig.baseCtrlUrl, this.entity).then(function (data) {
	      return _this.theRouter.navigate("");
	    });
	  };
	
	  return Create;
	}()) || _class);

/***/ },
/* 160 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit fluid button green\"><i class=\"send icon\"></i>Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseListVM2 = __webpack_require__(12);
	
	var _base = __webpack_require__(156);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseListVM) {
	  _inherits(List, _BaseListVM);
	
	  function List(sails, router, config) {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, _BaseListVM.call(this, sails, router, config));
	  }
	
	  return List;
	}(_BaseListVM2.BaseListVM)) || _class);

/***/ },
/* 162 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Text</th>\n      <th>Description</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.text}</td>\n        <td>${obj.desc}</td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"edit icon\" data-content=\"Edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(156);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 164 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 165 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/questionTypes/',
	  'entityToSubscribe': 'questiontype'
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: [''], name: 'list', moduleId: 'questionType/list', title: 'List', nav: true, settings: { icon: 'list outline' } }, { route: ['create'], name: 'create', moduleId: 'questionType/create', title: 'Add New', nav: true, settings: { icon: 'plus' } }, { route: ['/:id'], name: 'details', moduleId: 'questionType/view', title: 'Details' }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 167 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      <i class=\"${row.settings.icon} icon\" data-content=\"View Answers\"></i>${row.title}\n    </a>\n    <a class=\"${isEdit ? 'active' : ''} item\">\n      <i class=\"unhide icon\"></i>Edit/Delete\n    </a>\n  </div>\n  <div class=\"ui segment\">\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n  </div>\n</template>\n";

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _base = __webpack_require__(165);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router), _dec(_class = function () {
	  function Create(sails, router) {
	    _classCallCheck(this, Create);
	
	    this.sails = sails;
	    this.theRouter = router;
	  }
	
	  Create.prototype.submit = function submit() {
	    var _this = this;
	
	    this.sails.post(_base.baseConfig.baseCtrlUrl, this.entity).then(function (data) {
	      return _this.theRouter.navigate("");
	    });
	  };
	
	  return Create;
	}()) || _class);

/***/ },
/* 169 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit fluid button green\"><i class=\"send icon\"></i>Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseListVM2 = __webpack_require__(12);
	
	var _base = __webpack_require__(165);
	
	__webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseListVM) {
	  _inherits(List, _BaseListVM);
	
	  function List(sails, router, config) {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, _BaseListVM.call(this, sails, router, config));
	  }
	
	  return List;
	}(_BaseListVM2.BaseListVM)) || _class);

/***/ },
/* 171 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Text</th>\n      <th>Description</th>\n      <th>Actions</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.text}</td>\n        <td>${obj.desc}</td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"edit icon\" data-content=\"Edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(165);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 173 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"text\" value.bind=\"entity.text\" label=\"Text\"></form-control>\n      <form-control name=\"desc\" value.bind=\"entity.desc\" label=\"Description\"></form-control>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Welcome = exports.Welcome = function Welcome() {
	  _classCallCheck(this, Welcome);
	};

/***/ },
/* 175 */
/***/ function(module, exports) {

	module.exports = "<template>\n   <div ui-card class=\"centered\">\n    <div class=\"image\">\n\n    </div>\n    <div class=\"content\">\n      <a class=\"header\">Elyse</a>\n    </div>\n  </div>\n\n   <div class=\"ui icon message\">\n    <i class=\"inbox icon\"></i>\n    <div class=\"content\">\n      <div class=\"header\">\n        Have you heard about our mailing list?\n      </div>\n      <p>Get the best news in your e-mail every day.</p>\n    </div>\n  </div>\n\n  <div ui-message=\"icon: blue loading notched circle\">\n    <div class=\"content\">\n      <div class=\"header\">\n        Just one second\n      </div>\n      <p>We're fetching that content for you.</p>\n    </div>\n  </div>\n\n  <div ui-message=\"icon.bind: messageIcon\" class=\"icon\">\n    <i class=\"ui icon inbox\"></i>\n    <div class=\"content\">\n      <div class=\"header\">\n        Have you heard about our mailing list?\n      </div>\n      <p>Get the best news in your e-mail every day.</p>\n    </div>\n  </div>\n  \n  <div ui-dropdown=\"selection: messageIcon\">\n    <input name=\"messageIcon\" type=\"hidden\" value.bind=\"messageIcon\">\n    <i class=\"dropdown icon\"></i>\n    <div class=\"default text\">Message Icon</div>\n    <div class=\"menu\">\n      <div class=\"item\" data-value=\"inbox\">Inbox</div>\n      <div class=\"item\" data-value=\"teal lab\">Lab</div>\n      <div class=\"item\" data-value=\"payment\">Payment</div>\n      <div class=\"item\" data-value=\"calendar\">Calendar</div>\n      <div class=\"item\" data-value=\"horizontally flipped comment\">Comment</div>\n    </div>\n  </div>\n</template>\n";

/***/ },
/* 176 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var baseConfig = exports.baseConfig = {
	  'baseCtrlUrl': '/users/',
	  'entityToSubscribe': 'user'
	};

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ChildRouter = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ChildRouter = exports.ChildRouter = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
	  ChildRouter.prototype.configureRouter = function configureRouter(config, router) {
	    config.map([{ route: [''], name: 'list', moduleId: 'users/list', title: 'List', nav: true, settings: { icon: 'list outline' } }, { route: ['create'], name: 'create', moduleId: 'users/create', title: 'Add New', nav: true, settings: { icon: 'plus' } }, { route: ['/:id'], name: 'details', moduleId: 'users/view', title: 'Details' }]);
	    this.router = router;
	  };
	
	  function ChildRouter(eventAggregator) {
	    _classCallCheck(this, ChildRouter);
	
	    this.ea = eventAggregator;
	  }
	
	  ChildRouter.prototype.attached = function attached() {
	    var _this = this;
	
	    this.subscriber = this.ea.subscribe('InEditMode', function (data) {
	      return _this.isEdit = data;
	    });
	  };
	
	  return ChildRouter;
	}()) || _class);

/***/ },
/* 178 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <div class=\"ui pointing menu\">\n    <a repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''} item\" href.bind=\"row.href\">\n      <i class=\"${row.settings.icon} icon\" data-content=\"View Answers\"></i>${row.title}\n    </a>\n    <a class=\"${isEdit ? 'active' : ''} item\">\n      <i class=\"unhide icon\"></i>Edit/Delete\n    </a>\n  </div>\n  <div class=\"ui segment\">\n    <section class=\"au-animate\">\n      <router-view></router-view>\n    </section>\n  </div>\n</template>\n";

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Create = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseCreateVM2 = __webpack_require__(11);
	
	var _base = __webpack_require__(176);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Create = exports.Create = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseCreateVM) {
	  _inherits(Create, _BaseCreateVM);
	
	  function Create(sails, router, baseConfig) {
	    _classCallCheck(this, Create);
	
	    return _possibleConstructorReturn(this, _BaseCreateVM.call(this, sails, router, baseConfig));
	  }
	
	  return Create;
	}(_BaseCreateVM2.BaseCreateVM)) || _class);

/***/ },
/* 180 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"username\" value.bind=\"entity.username\" label=\"Username\"></form-control>\n      <form-control name=\"email\" value.bind=\"entity.email\" label=\"Email\"></form-control>\n      <form-control name=\"gravatarUrl\" value.bind=\"entity.gravatarUrl\" label=\"Avatar Url\"></form-control>\n      <button type=\"submit\" class=\"ui submit fluid button green\"><i class=\"send icon\"></i>Add</button>\n    </form>\n  </section>\n</template>\n";

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.List = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseListVM2 = __webpack_require__(12);
	
	var _base = __webpack_require__(176);
	
	__webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var List = exports.List = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _base.baseConfig), _dec(_class = function (_BaseListVM) {
	  _inherits(List, _BaseListVM);
	
	  function List(sails, router, config) {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, _BaseListVM.call(this, sails, router, config));
	  }
	
	  List.prototype.activate = function activate() {
	    var _this2 = this;
	
	    return this.sails.get(this.baseCtrlUrl + '?populate=roles').then(function (res) {
	      _this2.entities = res.body;
	      _this2.subscribe();
	    }).catch(function (res) {
	      res.statusCode === 403 ? _this2.router.navigate('/login') : logger.error(res);
	    });
	  };
	
	  return List;
	}(_BaseListVM2.BaseListVM)) || _class);

/***/ },
/* 182 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <div class=\"ui toggle checkbox\">\n      <input type=\"checkbox\" name=\"public\" checked.bind=\"isCelled\"> \n      <label>Toggle Celled Table</label>\n    </div>\n    <table class=\"striped ${isCelled?'celled':''} green compact\"  ui-table=\"\">\n      <thead>\n      <th>Username</th>\n      <th>Email Id</th>\n      <th>Avatar URL</th>\n      <th>Roles</th>\n      </thead>\n      <tbody>\n      <tr repeat.for=\"obj of entities\">\n        <td>${obj.username}</td>\n        <td>${obj.email}</td>\n        <td>\n          <span repeat.for=\"r of obj.roles\">${r.name}, </span>\n        </td>\n        <td>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"edit icon\" data-content=\"Edit\"></i></a>\n          <a class=\"btn btn-xs\" route-href=\"route: details; params.bind: { id: obj.id }\"><i class=\"trash outline icon red\" data-content=\"Delete\"></i></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </section>\n</template>\n";

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.View = undefined;
	
	var _dec, _class;
	
	var _aureliaFramework = __webpack_require__(18);
	
	var _aureliaRouter = __webpack_require__(33);
	
	var _aureliaEventAggregator = __webpack_require__(25);
	
	var _aureliaSailsSocketClient = __webpack_require__(26);
	
	var _BaseViewVM2 = __webpack_require__(16);
	
	var _base = __webpack_require__(176);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = (_dec = (0, _aureliaFramework.inject)(_aureliaSailsSocketClient.SailsSocketClient, _aureliaRouter.Router, _aureliaEventAggregator.EventAggregator), _dec(_class = function (_BaseViewVM) {
	  _inherits(View, _BaseViewVM);
	
	  function View(sails, router, eventAggregator) {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, _BaseViewVM.call(this, sails, router, eventAggregator, _base.baseConfig));
	  }
	
	  return View;
	}(_BaseViewVM2.BaseViewVM)) || _class);

/***/ },
/* 184 */
/***/ function(module, exports) {

	module.exports = "<template>\n  <section class=\"au-animate\">\n    <form class=\"ui form\" submit.delegate=\"submit()\">\n      <form-control name=\"username\" value.bind=\"entity.username\" label=\"Username\"></form-control>\n      <form-control name=\"email\" value.bind=\"entity.email\" label=\"Email\"></form-control>\n      <form-control name=\"gravatarUrl\" value.bind=\"entity.gravatarUrl\" label=\"Avatar Url\"></form-control>\n      <button type=\"submit\" class=\"ui submit button blue\"><i class=\"upload icon\"></i>Update</button>\n      <div class=\"ui vertical animated red button\" click.delegate=\"deleteEntity()\">\n        <div class=\"hidden content\">Delete</div>\n        <div class=\"visible content\">\n          <i class=\"trash outline icon\"></i>\n        </div>\n      </div>\n    </form>\n  </section>\n</template>\n";

/***/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,